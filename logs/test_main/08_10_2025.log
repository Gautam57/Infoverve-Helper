[ 2025-08-10 11:00:22,187 ] test_main.py:146 root - INFO - .........................Starting Infoverve Helper Application.........................
[ 2025-08-10 11:00:26,945 ] test_main.py:146 root - INFO - .........................Starting Infoverve Helper Application.........................
[ 2025-08-10 11:00:26,945 ] test_main.py:154 root - INFO - GOOGLE_API_KEY loaded into session.
[ 2025-08-10 11:00:26,945 ] test_main.py:162 root - INFO - GROQ_API_KEY loaded.
[ 2025-08-10 11:01:10,242 ] test_main.py:146 root - INFO - .........................Starting Infoverve Helper Application.........................
[ 2025-08-10 11:01:10,242 ] test_main.py:162 root - INFO - GROQ_API_KEY loaded.
[ 2025-08-10 11:01:10,290 ] test_main.py:186 root - INFO - Embedding model initialized.
[ 2025-08-10 11:01:10,638 ] _client.py:1025 httpx - INFO - HTTP Request: GET http://ai.infoveave.cloud:6333 "HTTP/1.1 200 OK"
[ 2025-08-10 11:01:10,639 ] test_main.py:190 root - INFO - Connected to Qdrant.
[ 2025-08-10 11:01:10,774 ] _client.py:1025 httpx - INFO - HTTP Request: GET http://ai.infoveave.cloud:6333/collections "HTTP/1.1 200 OK"
[ 2025-08-10 11:01:10,776 ] test_main.py:194 root - INFO - Qdrant collections retrieved.
[ 2025-08-10 11:01:10,776 ] test_main.py:201 root - INFO - Using collection: infoverve_helper_docs_hybrid
[ 2025-08-10 11:01:18,662 ] test_main.py:204 root - INFO - Sparse embeddings initialized.
[ 2025-08-10 11:01:18,934 ] _client.py:1025 httpx - INFO - HTTP Request: GET http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid "HTTP/1.1 200 OK"
[ 2025-08-10 11:01:21,365 ] _client.py:1025 httpx - INFO - HTTP Request: GET http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid "HTTP/1.1 200 OK"
[ 2025-08-10 11:01:21,366 ] test_main.py:216 root - INFO - QdrantVectorStore initialized.
[ 2025-08-10 11:01:21,451 ] test_main.py:222 root - INFO - LLM initialized.
[ 2025-08-10 11:01:22,901 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points/query "HTTP/1.1 200 OK"
[ 2025-08-10 11:01:23,431 ] test_main.py:244 root - INFO - Original query embedding generated.
[ 2025-08-10 11:01:23,452 ] test_main.py:96 root - INFO - (Document(metadata={'_id': '6a190f63-59d4-4bd7-a1e6-aadcc4163312', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='. With a Datasource, you efficiently import, manage and manipulate data. This sets the stage for effective data analysis, visualization and reporting. Edit the Datasource status\nClick the pencil icon\nnext to a Datasource name to select whether the Datasource is\nverified\nor\nnot verified\n.\nCategorize the Datasources\nAssign specific\ndomains ,\ntiers\n,\ntags\n, and\nglossary\nterms to organize and classify the Datasources effectively.\nManage the sharing status\nView whether a Datasource is\nshared\nor\nnot shared to manage access permissions.\nTrack the Datasource updates\nView information such as\ncreated by\nand\nupdated by\n, along with the respective dates. This ensures transparency and supports version tracking.\nEdit the Description You can either manually\nedit\nthe description of a Datasource or generate it automatically using\nAI\nfor streamlined content creation.\nDocumentation Documentation provides comprehensive information about an asset. It enables you to understand its purpose, structure, and functionality. It serves as a reference to ensure clarity and effective utilization of the asset.\nAfter you click the\nNew documentation button, you can compose your documentation in the provided editor. Once completed, click the\nSave\nicon to store the documentation.\nMeasures and Dimensions\nThis section outlines the\nmeasures\n(metrics or facts) and\ndimensions (descriptive attributes) of the data. It allows you to understand how the data is categorized and measured within the Datasource. You can refer to this section to gain clarity on the underlying structure of the data.\nColumns This section lists the individual\ncolumns of the Datasource. It details their names, types, and additional information. You can edit the columns as required. Editing allows you to modify column definitions, types, and any metadata associated with them. This enables better data organization and understanding'), 0.5)
[ 2025-08-10 11:01:23,533 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-10 11:01:23,588 ] test_main.py:105 root - INFO - Retrieved result for point ID: 6a190f63-59d4-4bd7-a1e6-aadcc4163312
[ 2025-08-10 11:01:23,588 ] test_main.py:90 root - ERROR - Error during query rewriting: name 'context' is not defined
[ 2025-08-10 11:01:23,588 ] test_main.py:249 root - INFO - Rewritten query: explain what is a data source
[ 2025-08-10 11:01:23,588 ] test_main.py:256 root - INFO - Rewritten query parts: ['explain what is a data source']
[ 2025-08-10 11:01:23,589 ] test_main.py:265 root - INFO - Rewritten Query 1: explain what is a data source
[ 2025-08-10 11:01:24,687 ] test_main.py:268 root - INFO - Embedding generated for query 1.
[ 2025-08-10 11:01:25,792 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points/query "HTTP/1.1 200 OK"
[ 2025-08-10 11:01:25,794 ] test_main.py:280 root - INFO - Processing query part 1: explain what is a data source
[ 2025-08-10 11:01:25,814 ] test_main.py:96 root - INFO - (Document(metadata={'_id': '6a190f63-59d4-4bd7-a1e6-aadcc4163312', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='. With a Datasource, you efficiently import, manage and manipulate data. This sets the stage for effective data analysis, visualization and reporting. Edit the Datasource status\nClick the pencil icon\nnext to a Datasource name to select whether the Datasource is\nverified\nor\nnot verified\n.\nCategorize the Datasources\nAssign specific\ndomains ,\ntiers\n,\ntags\n, and\nglossary\nterms to organize and classify the Datasources effectively.\nManage the sharing status\nView whether a Datasource is\nshared\nor\nnot shared to manage access permissions.\nTrack the Datasource updates\nView information such as\ncreated by\nand\nupdated by\n, along with the respective dates. This ensures transparency and supports version tracking.\nEdit the Description You can either manually\nedit\nthe description of a Datasource or generate it automatically using\nAI\nfor streamlined content creation.\nDocumentation Documentation provides comprehensive information about an asset. It enables you to understand its purpose, structure, and functionality. It serves as a reference to ensure clarity and effective utilization of the asset.\nAfter you click the\nNew documentation button, you can compose your documentation in the provided editor. Once completed, click the\nSave\nicon to store the documentation.\nMeasures and Dimensions\nThis section outlines the\nmeasures\n(metrics or facts) and\ndimensions (descriptive attributes) of the data. It allows you to understand how the data is categorized and measured within the Datasource. You can refer to this section to gain clarity on the underlying structure of the data.\nColumns This section lists the individual\ncolumns of the Datasource. It details their names, types, and additional information. You can edit the columns as required. Editing allows you to modify column definitions, types, and any metadata associated with them. This enables better data organization and understanding'), 0.5)
[ 2025-08-10 11:01:25,869 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-10 11:01:25,870 ] test_main.py:105 root - INFO - Retrieved result for point ID: 6a190f63-59d4-4bd7-a1e6-aadcc4163312
[ 2025-08-10 11:01:25,871 ] test_main.py:96 root - INFO - (Document(metadata={'_id': 'bef85231-c8db-41e1-a38d-a20d4fcd59d3', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='Datasources in Infoveave serve as the foundation for data connectivity and integration. They enable you to establish a link to various external Datasources such as databases, cloud services and APIs . With a Datasource, you efficiently import, manage and manipulate data. This sets the stage for effective data analysis, visualization and reporting. Infoveave Datasource Classification\nFiles\nFile-based Datasources in Infoveave offer a flexible way to connect with and manage various file formats. You can choose from multiple file types and structures that best suit your data needs. Delimited\nSuitable for CSV, TSV, PSV, and custom delimited files.\nExcel\nSupports both XLS and XLSX formats, allowing direct interaction with Microsoft Excel files.\nFixed length Separates data into columns using positional information. Ideal for working with structured datasets.\nJSON\nConnects to JSON-based APIs and automations, ensuring seamless integration with JSON Datasources.\nMulti file Lets you combine multiple file types within a single Datasource to simplify complex data configurations.\nPlugin Parser\nEnables the upload of custom C# plugins to parse specific file formats and enhance data interpretation.\nDatabases'), 0.33333334)
[ 2025-08-10 11:01:25,923 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-10 11:01:25,923 ] test_main.py:105 root - INFO - Retrieved result for point ID: bef85231-c8db-41e1-a38d-a20d4fcd59d3
[ 2025-08-10 11:01:25,924 ] test_main.py:96 root - INFO - (Document(metadata={'_id': '9824e5d3-3001-4af8-808a-03a515109879', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='button. When you click the button, you are directed to a visual walkthrough on how to create a Datasource.\nSelect Datasource type Start by choosing the right type of Datasource. It helps tailor the platform to handle specific data characteristics. This ensures efficient processing and analysis based on the nature of your data.\nImport data Connect to the necessary databases or cloud services for a smooth data import into Infoveave. Alternatively, configure the data table for file types. This creates an organized and structured setup for effective data analysis and accurate insights.\nConfigure measures and dimensions Set up essential measures and dimensions to introduce flexibility in analysis. This supports charts and widgets, helping you make informed decisions by tailoring insights to your specific goals.\nSave Datasource Save your Datasource to perform various types of analysis. These include business analysis, statistical analysis, query execution, Infoboard creation, machine learning modelling, and workflow automation setup.\nUsing the Search Bar The Search Bar at the top right of the screen allows you to quickly find any Datasource within the platform. Simply enter keywords related to the name of the Datasource or any part of the content you are searching for.'), 0.25)
[ 2025-08-10 11:01:25,968 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-10 11:01:25,969 ] test_main.py:105 root - INFO - Retrieved result for point ID: 9824e5d3-3001-4af8-808a-03a515109879
[ 2025-08-10 11:01:25,969 ] test_main.py:96 root - INFO - (Document(metadata={'_id': '23359f88-7cc9-4172-b9f3-54dc8360f87b', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='This feature shows the origin of the data. It illustrates where the data is coming from and its transformation journey. This allows you to trace the flow of the data from its original source to its final destination. It ensures transparency and facilitates troubleshooting.'), 0.2)
[ 2025-08-10 11:01:26,029 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-10 11:01:26,030 ] test_main.py:105 root - INFO - Retrieved result for point ID: 23359f88-7cc9-4172-b9f3-54dc8360f87b
[ 2025-08-10 11:01:26,030 ] test_main.py:96 root - INFO - (Document(metadata={'_id': '66941e31-9743-4c0c-b2f0-dee04dc689f5', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='Introducing Insights\nIntroducing Insights\nCatalogues\nCatalogues\nCreating A Datasource Using Delimited File\nCreate A Datasource Using Delimited File\nCreating A Datasource Using IOT Create A Datasource Using IOT\nCreating Excel type Datasource in Infoveave\nCreate Datasource Using Microsoft Excel\nCreating Datasource Using Microsoft SQL in Infoveave\nCreate Datasource Using Microsoft SQL'), 0.16666667)
[ 2025-08-10 11:01:26,093 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-10 11:01:26,094 ] test_main.py:105 root - INFO - Retrieved result for point ID: 66941e31-9743-4c0c-b2f0-dee04dc689f5
[ 2025-08-10 11:01:26,095 ] test_main.py:96 root - INFO - (Document(metadata={'_id': '00a31ee9-40e5-4934-9094-4724963121bc', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='Introducing Datasources | Infoveave Help\nSkip to content\nIntroducing Datasources'), 0.14285715)
[ 2025-08-10 11:01:26,150 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-10 11:01:26,151 ] test_main.py:105 root - INFO - Retrieved result for point ID: 00a31ee9-40e5-4934-9094-4724963121bc
[ 2025-08-10 11:01:26,151 ] test_main.py:96 root - INFO - (Document(metadata={'_id': '681ecb7f-2282-438c-8098-86fc08e3a69e', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='To create a new Datasource, click on\nNew Datasource\n.\nChoose\nFixed length\nunder Files as the Datasource type.\nUpload the fixed length file from your local storage. Supported file formats include\n.csv and\n.txt\n.\nChoose the connection type for your Datasource. In this case, the connection type is set to default.\nAfter providing the necessary details, click on\nNext\nto configure the data content. Define the skip begin and skip end lines for the file as required.\nIf your data table has a title column, select the\nFirst line is header\ncheckbox to set the first line as the header. Define each column length in the fixed length file.\nRename the column title as required.\nYou can also manually set the start and end index for the column length.\nClick on the\nPreview\nbutton to preview the configured data table. Click on\nNext\nto configure the data table.\nProvide a name for your Datasource.\nTo add additional files to supplement your Datasource, click on the\nAdd files\noption.\nTo customize the\nTable name and choose the\nIngestion type\n, click on the\nEdit\nicon\nnext to the table name. Configure the following fields within this section.\nTable name\nSpecify the desired table name.\nIngestion type Choose from options such as\nIncremental\n,\nTruncate and Reload\n, or\nUpdate\nto define how new data is integrated into the existing dataset.\nDate column exists This checkbox identifies the date column in your dataset by default.\nAdd upload date\nIf you wish to include an upload date column, select this checkbox. It can be helpful for tracking when new data is added to the dataset.\nIncremental'), 0.125)
[ 2025-08-10 11:01:26,205 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-10 11:01:26,257 ] test_main.py:105 root - INFO - Retrieved result for point ID: 681ecb7f-2282-438c-8098-86fc08e3a69e
[ 2025-08-10 11:01:26,258 ] test_main.py:96 root - INFO - (Document(metadata={'_id': '7eddf70b-6438-4112-81cc-9db6776e3f3d', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='Quality\nThe\nQuality\ntab displays the results of the most recent\nData Quality\nchecks run for the Datasource. This ensures the integrity and consistency of the data. It provides assurance that the data is accurate and ready for use.'), 0.11111111)
[ 2025-08-10 11:01:26,311 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-10 11:01:26,312 ] test_main.py:105 root - INFO - Retrieved result for point ID: 7eddf70b-6438-4112-81cc-9db6776e3f3d
[ 2025-08-10 11:01:26,312 ] test_main.py:96 root - INFO - (Document(metadata={'_id': '0e7c4a4e-6c35-46ad-9697-4ea4a4d9b128', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='.\nTo create a new Datasource, click on\nNew Datasource\n.\nChoose\nCustom file parser\nas the Datasource type.\nA new window opens for the Datasource creation process. Click on the option to select the file under\nCreate Datasource using file\nto upload the file.\nYou can select a file from your local storage. Supported file extensions are .txt, .prn, .dat, .dtf, .xlsx, .csv, .xls, .xlsm.\nAfter providing the necessary details, proceed to\nNext in the Datasource configuration.\nOnce the file upload is complete, a preview of the unstructured data becomes available.\nYou must create a custom\nparse code\nin either\n.txt or .json\nformat for an unstructured file\n.\nYou can click on\nImport template\nto import the formatting template from your storage location and convert the Datasource to a structured format.\nClick on\nPreview to see the conversion of the Datasource from an unstructured format to a structured format.\nClick on\nNext\nto configure the measures and dimensions in the Datasource. Once the file processing is complete, a tabular preview of the data becomes available.\nProvide a name for your Datasource.\nTo add additional files to supplement your Datasource, click on the\nAdd files\noption. To customize the\nTable name\nand choose the\nIngestion type\n, click on the\nEdit\nicon\nclose to the table name. Configure the following fields within this section.\nTable name\nSpecify the desired table name.'), 0.1)
[ 2025-08-10 11:01:26,369 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-10 11:01:26,370 ] test_main.py:105 root - INFO - Retrieved result for point ID: 0e7c4a4e-6c35-46ad-9697-4ea4a4d9b128
[ 2025-08-10 11:01:26,370 ] test_main.py:96 root - INFO - (Document(metadata={'_id': '2ff9c5be-9b56-4400-96cb-bb7da0dccec6', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='button, you can compose your documentation in the provided editor. Once completed, click the\nSave\nicon to store the documentation.\nWidgets In the Infoboards section, widgets serve as essential visual elements that help present and organize data in a structured way. Each widget is associated with a specific Datasource and can be customized to display various types of data in different formats. Here is a breakdown of the key aspects of widgets.\nWidget name\nIdentifies the specific widget being used.\nWidget type\nSpecifies the format or design of the widget (for example, Image, Bar, TreeMap, or Shape). Source\nLinks the widget to its Datasource, such as Loan Data or other relevant datasets.\nMeasures\nDescribes the quantitative data being displayed, like Number of Loans or Loan Amount.\nDimensions Lists the key dimensions or categories by which the data is segmented, such as Branch, Product, Loan Status, and State. Each widget in the Infoboard is tailored to provide insights based on its respective data. It helps you visualize key metrics and KPIs in a meaningful way . The configuration of each widget can include elements like charts, maps, and filters, ensuring you have a flexible and comprehensive view of the data. Sources\nIn the\nSources\nsection of the Infoboard, the system displays the various Datasources linked to each Infoboard. When you select a Datasource, the system shows detailed information about that source. This includes the following.\nDescription\nA brief overview or additional context regarding the Datasource.\nTable Information\nDetailed metadata for the Datasource, including the column names and their respective types.\nLinked Widgets Information about how many widgets are linked to the Datasource. This indicates how the data is being used within the Infoboard for reporting or visualization purposes.'), 0.09090909)
[ 2025-08-10 11:01:26,421 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-10 11:01:26,422 ] test_main.py:105 root - INFO - Retrieved result for point ID: 2ff9c5be-9b56-4400-96cb-bb7da0dccec6
[ 2025-08-10 11:01:26,422 ] test_main.py:135 root - INFO - Loaded rewritten query user prompt.
[ 2025-08-10 11:01:27,761 ] _client.py:1025 httpx - INFO - HTTP Request: POST https://api.groq.com/openai/v1/chat/completions "HTTP/1.1 200 OK"
[ 2025-08-10 11:01:27,778 ] test_main.py:283 root - INFO - Response for query part 1: A data source is the origin of the data that Infoveave analyzes.  Think of it like a wellspring of information. 

It could be:

* **A file:**  Like a CSV, Excel spreadsheet, or text file.
* **A database:**  A structured collection of information, such as MySQL or PostgreSQL.
* **An API:**  A way to access data from another application or service, like Twitter or Google Analytics.
* **And more!**  Infoveave can connect to a wide variety of data sources. 


Let me know if you'd like to explore specific types of data sources or how to connect Infoveave to them!
[ 2025-08-10 11:01:27,778 ] test_main.py:286 root - INFO - [(Document(metadata={'_id': '6a190f63-59d4-4bd7-a1e6-aadcc4163312', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='. With a Datasource, you efficiently import, manage and manipulate data. This sets the stage for effective data analysis, visualization and reporting. Edit the Datasource status\nClick the pencil icon\nnext to a Datasource name to select whether the Datasource is\nverified\nor\nnot verified\n.\nCategorize the Datasources\nAssign specific\ndomains ,\ntiers\n,\ntags\n, and\nglossary\nterms to organize and classify the Datasources effectively.\nManage the sharing status\nView whether a Datasource is\nshared\nor\nnot shared to manage access permissions.\nTrack the Datasource updates\nView information such as\ncreated by\nand\nupdated by\n, along with the respective dates. This ensures transparency and supports version tracking.\nEdit the Description You can either manually\nedit\nthe description of a Datasource or generate it automatically using\nAI\nfor streamlined content creation.\nDocumentation Documentation provides comprehensive information about an asset. It enables you to understand its purpose, structure, and functionality. It serves as a reference to ensure clarity and effective utilization of the asset.\nAfter you click the\nNew documentation button, you can compose your documentation in the provided editor. Once completed, click the\nSave\nicon to store the documentation.\nMeasures and Dimensions\nThis section outlines the\nmeasures\n(metrics or facts) and\ndimensions (descriptive attributes) of the data. It allows you to understand how the data is categorized and measured within the Datasource. You can refer to this section to gain clarity on the underlying structure of the data.\nColumns This section lists the individual\ncolumns of the Datasource. It details their names, types, and additional information. You can edit the columns as required. Editing allows you to modify column definitions, types, and any metadata associated with them. This enables better data organization and understanding'), 0.5), (Document(metadata={'_id': 'bef85231-c8db-41e1-a38d-a20d4fcd59d3', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='Datasources in Infoveave serve as the foundation for data connectivity and integration. They enable you to establish a link to various external Datasources such as databases, cloud services and APIs . With a Datasource, you efficiently import, manage and manipulate data. This sets the stage for effective data analysis, visualization and reporting. Infoveave Datasource Classification\nFiles\nFile-based Datasources in Infoveave offer a flexible way to connect with and manage various file formats. You can choose from multiple file types and structures that best suit your data needs. Delimited\nSuitable for CSV, TSV, PSV, and custom delimited files.\nExcel\nSupports both XLS and XLSX formats, allowing direct interaction with Microsoft Excel files.\nFixed length Separates data into columns using positional information. Ideal for working with structured datasets.\nJSON\nConnects to JSON-based APIs and automations, ensuring seamless integration with JSON Datasources.\nMulti file Lets you combine multiple file types within a single Datasource to simplify complex data configurations.\nPlugin Parser\nEnables the upload of custom C# plugins to parse specific file formats and enhance data interpretation.\nDatabases'), 0.33333334), (Document(metadata={'_id': '9824e5d3-3001-4af8-808a-03a515109879', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='button. When you click the button, you are directed to a visual walkthrough on how to create a Datasource.\nSelect Datasource type Start by choosing the right type of Datasource. It helps tailor the platform to handle specific data characteristics. This ensures efficient processing and analysis based on the nature of your data.\nImport data Connect to the necessary databases or cloud services for a smooth data import into Infoveave. Alternatively, configure the data table for file types. This creates an organized and structured setup for effective data analysis and accurate insights.\nConfigure measures and dimensions Set up essential measures and dimensions to introduce flexibility in analysis. This supports charts and widgets, helping you make informed decisions by tailoring insights to your specific goals.\nSave Datasource Save your Datasource to perform various types of analysis. These include business analysis, statistical analysis, query execution, Infoboard creation, machine learning modelling, and workflow automation setup.\nUsing the Search Bar The Search Bar at the top right of the screen allows you to quickly find any Datasource within the platform. Simply enter keywords related to the name of the Datasource or any part of the content you are searching for.'), 0.25), (Document(metadata={'_id': '23359f88-7cc9-4172-b9f3-54dc8360f87b', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='This feature shows the origin of the data. It illustrates where the data is coming from and its transformation journey. This allows you to trace the flow of the data from its original source to its final destination. It ensures transparency and facilitates troubleshooting.'), 0.2), (Document(metadata={'_id': '66941e31-9743-4c0c-b2f0-dee04dc689f5', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='Introducing Insights\nIntroducing Insights\nCatalogues\nCatalogues\nCreating A Datasource Using Delimited File\nCreate A Datasource Using Delimited File\nCreating A Datasource Using IOT Create A Datasource Using IOT\nCreating Excel type Datasource in Infoveave\nCreate Datasource Using Microsoft Excel\nCreating Datasource Using Microsoft SQL in Infoveave\nCreate Datasource Using Microsoft SQL'), 0.16666667), (Document(metadata={'_id': '00a31ee9-40e5-4934-9094-4724963121bc', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='Introducing Datasources | Infoveave Help\nSkip to content\nIntroducing Datasources'), 0.14285715), (Document(metadata={'_id': '681ecb7f-2282-438c-8098-86fc08e3a69e', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='To create a new Datasource, click on\nNew Datasource\n.\nChoose\nFixed length\nunder Files as the Datasource type.\nUpload the fixed length file from your local storage. Supported file formats include\n.csv and\n.txt\n.\nChoose the connection type for your Datasource. In this case, the connection type is set to default.\nAfter providing the necessary details, click on\nNext\nto configure the data content. Define the skip begin and skip end lines for the file as required.\nIf your data table has a title column, select the\nFirst line is header\ncheckbox to set the first line as the header. Define each column length in the fixed length file.\nRename the column title as required.\nYou can also manually set the start and end index for the column length.\nClick on the\nPreview\nbutton to preview the configured data table. Click on\nNext\nto configure the data table.\nProvide a name for your Datasource.\nTo add additional files to supplement your Datasource, click on the\nAdd files\noption.\nTo customize the\nTable name and choose the\nIngestion type\n, click on the\nEdit\nicon\nnext to the table name. Configure the following fields within this section.\nTable name\nSpecify the desired table name.\nIngestion type Choose from options such as\nIncremental\n,\nTruncate and Reload\n, or\nUpdate\nto define how new data is integrated into the existing dataset.\nDate column exists This checkbox identifies the date column in your dataset by default.\nAdd upload date\nIf you wish to include an upload date column, select this checkbox. It can be helpful for tracking when new data is added to the dataset.\nIncremental'), 0.125), (Document(metadata={'_id': '7eddf70b-6438-4112-81cc-9db6776e3f3d', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='Quality\nThe\nQuality\ntab displays the results of the most recent\nData Quality\nchecks run for the Datasource. This ensures the integrity and consistency of the data. It provides assurance that the data is accurate and ready for use.'), 0.11111111), (Document(metadata={'_id': '0e7c4a4e-6c35-46ad-9697-4ea4a4d9b128', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='.\nTo create a new Datasource, click on\nNew Datasource\n.\nChoose\nCustom file parser\nas the Datasource type.\nA new window opens for the Datasource creation process. Click on the option to select the file under\nCreate Datasource using file\nto upload the file.\nYou can select a file from your local storage. Supported file extensions are .txt, .prn, .dat, .dtf, .xlsx, .csv, .xls, .xlsm.\nAfter providing the necessary details, proceed to\nNext in the Datasource configuration.\nOnce the file upload is complete, a preview of the unstructured data becomes available.\nYou must create a custom\nparse code\nin either\n.txt or .json\nformat for an unstructured file\n.\nYou can click on\nImport template\nto import the formatting template from your storage location and convert the Datasource to a structured format.\nClick on\nPreview to see the conversion of the Datasource from an unstructured format to a structured format.\nClick on\nNext\nto configure the measures and dimensions in the Datasource. Once the file processing is complete, a tabular preview of the data becomes available.\nProvide a name for your Datasource.\nTo add additional files to supplement your Datasource, click on the\nAdd files\noption. To customize the\nTable name\nand choose the\nIngestion type\n, click on the\nEdit\nicon\nclose to the table name. Configure the following fields within this section.\nTable name\nSpecify the desired table name.'), 0.1), (Document(metadata={'_id': '2ff9c5be-9b56-4400-96cb-bb7da0dccec6', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='button, you can compose your documentation in the provided editor. Once completed, click the\nSave\nicon to store the documentation.\nWidgets In the Infoboards section, widgets serve as essential visual elements that help present and organize data in a structured way. Each widget is associated with a specific Datasource and can be customized to display various types of data in different formats. Here is a breakdown of the key aspects of widgets.\nWidget name\nIdentifies the specific widget being used.\nWidget type\nSpecifies the format or design of the widget (for example, Image, Bar, TreeMap, or Shape). Source\nLinks the widget to its Datasource, such as Loan Data or other relevant datasets.\nMeasures\nDescribes the quantitative data being displayed, like Number of Loans or Loan Amount.\nDimensions Lists the key dimensions or categories by which the data is segmented, such as Branch, Product, Loan Status, and State. Each widget in the Infoboard is tailored to provide insights based on its respective data. It helps you visualize key metrics and KPIs in a meaningful way . The configuration of each widget can include elements like charts, maps, and filters, ensuring you have a flexible and comprehensive view of the data. Sources\nIn the\nSources\nsection of the Infoboard, the system displays the various Datasources linked to each Infoboard. When you select a Datasource, the system shows detailed information about that source. This includes the following.\nDescription\nA brief overview or additional context regarding the Datasource.\nTable Information\nDetailed metadata for the Datasource, including the column names and their respective types.\nLinked Widgets Information about how many widgets are linked to the Datasource. This indicates how the data is being used within the Infoboard for reporting or visualization purposes.'), 0.09090909)]
[ 2025-08-10 11:01:27,799 ] test_main.py:96 root - INFO - (Document(metadata={'_id': '6a190f63-59d4-4bd7-a1e6-aadcc4163312', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='. With a Datasource, you efficiently import, manage and manipulate data. This sets the stage for effective data analysis, visualization and reporting. Edit the Datasource status\nClick the pencil icon\nnext to a Datasource name to select whether the Datasource is\nverified\nor\nnot verified\n.\nCategorize the Datasources\nAssign specific\ndomains ,\ntiers\n,\ntags\n, and\nglossary\nterms to organize and classify the Datasources effectively.\nManage the sharing status\nView whether a Datasource is\nshared\nor\nnot shared to manage access permissions.\nTrack the Datasource updates\nView information such as\ncreated by\nand\nupdated by\n, along with the respective dates. This ensures transparency and supports version tracking.\nEdit the Description You can either manually\nedit\nthe description of a Datasource or generate it automatically using\nAI\nfor streamlined content creation.\nDocumentation Documentation provides comprehensive information about an asset. It enables you to understand its purpose, structure, and functionality. It serves as a reference to ensure clarity and effective utilization of the asset.\nAfter you click the\nNew documentation button, you can compose your documentation in the provided editor. Once completed, click the\nSave\nicon to store the documentation.\nMeasures and Dimensions\nThis section outlines the\nmeasures\n(metrics or facts) and\ndimensions (descriptive attributes) of the data. It allows you to understand how the data is categorized and measured within the Datasource. You can refer to this section to gain clarity on the underlying structure of the data.\nColumns This section lists the individual\ncolumns of the Datasource. It details their names, types, and additional information. You can edit the columns as required. Editing allows you to modify column definitions, types, and any metadata associated with them. This enables better data organization and understanding'), 0.5)
[ 2025-08-10 11:01:27,859 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-10 11:01:27,859 ] test_main.py:105 root - INFO - Retrieved result for point ID: 6a190f63-59d4-4bd7-a1e6-aadcc4163312
[ 2025-08-10 11:01:27,859 ] test_main.py:96 root - INFO - (Document(metadata={'_id': 'bef85231-c8db-41e1-a38d-a20d4fcd59d3', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='Datasources in Infoveave serve as the foundation for data connectivity and integration. They enable you to establish a link to various external Datasources such as databases, cloud services and APIs . With a Datasource, you efficiently import, manage and manipulate data. This sets the stage for effective data analysis, visualization and reporting. Infoveave Datasource Classification\nFiles\nFile-based Datasources in Infoveave offer a flexible way to connect with and manage various file formats. You can choose from multiple file types and structures that best suit your data needs. Delimited\nSuitable for CSV, TSV, PSV, and custom delimited files.\nExcel\nSupports both XLS and XLSX formats, allowing direct interaction with Microsoft Excel files.\nFixed length Separates data into columns using positional information. Ideal for working with structured datasets.\nJSON\nConnects to JSON-based APIs and automations, ensuring seamless integration with JSON Datasources.\nMulti file Lets you combine multiple file types within a single Datasource to simplify complex data configurations.\nPlugin Parser\nEnables the upload of custom C# plugins to parse specific file formats and enhance data interpretation.\nDatabases'), 0.33333334)
[ 2025-08-10 11:01:27,917 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-10 11:01:27,917 ] test_main.py:105 root - INFO - Retrieved result for point ID: bef85231-c8db-41e1-a38d-a20d4fcd59d3
[ 2025-08-10 11:01:27,917 ] test_main.py:96 root - INFO - (Document(metadata={'_id': '9824e5d3-3001-4af8-808a-03a515109879', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='button. When you click the button, you are directed to a visual walkthrough on how to create a Datasource.\nSelect Datasource type Start by choosing the right type of Datasource. It helps tailor the platform to handle specific data characteristics. This ensures efficient processing and analysis based on the nature of your data.\nImport data Connect to the necessary databases or cloud services for a smooth data import into Infoveave. Alternatively, configure the data table for file types. This creates an organized and structured setup for effective data analysis and accurate insights.\nConfigure measures and dimensions Set up essential measures and dimensions to introduce flexibility in analysis. This supports charts and widgets, helping you make informed decisions by tailoring insights to your specific goals.\nSave Datasource Save your Datasource to perform various types of analysis. These include business analysis, statistical analysis, query execution, Infoboard creation, machine learning modelling, and workflow automation setup.\nUsing the Search Bar The Search Bar at the top right of the screen allows you to quickly find any Datasource within the platform. Simply enter keywords related to the name of the Datasource or any part of the content you are searching for.'), 0.25)
[ 2025-08-10 11:01:27,977 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-10 11:01:27,978 ] test_main.py:105 root - INFO - Retrieved result for point ID: 9824e5d3-3001-4af8-808a-03a515109879
[ 2025-08-10 11:01:27,978 ] test_main.py:96 root - INFO - (Document(metadata={'_id': '23359f88-7cc9-4172-b9f3-54dc8360f87b', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='This feature shows the origin of the data. It illustrates where the data is coming from and its transformation journey. This allows you to trace the flow of the data from its original source to its final destination. It ensures transparency and facilitates troubleshooting.'), 0.2)
[ 2025-08-10 11:01:28,043 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-10 11:01:28,044 ] test_main.py:105 root - INFO - Retrieved result for point ID: 23359f88-7cc9-4172-b9f3-54dc8360f87b
[ 2025-08-10 11:01:28,044 ] test_main.py:96 root - INFO - (Document(metadata={'_id': '66941e31-9743-4c0c-b2f0-dee04dc689f5', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='Introducing Insights\nIntroducing Insights\nCatalogues\nCatalogues\nCreating A Datasource Using Delimited File\nCreate A Datasource Using Delimited File\nCreating A Datasource Using IOT Create A Datasource Using IOT\nCreating Excel type Datasource in Infoveave\nCreate Datasource Using Microsoft Excel\nCreating Datasource Using Microsoft SQL in Infoveave\nCreate Datasource Using Microsoft SQL'), 0.16666667)
[ 2025-08-10 11:01:28,100 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-10 11:01:28,101 ] test_main.py:105 root - INFO - Retrieved result for point ID: 66941e31-9743-4c0c-b2f0-dee04dc689f5
[ 2025-08-10 11:01:28,102 ] test_main.py:96 root - INFO - (Document(metadata={'_id': '00a31ee9-40e5-4934-9094-4724963121bc', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='Introducing Datasources | Infoveave Help\nSkip to content\nIntroducing Datasources'), 0.14285715)
[ 2025-08-10 11:01:28,157 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-10 11:01:28,158 ] test_main.py:105 root - INFO - Retrieved result for point ID: 00a31ee9-40e5-4934-9094-4724963121bc
[ 2025-08-10 11:01:28,158 ] test_main.py:96 root - INFO - (Document(metadata={'_id': '681ecb7f-2282-438c-8098-86fc08e3a69e', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='To create a new Datasource, click on\nNew Datasource\n.\nChoose\nFixed length\nunder Files as the Datasource type.\nUpload the fixed length file from your local storage. Supported file formats include\n.csv and\n.txt\n.\nChoose the connection type for your Datasource. In this case, the connection type is set to default.\nAfter providing the necessary details, click on\nNext\nto configure the data content. Define the skip begin and skip end lines for the file as required.\nIf your data table has a title column, select the\nFirst line is header\ncheckbox to set the first line as the header. Define each column length in the fixed length file.\nRename the column title as required.\nYou can also manually set the start and end index for the column length.\nClick on the\nPreview\nbutton to preview the configured data table. Click on\nNext\nto configure the data table.\nProvide a name for your Datasource.\nTo add additional files to supplement your Datasource, click on the\nAdd files\noption.\nTo customize the\nTable name and choose the\nIngestion type\n, click on the\nEdit\nicon\nnext to the table name. Configure the following fields within this section.\nTable name\nSpecify the desired table name.\nIngestion type Choose from options such as\nIncremental\n,\nTruncate and Reload\n, or\nUpdate\nto define how new data is integrated into the existing dataset.\nDate column exists This checkbox identifies the date column in your dataset by default.\nAdd upload date\nIf you wish to include an upload date column, select this checkbox. It can be helpful for tracking when new data is added to the dataset.\nIncremental'), 0.125)
[ 2025-08-10 11:01:28,208 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-10 11:01:28,213 ] test_main.py:105 root - INFO - Retrieved result for point ID: 681ecb7f-2282-438c-8098-86fc08e3a69e
[ 2025-08-10 11:01:28,213 ] test_main.py:96 root - INFO - (Document(metadata={'_id': '7eddf70b-6438-4112-81cc-9db6776e3f3d', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='Quality\nThe\nQuality\ntab displays the results of the most recent\nData Quality\nchecks run for the Datasource. This ensures the integrity and consistency of the data. It provides assurance that the data is accurate and ready for use.'), 0.11111111)
[ 2025-08-10 11:01:28,271 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-10 11:01:28,272 ] test_main.py:105 root - INFO - Retrieved result for point ID: 7eddf70b-6438-4112-81cc-9db6776e3f3d
[ 2025-08-10 11:01:28,273 ] test_main.py:96 root - INFO - (Document(metadata={'_id': '0e7c4a4e-6c35-46ad-9697-4ea4a4d9b128', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='.\nTo create a new Datasource, click on\nNew Datasource\n.\nChoose\nCustom file parser\nas the Datasource type.\nA new window opens for the Datasource creation process. Click on the option to select the file under\nCreate Datasource using file\nto upload the file.\nYou can select a file from your local storage. Supported file extensions are .txt, .prn, .dat, .dtf, .xlsx, .csv, .xls, .xlsm.\nAfter providing the necessary details, proceed to\nNext in the Datasource configuration.\nOnce the file upload is complete, a preview of the unstructured data becomes available.\nYou must create a custom\nparse code\nin either\n.txt or .json\nformat for an unstructured file\n.\nYou can click on\nImport template\nto import the formatting template from your storage location and convert the Datasource to a structured format.\nClick on\nPreview to see the conversion of the Datasource from an unstructured format to a structured format.\nClick on\nNext\nto configure the measures and dimensions in the Datasource. Once the file processing is complete, a tabular preview of the data becomes available.\nProvide a name for your Datasource.\nTo add additional files to supplement your Datasource, click on the\nAdd files\noption. To customize the\nTable name\nand choose the\nIngestion type\n, click on the\nEdit\nicon\nclose to the table name. Configure the following fields within this section.\nTable name\nSpecify the desired table name.'), 0.1)
[ 2025-08-10 11:01:28,330 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-10 11:01:28,331 ] test_main.py:105 root - INFO - Retrieved result for point ID: 0e7c4a4e-6c35-46ad-9697-4ea4a4d9b128
[ 2025-08-10 11:01:28,331 ] test_main.py:96 root - INFO - (Document(metadata={'_id': '2ff9c5be-9b56-4400-96cb-bb7da0dccec6', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='button, you can compose your documentation in the provided editor. Once completed, click the\nSave\nicon to store the documentation.\nWidgets In the Infoboards section, widgets serve as essential visual elements that help present and organize data in a structured way. Each widget is associated with a specific Datasource and can be customized to display various types of data in different formats. Here is a breakdown of the key aspects of widgets.\nWidget name\nIdentifies the specific widget being used.\nWidget type\nSpecifies the format or design of the widget (for example, Image, Bar, TreeMap, or Shape). Source\nLinks the widget to its Datasource, such as Loan Data or other relevant datasets.\nMeasures\nDescribes the quantitative data being displayed, like Number of Loans or Loan Amount.\nDimensions Lists the key dimensions or categories by which the data is segmented, such as Branch, Product, Loan Status, and State. Each widget in the Infoboard is tailored to provide insights based on its respective data. It helps you visualize key metrics and KPIs in a meaningful way . The configuration of each widget can include elements like charts, maps, and filters, ensuring you have a flexible and comprehensive view of the data. Sources\nIn the\nSources\nsection of the Infoboard, the system displays the various Datasources linked to each Infoboard. When you select a Datasource, the system shows detailed information about that source. This includes the following.\nDescription\nA brief overview or additional context regarding the Datasource.\nTable Information\nDetailed metadata for the Datasource, including the column names and their respective types.\nLinked Widgets Information about how many widgets are linked to the Datasource. This indicates how the data is being used within the Infoboard for reporting or visualization purposes.'), 0.09090909)
[ 2025-08-10 11:01:28,391 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-10 11:01:28,392 ] test_main.py:105 root - INFO - Retrieved result for point ID: 2ff9c5be-9b56-4400-96cb-bb7da0dccec6
[ 2025-08-10 11:01:28,392 ] test_main.py:322 root - INFO - Found 161 final documents.
[ 2025-08-10 11:01:28,392 ] test_main.py:369 root - INFO - Context prepared for LLM response.
[ 2025-08-10 11:01:28,393 ] test_main.py:415 root - INFO - Single query part response:

[ 2025-08-10 11:01:28,394 ] test_main.py:416 root - INFO - A data source is the origin of the data that Infoveave analyzes.  Think of it like a wellspring of information. 

It could be:

* **A file:**  Like a CSV, Excel spreadsheet, or text file.
* **A database:**  A structured collection of information, such as MySQL or PostgreSQL.
* **An API:**  A way to access data from another application or service, like Twitter or Google Analytics.
* **And more!**  Infoveave can connect to a wide variety of data sources. 


Let me know if you'd like to explore specific types of data sources or how to connect Infoveave to them!
[ 2025-08-10 11:03:44,743 ] test_main.py:146 root - INFO - .........................Starting Infoverve Helper Application.........................
[ 2025-08-10 11:03:44,744 ] test_main.py:162 root - INFO - GROQ_API_KEY loaded.
[ 2025-08-10 11:03:44,756 ] test_main.py:186 root - INFO - Embedding model initialized.
[ 2025-08-10 11:03:45,911 ] _client.py:1025 httpx - INFO - HTTP Request: GET http://ai.infoveave.cloud:6333 "HTTP/1.1 200 OK"
[ 2025-08-10 11:03:45,913 ] test_main.py:190 root - INFO - Connected to Qdrant.
[ 2025-08-10 11:03:46,033 ] _client.py:1025 httpx - INFO - HTTP Request: GET http://ai.infoveave.cloud:6333/collections "HTTP/1.1 200 OK"
[ 2025-08-10 11:03:46,034 ] test_main.py:194 root - INFO - Qdrant collections retrieved.
[ 2025-08-10 11:03:46,034 ] test_main.py:201 root - INFO - Using collection: infoverve_helper_docs_hybrid
[ 2025-08-10 11:03:48,068 ] test_main.py:204 root - INFO - Sparse embeddings initialized.
[ 2025-08-10 11:03:48,141 ] _client.py:1025 httpx - INFO - HTTP Request: GET http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid "HTTP/1.1 200 OK"
[ 2025-08-10 11:03:50,432 ] _client.py:1025 httpx - INFO - HTTP Request: GET http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid "HTTP/1.1 200 OK"
[ 2025-08-10 11:03:50,434 ] test_main.py:216 root - INFO - QdrantVectorStore initialized.
[ 2025-08-10 11:03:50,467 ] test_main.py:222 root - INFO - LLM initialized.
[ 2025-08-10 11:03:51,462 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points/query "HTTP/1.1 200 OK"
[ 2025-08-10 11:03:52,199 ] test_main.py:244 root - INFO - Original query embedding generated.
[ 2025-08-10 11:03:52,221 ] test_main.py:96 root - INFO - (Document(metadata={'_id': '2a6c9297-ff5a-4139-bb0d-e87f53ace134', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content="Upload transformed file to destination database\nSetup the 'Oracle' connection, specify tables, and map columns\nSetup automated workflow summary notification\nEnable 'Send Workflow Summary' for email notifications on automated workflow execution\nSchedule and monitor  workflows Schedule or setup 'Webhooks' and 'Emails' to trigger workflows\nDone"), 0.5)
[ 2025-08-10 11:03:52,294 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-10 11:03:52,295 ] test_main.py:105 root - INFO - Retrieved result for point ID: 2a6c9297-ff5a-4139-bb0d-e87f53ace134
[ 2025-08-10 11:03:52,296 ] test_main.py:90 root - ERROR - Error during query rewriting: name 'context' is not defined
[ 2025-08-10 11:03:52,296 ] test_main.py:249 root - INFO - Rewritten query: Need to create a workflow, to run a query from oracle DB and send the query response as a report through Email
[ 2025-08-10 11:03:52,296 ] test_main.py:256 root - INFO - Rewritten query parts: ['Need to create a workflow, to run a query from oracle DB and send the query response as a report through Email']
[ 2025-08-10 11:03:52,296 ] test_main.py:265 root - INFO - Rewritten Query 1: Need to create a workflow, to run a query from oracle DB and send the query response as a report through Email
[ 2025-08-10 11:03:53,103 ] test_main.py:268 root - INFO - Embedding generated for query 1.
[ 2025-08-10 11:03:54,138 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points/query "HTTP/1.1 200 OK"
[ 2025-08-10 11:03:54,182 ] test_main.py:280 root - INFO - Processing query part 1: Need to create a workflow, to run a query from oracle DB and send the query response as a report through Email
[ 2025-08-10 11:03:54,203 ] test_main.py:96 root - INFO - (Document(metadata={'_id': '2a6c9297-ff5a-4139-bb0d-e87f53ace134', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content="Upload transformed file to destination database\nSetup the 'Oracle' connection, specify tables, and map columns\nSetup automated workflow summary notification\nEnable 'Send Workflow Summary' for email notifications on automated workflow execution\nSchedule and monitor  workflows Schedule or setup 'Webhooks' and 'Emails' to trigger workflows\nDone"), 0.5)
[ 2025-08-10 11:03:54,262 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-10 11:03:54,263 ] test_main.py:105 root - INFO - Retrieved result for point ID: 2a6c9297-ff5a-4139-bb0d-e87f53ace134
[ 2025-08-10 11:03:54,263 ] test_main.py:96 root - INFO - (Document(metadata={'_id': 'df9d15c4-2094-450f-95e6-162e03d5828a', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='Creating Infoboard Using A Query\nCreate Infoboard Using A Query\nCreating Infoboard Using API\nCreate Infoboard Using API\nCreating Workflow in Infoveave\nCreating Workflows\nWorkflow Execution Status\nWorkflow Execution Status'), 0.33333334)
[ 2025-08-10 11:03:54,348 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-10 11:03:54,350 ] test_main.py:105 root - INFO - Retrieved result for point ID: df9d15c4-2094-450f-95e6-162e03d5828a
[ 2025-08-10 11:03:54,350 ] test_main.py:96 root - INFO - (Document(metadata={'_id': '323c1ea3-b288-44b0-8825-475a23907e9f', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='Workflow Designer\ncanvas.\nTo add alerts that send email notifications during the workflow, go to the\nAlerts\ntab in the\nWorkflow Setup panel\n.\nToggle\nEnable\nto turn the alert on or off. Select recipient email addresses from the user list. You can choose multiple recipients.\nWrite a custom alert message that is sent when the condition is met.\nWhen setting an execution time alert, toggle\nUse Absolute Time'), 0.25)
[ 2025-08-10 11:03:54,404 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-10 11:03:54,404 ] test_main.py:105 root - INFO - Retrieved result for point ID: 323c1ea3-b288-44b0-8825-475a23907e9f
[ 2025-08-10 11:03:54,404 ] test_main.py:96 root - INFO - (Document(metadata={'_id': '65e3aa33-13d7-4688-98fd-7b6a24cbf91e', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='Workflow Designer\ncanvas.\nTo add alerts that send email notifications during the workflow, go to the\nAlerts\ntab in the\nWorkflow Setup panel\n.\nToggle\nEnable\nto turn the alert on or off. Select recipient email addresses from the user list. You can choose multiple recipients.\nWrite a custom alert message that is sent when the condition is met.\nWhen setting an execution time alert, toggle\nUse Absolute Time'), 0.2)
[ 2025-08-10 11:03:54,459 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-10 11:03:54,460 ] test_main.py:105 root - INFO - Retrieved result for point ID: 65e3aa33-13d7-4688-98fd-7b6a24cbf91e
[ 2025-08-10 11:03:54,460 ] test_main.py:96 root - INFO - (Document(metadata={'_id': '2027003d-7c4e-4b6d-acd3-b391a775ae9a', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='Workflow Alerts | Infoveave Help\nSkip to content\nWorkflow Alerts'), 0.16666667)
[ 2025-08-10 11:03:54,536 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-10 11:03:54,537 ] test_main.py:105 root - INFO - Retrieved result for point ID: 2027003d-7c4e-4b6d-acd3-b391a775ae9a
[ 2025-08-10 11:03:54,537 ] test_main.py:96 root - INFO - (Document(metadata={'_id': '81a7ef81-eb12-4bcd-ad2e-403f547e7e50', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='Choose the days on which you want to execute the Workflow. By default, Infoveave sets it to every day. You can select specific days of the week, days of the month, or months.\nClick on the\nAdd'), 0.14285715)
[ 2025-08-10 11:03:54,601 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-10 11:03:54,602 ] test_main.py:105 root - INFO - Retrieved result for point ID: 81a7ef81-eb12-4bcd-ad2e-403f547e7e50
[ 2025-08-10 11:03:54,602 ] test_main.py:96 root - INFO - (Document(metadata={'_id': '3989b1ef-a79d-4b1d-bce6-79cb5969aa26', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='Choose the days on which you want to execute the Workflow. By default, Infoveave sets it to every day. You can select specific days of the week, days of the month, or months.\nClick on the\nAdd'), 0.125)
[ 2025-08-10 11:03:54,666 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-10 11:03:54,667 ] test_main.py:105 root - INFO - Retrieved result for point ID: 3989b1ef-a79d-4b1d-bce6-79cb5969aa26
[ 2025-08-10 11:03:54,667 ] test_main.py:96 root - INFO - (Document(metadata={'_id': '3fd7ab5c-2d29-41ea-9ed7-0684f87b08e1', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='Add FTP Download Activity\n0:21\nConfigure FTP Download Activity\n0:31\nAdd Read Excel Files Activity\n0:35\nAdd Transform Activity using Javascript\n0:40\nAdd Round Numbers Activity\n0:46 Add Remove Duplicate Rows Activity\n0:52\nAdd Drop Columns Activity\n0:56\nAdd Rename Columns Activity\n1:01\nAdd Upload to Datasource Activity\n1:08\nExecute the Workflow and View Instance History'), 0.11111111)
[ 2025-08-10 11:03:54,731 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-10 11:03:54,732 ] test_main.py:105 root - INFO - Retrieved result for point ID: 3fd7ab5c-2d29-41ea-9ed7-0684f87b08e1
[ 2025-08-10 11:03:54,732 ] test_main.py:96 root - INFO - (Document(metadata={'_id': '2adcd9bd-c3f6-41e9-8c27-26f07adfbe4c', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='Add FTP Download Activity\n0:21\nConfigure FTP Download Activity\n0:31\nAdd Read Excel Files Activity\n0:35\nAdd Transform Activity using Javascript\n0:40\nAdd Round Numbers Activity\n0:46 Add Remove Duplicate Rows Activity\n0:52\nAdd Drop Columns Activity\n0:56\nAdd Rename Columns Activity\n1:01\nAdd Upload to Datasource Activity\n1:08\nExecute the Workflow and View Instance History'), 0.1)
[ 2025-08-10 11:03:54,803 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-10 11:03:54,804 ] test_main.py:105 root - INFO - Retrieved result for point ID: 2adcd9bd-c3f6-41e9-8c27-26f07adfbe4c
[ 2025-08-10 11:03:54,804 ] test_main.py:96 root - INFO - (Document(metadata={'_id': 'bfe3c285-ffc2-4551-a19c-a5900bdd0aa3', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='E\nEmailhook trigger The Emailhook trigger initiates a Workflow based on incoming emails. You can set up specific email addresses that serve as Emailhooks. This allows for  automated processing of email-based activities or notifications . This trigger is useful for Workflows that involve email notifications or processing of data received via email.'), 0.09090909)
[ 2025-08-10 11:03:54,866 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-10 11:03:54,916 ] test_main.py:105 root - INFO - Retrieved result for point ID: bfe3c285-ffc2-4551-a19c-a5900bdd0aa3
[ 2025-08-10 11:03:54,916 ] test_main.py:135 root - INFO - Loaded rewritten query user prompt.
[ 2025-08-10 11:03:56,437 ] _client.py:1025 httpx - INFO - HTTP Request: POST https://api.groq.com/openai/v1/chat/completions "HTTP/1.1 200 OK"
[ 2025-08-10 11:03:56,444 ] test_main.py:283 root - INFO - Response for query part 1: Let's craft a workflow to fetch data from your Oracle database and deliver it as an email report. 

Here's a breakdown of the steps involved:

1. **Execute Query:** You'll need to use the "Execute Query" activity to connect to your Oracle database and run your desired SQL query.  Make sure to configure the activity with your database connection details (host, port, username, password, and database name).

2. **Format the Results:**  The "Execute Query" activity will return the query results as data. You might want to format this data for better readability in your email report. You can use activities like "Pivot columns", "Select columns", "Rename columns", or "Transform using javascript" to structure the data as needed.

3. **Generate Report:**  Now that your data is formatted, you can generate the report itself.  You have several options:

    * **Static Report:** Use the "Write to file" activity to save the formatted data to a file (e.g., CSV, Excel, or PDF). Then, use the "Send Email" activity to attach this file to your email report.

    * **Dynamic Report:**  If you need a more interactive report, consider using a templating engine like Jinja2 or Handlebars.  You can use the "Transform using javascript" activity to dynamically generate HTML or Markdown content based on your query results.  Then, send this dynamic content as the body of your email report.

4. **Send Email:** Finally, use the "Send Email" activity to send your report. Configure the recipient email addresses, subject line, and body content (either the attached file or the dynamic HTML/Markdown).

**Remember:**

*  You'll need to have the necessary permissions to access your Oracle database and send emails.
*  Ensure that your email server is properly configured to receive outgoing emails from Infoveave.



Let me know if you have any more questions or need help with specific steps in the workflow!
[ 2025-08-10 11:03:56,444 ] test_main.py:286 root - INFO - [(Document(metadata={'_id': '2a6c9297-ff5a-4139-bb0d-e87f53ace134', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content="Upload transformed file to destination database\nSetup the 'Oracle' connection, specify tables, and map columns\nSetup automated workflow summary notification\nEnable 'Send Workflow Summary' for email notifications on automated workflow execution\nSchedule and monitor  workflows Schedule or setup 'Webhooks' and 'Emails' to trigger workflows\nDone"), 0.5), (Document(metadata={'_id': 'df9d15c4-2094-450f-95e6-162e03d5828a', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='Creating Infoboard Using A Query\nCreate Infoboard Using A Query\nCreating Infoboard Using API\nCreate Infoboard Using API\nCreating Workflow in Infoveave\nCreating Workflows\nWorkflow Execution Status\nWorkflow Execution Status'), 0.33333334), (Document(metadata={'_id': '323c1ea3-b288-44b0-8825-475a23907e9f', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='Workflow Designer\ncanvas.\nTo add alerts that send email notifications during the workflow, go to the\nAlerts\ntab in the\nWorkflow Setup panel\n.\nToggle\nEnable\nto turn the alert on or off. Select recipient email addresses from the user list. You can choose multiple recipients.\nWrite a custom alert message that is sent when the condition is met.\nWhen setting an execution time alert, toggle\nUse Absolute Time'), 0.25), (Document(metadata={'_id': '65e3aa33-13d7-4688-98fd-7b6a24cbf91e', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='Workflow Designer\ncanvas.\nTo add alerts that send email notifications during the workflow, go to the\nAlerts\ntab in the\nWorkflow Setup panel\n.\nToggle\nEnable\nto turn the alert on or off. Select recipient email addresses from the user list. You can choose multiple recipients.\nWrite a custom alert message that is sent when the condition is met.\nWhen setting an execution time alert, toggle\nUse Absolute Time'), 0.2), (Document(metadata={'_id': '2027003d-7c4e-4b6d-acd3-b391a775ae9a', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='Workflow Alerts | Infoveave Help\nSkip to content\nWorkflow Alerts'), 0.16666667), (Document(metadata={'_id': '81a7ef81-eb12-4bcd-ad2e-403f547e7e50', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='Choose the days on which you want to execute the Workflow. By default, Infoveave sets it to every day. You can select specific days of the week, days of the month, or months.\nClick on the\nAdd'), 0.14285715), (Document(metadata={'_id': '3989b1ef-a79d-4b1d-bce6-79cb5969aa26', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='Choose the days on which you want to execute the Workflow. By default, Infoveave sets it to every day. You can select specific days of the week, days of the month, or months.\nClick on the\nAdd'), 0.125), (Document(metadata={'_id': '3fd7ab5c-2d29-41ea-9ed7-0684f87b08e1', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='Add FTP Download Activity\n0:21\nConfigure FTP Download Activity\n0:31\nAdd Read Excel Files Activity\n0:35\nAdd Transform Activity using Javascript\n0:40\nAdd Round Numbers Activity\n0:46 Add Remove Duplicate Rows Activity\n0:52\nAdd Drop Columns Activity\n0:56\nAdd Rename Columns Activity\n1:01\nAdd Upload to Datasource Activity\n1:08\nExecute the Workflow and View Instance History'), 0.11111111), (Document(metadata={'_id': '2adcd9bd-c3f6-41e9-8c27-26f07adfbe4c', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='Add FTP Download Activity\n0:21\nConfigure FTP Download Activity\n0:31\nAdd Read Excel Files Activity\n0:35\nAdd Transform Activity using Javascript\n0:40\nAdd Round Numbers Activity\n0:46 Add Remove Duplicate Rows Activity\n0:52\nAdd Drop Columns Activity\n0:56\nAdd Rename Columns Activity\n1:01\nAdd Upload to Datasource Activity\n1:08\nExecute the Workflow and View Instance History'), 0.1), (Document(metadata={'_id': 'bfe3c285-ffc2-4551-a19c-a5900bdd0aa3', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='E\nEmailhook trigger The Emailhook trigger initiates a Workflow based on incoming emails. You can set up specific email addresses that serve as Emailhooks. This allows for  automated processing of email-based activities or notifications . This trigger is useful for Workflows that involve email notifications or processing of data received via email.'), 0.09090909)]
[ 2025-08-10 11:03:56,468 ] test_main.py:96 root - INFO - (Document(metadata={'_id': '2a6c9297-ff5a-4139-bb0d-e87f53ace134', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content="Upload transformed file to destination database\nSetup the 'Oracle' connection, specify tables, and map columns\nSetup automated workflow summary notification\nEnable 'Send Workflow Summary' for email notifications on automated workflow execution\nSchedule and monitor  workflows Schedule or setup 'Webhooks' and 'Emails' to trigger workflows\nDone"), 0.5)
[ 2025-08-10 11:03:56,530 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-10 11:03:56,531 ] test_main.py:105 root - INFO - Retrieved result for point ID: 2a6c9297-ff5a-4139-bb0d-e87f53ace134
[ 2025-08-10 11:03:56,531 ] test_main.py:96 root - INFO - (Document(metadata={'_id': 'df9d15c4-2094-450f-95e6-162e03d5828a', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='Creating Infoboard Using A Query\nCreate Infoboard Using A Query\nCreating Infoboard Using API\nCreate Infoboard Using API\nCreating Workflow in Infoveave\nCreating Workflows\nWorkflow Execution Status\nWorkflow Execution Status'), 0.33333334)
[ 2025-08-10 11:03:56,596 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-10 11:03:56,596 ] test_main.py:105 root - INFO - Retrieved result for point ID: df9d15c4-2094-450f-95e6-162e03d5828a
[ 2025-08-10 11:03:56,596 ] test_main.py:96 root - INFO - (Document(metadata={'_id': '323c1ea3-b288-44b0-8825-475a23907e9f', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='Workflow Designer\ncanvas.\nTo add alerts that send email notifications during the workflow, go to the\nAlerts\ntab in the\nWorkflow Setup panel\n.\nToggle\nEnable\nto turn the alert on or off. Select recipient email addresses from the user list. You can choose multiple recipients.\nWrite a custom alert message that is sent when the condition is met.\nWhen setting an execution time alert, toggle\nUse Absolute Time'), 0.25)
[ 2025-08-10 11:03:56,660 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-10 11:03:56,661 ] test_main.py:105 root - INFO - Retrieved result for point ID: 323c1ea3-b288-44b0-8825-475a23907e9f
[ 2025-08-10 11:03:56,661 ] test_main.py:96 root - INFO - (Document(metadata={'_id': '65e3aa33-13d7-4688-98fd-7b6a24cbf91e', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='Workflow Designer\ncanvas.\nTo add alerts that send email notifications during the workflow, go to the\nAlerts\ntab in the\nWorkflow Setup panel\n.\nToggle\nEnable\nto turn the alert on or off. Select recipient email addresses from the user list. You can choose multiple recipients.\nWrite a custom alert message that is sent when the condition is met.\nWhen setting an execution time alert, toggle\nUse Absolute Time'), 0.2)
[ 2025-08-10 11:03:56,732 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-10 11:03:56,733 ] test_main.py:105 root - INFO - Retrieved result for point ID: 65e3aa33-13d7-4688-98fd-7b6a24cbf91e
[ 2025-08-10 11:03:56,733 ] test_main.py:96 root - INFO - (Document(metadata={'_id': '2027003d-7c4e-4b6d-acd3-b391a775ae9a', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='Workflow Alerts | Infoveave Help\nSkip to content\nWorkflow Alerts'), 0.16666667)
[ 2025-08-10 11:03:56,794 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-10 11:03:56,795 ] test_main.py:105 root - INFO - Retrieved result for point ID: 2027003d-7c4e-4b6d-acd3-b391a775ae9a
[ 2025-08-10 11:03:56,795 ] test_main.py:96 root - INFO - (Document(metadata={'_id': '81a7ef81-eb12-4bcd-ad2e-403f547e7e50', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='Choose the days on which you want to execute the Workflow. By default, Infoveave sets it to every day. You can select specific days of the week, days of the month, or months.\nClick on the\nAdd'), 0.14285715)
[ 2025-08-10 11:03:56,851 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-10 11:03:56,852 ] test_main.py:105 root - INFO - Retrieved result for point ID: 81a7ef81-eb12-4bcd-ad2e-403f547e7e50
[ 2025-08-10 11:03:56,852 ] test_main.py:96 root - INFO - (Document(metadata={'_id': '3989b1ef-a79d-4b1d-bce6-79cb5969aa26', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='Choose the days on which you want to execute the Workflow. By default, Infoveave sets it to every day. You can select specific days of the week, days of the month, or months.\nClick on the\nAdd'), 0.125)
[ 2025-08-10 11:03:56,911 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-10 11:03:56,913 ] test_main.py:105 root - INFO - Retrieved result for point ID: 3989b1ef-a79d-4b1d-bce6-79cb5969aa26
[ 2025-08-10 11:03:56,913 ] test_main.py:96 root - INFO - (Document(metadata={'_id': '3fd7ab5c-2d29-41ea-9ed7-0684f87b08e1', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='Add FTP Download Activity\n0:21\nConfigure FTP Download Activity\n0:31\nAdd Read Excel Files Activity\n0:35\nAdd Transform Activity using Javascript\n0:40\nAdd Round Numbers Activity\n0:46 Add Remove Duplicate Rows Activity\n0:52\nAdd Drop Columns Activity\n0:56\nAdd Rename Columns Activity\n1:01\nAdd Upload to Datasource Activity\n1:08\nExecute the Workflow and View Instance History'), 0.11111111)
[ 2025-08-10 11:03:56,964 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-10 11:03:56,964 ] test_main.py:105 root - INFO - Retrieved result for point ID: 3fd7ab5c-2d29-41ea-9ed7-0684f87b08e1
[ 2025-08-10 11:03:56,964 ] test_main.py:96 root - INFO - (Document(metadata={'_id': '2adcd9bd-c3f6-41e9-8c27-26f07adfbe4c', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='Add FTP Download Activity\n0:21\nConfigure FTP Download Activity\n0:31\nAdd Read Excel Files Activity\n0:35\nAdd Transform Activity using Javascript\n0:40\nAdd Round Numbers Activity\n0:46 Add Remove Duplicate Rows Activity\n0:52\nAdd Drop Columns Activity\n0:56\nAdd Rename Columns Activity\n1:01\nAdd Upload to Datasource Activity\n1:08\nExecute the Workflow and View Instance History'), 0.1)
[ 2025-08-10 11:03:57,031 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-10 11:03:57,032 ] test_main.py:105 root - INFO - Retrieved result for point ID: 2adcd9bd-c3f6-41e9-8c27-26f07adfbe4c
[ 2025-08-10 11:03:57,032 ] test_main.py:96 root - INFO - (Document(metadata={'_id': 'bfe3c285-ffc2-4551-a19c-a5900bdd0aa3', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='E\nEmailhook trigger The Emailhook trigger initiates a Workflow based on incoming emails. You can set up specific email addresses that serve as Emailhooks. This allows for  automated processing of email-based activities or notifications . This trigger is useful for Workflows that involve email notifications or processing of data received via email.'), 0.09090909)
[ 2025-08-10 11:03:57,096 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-10 11:03:57,142 ] test_main.py:105 root - INFO - Retrieved result for point ID: bfe3c285-ffc2-4551-a19c-a5900bdd0aa3
[ 2025-08-10 11:03:57,142 ] test_main.py:322 root - INFO - Found 161 final documents.
[ 2025-08-10 11:03:57,142 ] test_main.py:369 root - INFO - Context prepared for LLM response.
[ 2025-08-10 11:03:57,144 ] test_main.py:415 root - INFO - Single query part response:

[ 2025-08-10 11:03:57,144 ] test_main.py:416 root - INFO - Let's craft a workflow to fetch data from your Oracle database and deliver it as an email report. 

Here's a breakdown of the steps involved:

1. **Execute Query:** You'll need to use the "Execute Query" activity to connect to your Oracle database and run your desired SQL query.  Make sure to configure the activity with your database connection details (host, port, username, password, and database name).

2. **Format the Results:**  The "Execute Query" activity will return the query results as data. You might want to format this data for better readability in your email report. You can use activities like "Pivot columns", "Select columns", "Rename columns", or "Transform using javascript" to structure the data as needed.

3. **Generate Report:**  Now that your data is formatted, you can generate the report itself.  You have several options:

    * **Static Report:** Use the "Write to file" activity to save the formatted data to a file (e.g., CSV, Excel, or PDF). Then, use the "Send Email" activity to attach this file to your email report.

    * **Dynamic Report:**  If you need a more interactive report, consider using a templating engine like Jinja2 or Handlebars.  You can use the "Transform using javascript" activity to dynamically generate HTML or Markdown content based on your query results.  Then, send this dynamic content as the body of your email report.

4. **Send Email:** Finally, use the "Send Email" activity to send your report. Configure the recipient email addresses, subject line, and body content (either the attached file or the dynamic HTML/Markdown).

**Remember:**

*  You'll need to have the necessary permissions to access your Oracle database and send emails.
*  Ensure that your email server is properly configured to receive outgoing emails from Infoveave.



Let me know if you have any more questions or need help with specific steps in the workflow!
[ 2025-08-10 11:12:31,577 ] test_main.py:146 root - INFO - .........................Starting Infoverve Helper Application.........................
[ 2025-08-10 11:12:31,578 ] test_main.py:162 root - INFO - GROQ_API_KEY loaded.
[ 2025-08-10 11:12:31,596 ] test_main.py:186 root - INFO - Embedding model initialized.
[ 2025-08-10 11:12:31,918 ] _client.py:1025 httpx - INFO - HTTP Request: GET http://ai.infoveave.cloud:6333 "HTTP/1.1 200 OK"
[ 2025-08-10 11:12:31,922 ] test_main.py:190 root - INFO - Connected to Qdrant.
[ 2025-08-10 11:12:32,047 ] _client.py:1025 httpx - INFO - HTTP Request: GET http://ai.infoveave.cloud:6333/collections "HTTP/1.1 200 OK"
[ 2025-08-10 11:12:32,051 ] test_main.py:194 root - INFO - Qdrant collections retrieved.
[ 2025-08-10 11:12:32,051 ] test_main.py:201 root - INFO - Using collection: infoverve_helper_docs_hybrid
[ 2025-08-10 11:12:33,666 ] test_main.py:204 root - INFO - Sparse embeddings initialized.
[ 2025-08-10 11:12:33,731 ] _client.py:1025 httpx - INFO - HTTP Request: GET http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid "HTTP/1.1 200 OK"
[ 2025-08-10 11:12:35,746 ] _client.py:1025 httpx - INFO - HTTP Request: GET http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid "HTTP/1.1 200 OK"
[ 2025-08-10 11:12:35,748 ] test_main.py:216 root - INFO - QdrantVectorStore initialized.
[ 2025-08-10 11:12:35,782 ] test_main.py:222 root - INFO - LLM initialized.
[ 2025-08-10 11:12:36,748 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points/query "HTTP/1.1 200 OK"
[ 2025-08-10 11:12:37,511 ] test_main.py:244 root - INFO - Original query embedding generated.
[ 2025-08-10 11:12:37,538 ] test_main.py:96 root - INFO - (Document(metadata={'_id': '2a6c9297-ff5a-4139-bb0d-e87f53ace134', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content="Upload transformed file to destination database\nSetup the 'Oracle' connection, specify tables, and map columns\nSetup automated workflow summary notification\nEnable 'Send Workflow Summary' for email notifications on automated workflow execution\nSchedule and monitor  workflows Schedule or setup 'Webhooks' and 'Emails' to trigger workflows\nDone"), 0.5)
[ 2025-08-10 11:12:37,607 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-10 11:12:37,608 ] test_main.py:104 root - INFO - [Record(id='2a6c9297-ff5a-4139-bb0d-e87f53ace134', payload={'url': 'https://infoveave-help.pages.dev/journey/automate-workflows/', 'title': 'automate-workflows', 'section': 'automation', 'terminologies': ['Connections', 'Data Transformation', 'Infoveave', 'Workflows'], 'char_count': 978, 'word_count': 139, 'page_content': "Upload transformed file to destination database\nSetup the 'Oracle' connection, specify tables, and map columns\nSetup automated workflow summary notification\nEnable 'Send Workflow Summary' for email notifications on automated workflow execution\nSchedule and monitor  workflows Schedule or setup 'Webhooks' and 'Emails' to trigger workflows\nDone", 'chunk_index': 2}, vector=None, shard_key=None, order_value=None)]
[ 2025-08-10 11:12:37,609 ] test_main.py:105 root - INFO - Retrieved result for point ID: 2a6c9297-ff5a-4139-bb0d-e87f53ace134
[ 2025-08-10 11:12:37,609 ] test_main.py:90 root - ERROR - Error during query rewriting: name 'context' is not defined
[ 2025-08-10 11:12:37,609 ] test_main.py:249 root - INFO - Rewritten query: Need to create a workflow, to run a query from oracle DB and send the query response as a report through Email
[ 2025-08-10 11:12:37,609 ] test_main.py:256 root - INFO - Rewritten query parts: ['Need to create a workflow, to run a query from oracle DB and send the query response as a report through Email']
[ 2025-08-10 11:12:37,609 ] test_main.py:265 root - INFO - Rewritten Query 1: Need to create a workflow, to run a query from oracle DB and send the query response as a report through Email
[ 2025-08-10 11:12:38,479 ] test_main.py:268 root - INFO - Embedding generated for query 1.
[ 2025-08-10 11:12:39,291 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points/query "HTTP/1.1 200 OK"
[ 2025-08-10 11:12:39,295 ] test_main.py:280 root - INFO - Processing query part 1: Need to create a workflow, to run a query from oracle DB and send the query response as a report through Email
[ 2025-08-10 11:12:39,316 ] test_main.py:96 root - INFO - (Document(metadata={'_id': '2a6c9297-ff5a-4139-bb0d-e87f53ace134', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content="Upload transformed file to destination database\nSetup the 'Oracle' connection, specify tables, and map columns\nSetup automated workflow summary notification\nEnable 'Send Workflow Summary' for email notifications on automated workflow execution\nSchedule and monitor  workflows Schedule or setup 'Webhooks' and 'Emails' to trigger workflows\nDone"), 0.5)
[ 2025-08-10 11:12:39,392 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-10 11:12:39,393 ] test_main.py:104 root - INFO - [Record(id='2a6c9297-ff5a-4139-bb0d-e87f53ace134', payload={'url': 'https://infoveave-help.pages.dev/journey/automate-workflows/', 'title': 'automate-workflows', 'section': 'automation', 'terminologies': ['Connections', 'Data Transformation', 'Infoveave', 'Workflows'], 'char_count': 978, 'word_count': 139, 'page_content': "Upload transformed file to destination database\nSetup the 'Oracle' connection, specify tables, and map columns\nSetup automated workflow summary notification\nEnable 'Send Workflow Summary' for email notifications on automated workflow execution\nSchedule and monitor  workflows Schedule or setup 'Webhooks' and 'Emails' to trigger workflows\nDone", 'chunk_index': 2}, vector=None, shard_key=None, order_value=None)]
[ 2025-08-10 11:12:39,394 ] test_main.py:105 root - INFO - Retrieved result for point ID: 2a6c9297-ff5a-4139-bb0d-e87f53ace134
[ 2025-08-10 11:12:39,394 ] test_main.py:96 root - INFO - (Document(metadata={'_id': 'df9d15c4-2094-450f-95e6-162e03d5828a', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='Creating Infoboard Using A Query\nCreate Infoboard Using A Query\nCreating Infoboard Using API\nCreate Infoboard Using API\nCreating Workflow in Infoveave\nCreating Workflows\nWorkflow Execution Status\nWorkflow Execution Status'), 0.33333334)
[ 2025-08-10 11:12:39,442 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-10 11:12:39,444 ] test_main.py:104 root - INFO - [Record(id='df9d15c4-2094-450f-95e6-162e03d5828a', payload={'url': 'https://infoveave-help.pages.dev/videos/', 'title': 'videos', 'section': 'videos', 'terminologies': ['Automation', 'Catalogues', 'Conditional Expressions', 'Custom Calendar', 'Datasources', 'Dimensions', 'Infoboards', 'Infoveave', 'Insights', 'Lists', 'Measures', 'My Organization', 'My Workspace', 'Query', 'Reports', 'SciPyR', 'What-If Analysis', 'What-If Formulae', 'Workflows', 'Workflow Execution Status'], 'char_count': 2430, 'word_count': 338, 'page_content': 'Creating Infoboard Using A Query\nCreate Infoboard Using A Query\nCreating Infoboard Using API\nCreate Infoboard Using API\nCreating Workflow in Infoveave\nCreating Workflows\nWorkflow Execution Status\nWorkflow Execution Status', 'chunk_index': 3}, vector=None, shard_key=None, order_value=None)]
[ 2025-08-10 11:12:39,444 ] test_main.py:105 root - INFO - Retrieved result for point ID: df9d15c4-2094-450f-95e6-162e03d5828a
[ 2025-08-10 11:12:39,444 ] test_main.py:96 root - INFO - (Document(metadata={'_id': '323c1ea3-b288-44b0-8825-475a23907e9f', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='Workflow Designer\ncanvas.\nTo add alerts that send email notifications during the workflow, go to the\nAlerts\ntab in the\nWorkflow Setup panel\n.\nToggle\nEnable\nto turn the alert on or off. Select recipient email addresses from the user list. You can choose multiple recipients.\nWrite a custom alert message that is sent when the condition is met.\nWhen setting an execution time alert, toggle\nUse Absolute Time'), 0.25)
[ 2025-08-10 11:12:39,512 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-10 11:12:39,514 ] test_main.py:104 root - INFO - [Record(id='323c1ea3-b288-44b0-8825-475a23907e9f', payload={'url': 'https://infoveave-help.pages.dev/automation-v8/jobs-v8/create-new-job/', 'title': 'create-new-job', 'section': 'automation', 'terminologies': ['Alerts', 'Automation', 'Infoveave', 'Measures', 'Query', 'Query Report', 'Value', 'Variables', 'View', 'View', 'Workflows'], 'char_count': 4476, 'word_count': 722, 'page_content': 'Workflow Designer\ncanvas.\nTo add alerts that send email notifications during the workflow, go to the\nAlerts\ntab in the\nWorkflow Setup panel\n.\nToggle\nEnable\nto turn the alert on or off. Select recipient email addresses from the user list. You can choose multiple recipients.\nWrite a custom alert message that is sent when the condition is met.\nWhen setting an execution time alert, toggle\nUse Absolute Time', 'chunk_index': 4}, vector=None, shard_key=None, order_value=None)]
[ 2025-08-10 11:12:39,514 ] test_main.py:105 root - INFO - Retrieved result for point ID: 323c1ea3-b288-44b0-8825-475a23907e9f
[ 2025-08-10 11:12:39,514 ] test_main.py:96 root - INFO - (Document(metadata={'_id': '65e3aa33-13d7-4688-98fd-7b6a24cbf91e', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='Workflow Designer\ncanvas.\nTo add alerts that send email notifications during the workflow, go to the\nAlerts\ntab in the\nWorkflow Setup panel\n.\nToggle\nEnable\nto turn the alert on or off. Select recipient email addresses from the user list. You can choose multiple recipients.\nWrite a custom alert message that is sent when the condition is met.\nWhen setting an execution time alert, toggle\nUse Absolute Time'), 0.2)
[ 2025-08-10 11:12:39,600 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-10 11:12:39,602 ] test_main.py:104 root - INFO - [Record(id='65e3aa33-13d7-4688-98fd-7b6a24cbf91e', payload={'url': 'https://infoveave-help.pages.dev/automation-v8/workflows/define-workflow/', 'title': 'define-workflow', 'section': 'automation', 'terminologies': ['Alerts', 'Automation', 'Infoveave', 'Measures', 'Query', 'Query Report', 'Value', 'Variables', 'View', 'View', 'Workflows'], 'char_count': 4476, 'word_count': 722, 'page_content': 'Workflow Designer\ncanvas.\nTo add alerts that send email notifications during the workflow, go to the\nAlerts\ntab in the\nWorkflow Setup panel\n.\nToggle\nEnable\nto turn the alert on or off. Select recipient email addresses from the user list. You can choose multiple recipients.\nWrite a custom alert message that is sent when the condition is met.\nWhen setting an execution time alert, toggle\nUse Absolute Time', 'chunk_index': 4}, vector=None, shard_key=None, order_value=None)]
[ 2025-08-10 11:12:39,602 ] test_main.py:105 root - INFO - Retrieved result for point ID: 65e3aa33-13d7-4688-98fd-7b6a24cbf91e
[ 2025-08-10 11:12:39,602 ] test_main.py:96 root - INFO - (Document(metadata={'_id': '2027003d-7c4e-4b6d-acd3-b391a775ae9a', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='Workflow Alerts | Infoveave Help\nSkip to content\nWorkflow Alerts'), 0.16666667)
[ 2025-08-10 11:12:39,661 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-10 11:12:39,662 ] test_main.py:104 root - INFO - [Record(id='2027003d-7c4e-4b6d-acd3-b391a775ae9a', payload={'url': 'https://infoveave-help.pages.dev/automation-v8/workflows/define-workflow/workflow-alerts-2/', 'title': 'workflow-alerts-2', 'section': 'automation', 'terminologies': ['Alerts', 'Infoveave', 'Workflows', 'Workflow Alerts'], 'char_count': 3832, 'word_count': 620, 'page_content': 'Workflow Alerts | Infoveave Help\nSkip to content\nWorkflow Alerts', 'chunk_index': 0}, vector=None, shard_key=None, order_value=None)]
[ 2025-08-10 11:12:39,662 ] test_main.py:105 root - INFO - Retrieved result for point ID: 2027003d-7c4e-4b6d-acd3-b391a775ae9a
[ 2025-08-10 11:12:39,663 ] test_main.py:96 root - INFO - (Document(metadata={'_id': '81a7ef81-eb12-4bcd-ad2e-403f547e7e50', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='Choose the days on which you want to execute the Workflow. By default, Infoveave sets it to every day. You can select specific days of the week, days of the month, or months.\nClick on the\nAdd'), 0.14285715)
[ 2025-08-10 11:12:39,715 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-10 11:12:39,716 ] test_main.py:104 root - INFO - [Record(id='81a7ef81-eb12-4bcd-ad2e-403f547e7e50', payload={'url': 'https://infoveave-help.pages.dev/automation-v8/jobs-v8/schedule-job/', 'title': 'schedule-job', 'section': 'automation', 'terminologies': ['Automation', 'Cron trigger', 'Emailhook trigger', 'Infoveave', 'Lists', 'Reports', 'Value', 'View', 'View', 'Webhook trigger', 'Workflows', 'Workflow Start trigger'], 'char_count': 5699, 'word_count': 937, 'page_content': 'Choose the days on which you want to execute the Workflow. By default, Infoveave sets it to every day. You can select specific days of the week, days of the month, or months.\nClick on the\nAdd', 'chunk_index': 5}, vector=None, shard_key=None, order_value=None)]
[ 2025-08-10 11:12:39,716 ] test_main.py:105 root - INFO - Retrieved result for point ID: 81a7ef81-eb12-4bcd-ad2e-403f547e7e50
[ 2025-08-10 11:12:39,717 ] test_main.py:96 root - INFO - (Document(metadata={'_id': '3989b1ef-a79d-4b1d-bce6-79cb5969aa26', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='Choose the days on which you want to execute the Workflow. By default, Infoveave sets it to every day. You can select specific days of the week, days of the month, or months.\nClick on the\nAdd'), 0.125)
[ 2025-08-10 11:12:39,771 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-10 11:12:39,772 ] test_main.py:104 root - INFO - [Record(id='3989b1ef-a79d-4b1d-bce6-79cb5969aa26', payload={'url': 'https://infoveave-help.pages.dev/automation-v8/workflows/define-workflow/workflow-start/', 'title': 'workflow-start', 'section': 'automation', 'terminologies': ['Automation', 'Cron trigger', 'Emailhook trigger', 'Infoveave', 'Lists', 'Reports', 'Value', 'View', 'View', 'Webhook trigger', 'Workflows', 'Workflow Start trigger'], 'char_count': 5699, 'word_count': 937, 'page_content': 'Choose the days on which you want to execute the Workflow. By default, Infoveave sets it to every day. You can select specific days of the week, days of the month, or months.\nClick on the\nAdd', 'chunk_index': 5}, vector=None, shard_key=None, order_value=None)]
[ 2025-08-10 11:12:39,773 ] test_main.py:105 root - INFO - Retrieved result for point ID: 3989b1ef-a79d-4b1d-bce6-79cb5969aa26
[ 2025-08-10 11:12:39,773 ] test_main.py:96 root - INFO - (Document(metadata={'_id': '3fd7ab5c-2d29-41ea-9ed7-0684f87b08e1', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='Add FTP Download Activity\n0:21\nConfigure FTP Download Activity\n0:31\nAdd Read Excel Files Activity\n0:35\nAdd Transform Activity using Javascript\n0:40\nAdd Round Numbers Activity\n0:46 Add Remove Duplicate Rows Activity\n0:52\nAdd Drop Columns Activity\n0:56\nAdd Rename Columns Activity\n1:01\nAdd Upload to Datasource Activity\n1:08\nExecute the Workflow and View Instance History'), 0.11111111)
[ 2025-08-10 11:12:39,826 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-10 11:12:39,827 ] test_main.py:104 root - INFO - [Record(id='3fd7ab5c-2d29-41ea-9ed7-0684f87b08e1', payload={'url': 'https://infoveave-help.pages.dev/automation-v8/jobs-v8/create-new-job/', 'title': 'create-new-job', 'section': 'automation', 'terminologies': ['Alerts', 'Automation', 'Infoveave', 'Measures', 'Query', 'Query Report', 'Value', 'Variables', 'View', 'View', 'Workflows'], 'char_count': 4476, 'word_count': 722, 'page_content': 'Add FTP Download Activity\n0:21\nConfigure FTP Download Activity\n0:31\nAdd Read Excel Files Activity\n0:35\nAdd Transform Activity using Javascript\n0:40\nAdd Round Numbers Activity\n0:46 Add Remove Duplicate Rows Activity\n0:52\nAdd Drop Columns Activity\n0:56\nAdd Rename Columns Activity\n1:01\nAdd Upload to Datasource Activity\n1:08\nExecute the Workflow and View Instance History', 'chunk_index': 1}, vector=None, shard_key=None, order_value=None)]
[ 2025-08-10 11:12:39,828 ] test_main.py:105 root - INFO - Retrieved result for point ID: 3fd7ab5c-2d29-41ea-9ed7-0684f87b08e1
[ 2025-08-10 11:12:39,828 ] test_main.py:96 root - INFO - (Document(metadata={'_id': '2adcd9bd-c3f6-41e9-8c27-26f07adfbe4c', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='Add FTP Download Activity\n0:21\nConfigure FTP Download Activity\n0:31\nAdd Read Excel Files Activity\n0:35\nAdd Transform Activity using Javascript\n0:40\nAdd Round Numbers Activity\n0:46 Add Remove Duplicate Rows Activity\n0:52\nAdd Drop Columns Activity\n0:56\nAdd Rename Columns Activity\n1:01\nAdd Upload to Datasource Activity\n1:08\nExecute the Workflow and View Instance History'), 0.1)
[ 2025-08-10 11:12:39,888 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-10 11:12:39,889 ] test_main.py:104 root - INFO - [Record(id='2adcd9bd-c3f6-41e9-8c27-26f07adfbe4c', payload={'url': 'https://infoveave-help.pages.dev/automation-v8/workflows/define-workflow/', 'title': 'define-workflow', 'section': 'automation', 'terminologies': ['Alerts', 'Automation', 'Infoveave', 'Measures', 'Query', 'Query Report', 'Value', 'Variables', 'View', 'View', 'Workflows'], 'char_count': 4476, 'word_count': 722, 'page_content': 'Add FTP Download Activity\n0:21\nConfigure FTP Download Activity\n0:31\nAdd Read Excel Files Activity\n0:35\nAdd Transform Activity using Javascript\n0:40\nAdd Round Numbers Activity\n0:46 Add Remove Duplicate Rows Activity\n0:52\nAdd Drop Columns Activity\n0:56\nAdd Rename Columns Activity\n1:01\nAdd Upload to Datasource Activity\n1:08\nExecute the Workflow and View Instance History', 'chunk_index': 1}, vector=None, shard_key=None, order_value=None)]
[ 2025-08-10 11:12:39,890 ] test_main.py:105 root - INFO - Retrieved result for point ID: 2adcd9bd-c3f6-41e9-8c27-26f07adfbe4c
[ 2025-08-10 11:12:39,890 ] test_main.py:96 root - INFO - (Document(metadata={'_id': 'bfe3c285-ffc2-4551-a19c-a5900bdd0aa3', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='E\nEmailhook trigger The Emailhook trigger initiates a Workflow based on incoming emails. You can set up specific email addresses that serve as Emailhooks. This allows for  automated processing of email-based activities or notifications . This trigger is useful for Workflows that involve email notifications or processing of data received via email.'), 0.09090909)
[ 2025-08-10 11:12:39,949 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-10 11:12:39,996 ] test_main.py:104 root - INFO - [Record(id='bfe3c285-ffc2-4551-a19c-a5900bdd0aa3', payload={'url': 'https://infoveave-help.pages.dev/introduction-to-infoveave/infoveave-terminologies/', 'title': 'infoveave-terminologies', 'section': 'introduction-to-infoveave', 'terminologies': ['Address Book', 'Alerts', 'Audit Log', 'Automation', 'Business Analysis', 'Calculated Columns', 'Calculated Measures', 'Catalogues', 'Client', 'Color Palette', 'Common Dimension filters', 'Component Panel', 'Component', 'Conditional Expressions', 'Connections', 'Control Centre', 'Creator', 'Cron trigger', 'Cube Designer', 'Custom Calendar', 'Custom Email', 'Database Connections', 'Datasources', 'Data Governance', 'Data Ingestion', 'Data Transformation', 'Data Visualization', 'Date Range Filter', 'Designer Canvas', 'Designer Layout', 'Dimensions', 'Domains', 'Emailhook trigger', 'Expression', 'Fixed Filters', 'Grid Layout', 'Hierarchies', 'Holiday Calendar', 'Infoboards', 'Infoboard Setup', 'Infoboard statistics', 'Infoveave', 'Infoveave menu', 'Insights', 'Lists', 'Linked Reports', 'Login statistics', 'Measures', 'ML Analysis', 'ML Model', 'My Organization', 'My Workspace', 'NGuage Forms', 'Query', 'Query Builder', 'Query Report', 'Reports', 'Retention Settings', 'Roles', 'SciPyR', 'Server Statistics', 'SMTP Settings', 'Statistical Analysis', 'Tags', 'Targets and Thresholds', 'Template Reports', 'Tenant', 'Tiers', 'Trash', 'Value', 'Variables', 'Version history', 'View', 'View', 'Viewer', 'Webhook trigger', 'What-If Analysis', 'What-If Formulae', 'Widget Configuration', 'Widget Customization', 'Widget statistics', 'Workflows', 'Workflow Alerts', 'Workflow Execution Status', 'Workflow Start trigger', 'Workflow Variables'], 'char_count': 25220, 'word_count': 3773, 'page_content': 'E\nEmailhook trigger The Emailhook trigger initiates a Workflow based on incoming emails. You can set up specific email addresses that serve as Emailhooks. This allows for  automated processing of email-based activities or notifications . This trigger is useful for Workflows that involve email notifications or processing of data received via email.', 'chunk_index': 13}, vector=None, shard_key=None, order_value=None)]
[ 2025-08-10 11:12:39,996 ] test_main.py:105 root - INFO - Retrieved result for point ID: bfe3c285-ffc2-4551-a19c-a5900bdd0aa3
[ 2025-08-10 11:12:39,997 ] test_main.py:135 root - INFO - Loaded rewritten query user prompt.
[ 2025-08-10 11:12:42,119 ] _client.py:1025 httpx - INFO - HTTP Request: POST https://api.groq.com/openai/v1/chat/completions "HTTP/1.1 200 OK"
[ 2025-08-10 11:12:42,123 ] test_main.py:283 root - INFO - Response for query part 1: Let's craft a workflow to fetch data from your Oracle database and deliver it as an email report. 

Here's a breakdown of the steps involved:

1. **Execute Query:** You'll need to use the `Execute Query` activity to connect to your Oracle database and run your SQL query.  Make sure to provide the necessary connection details (database server, username, password, port, etc.) and your SQL query string.

2. **Format the Results:** The `Execute Query` activity will return the query results as a table. You might want to use activities like `Pivot columns`, `Select columns`, or `Transform using javascript` to structure the data in a way that's easy to read in an email report.

3. **Generate the Report:**  You can use the `Write to file` activity to save the formatted data to a file (e.g., a CSV or Excel file). This file will serve as the basis for your email report.

4. **Send the Email:** The `Send Email` activity will allow you to compose and send the email report. You'll need to specify the recipient's email address, the subject line, and the body of the email. You can attach the generated report file to the email using the `Attach file` option.

**Important Considerations:**

* **Error Handling:**  It's crucial to include error handling in your workflow. Use activities like `Fetch Data Quality errors` to monitor the execution and handle potential issues with the database connection, query execution, or email sending.

* **Scheduling:** If you need to send the report on a recurring basis, consider using a scheduling tool or service to automate the workflow execution.



Let me know if you have any more questions or need help with specific aspects of the workflow!
[ 2025-08-10 11:12:42,124 ] test_main.py:286 root - INFO - [(Document(metadata={'_id': '2a6c9297-ff5a-4139-bb0d-e87f53ace134', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content="Upload transformed file to destination database\nSetup the 'Oracle' connection, specify tables, and map columns\nSetup automated workflow summary notification\nEnable 'Send Workflow Summary' for email notifications on automated workflow execution\nSchedule and monitor  workflows Schedule or setup 'Webhooks' and 'Emails' to trigger workflows\nDone"), 0.5), (Document(metadata={'_id': 'df9d15c4-2094-450f-95e6-162e03d5828a', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='Creating Infoboard Using A Query\nCreate Infoboard Using A Query\nCreating Infoboard Using API\nCreate Infoboard Using API\nCreating Workflow in Infoveave\nCreating Workflows\nWorkflow Execution Status\nWorkflow Execution Status'), 0.33333334), (Document(metadata={'_id': '323c1ea3-b288-44b0-8825-475a23907e9f', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='Workflow Designer\ncanvas.\nTo add alerts that send email notifications during the workflow, go to the\nAlerts\ntab in the\nWorkflow Setup panel\n.\nToggle\nEnable\nto turn the alert on or off. Select recipient email addresses from the user list. You can choose multiple recipients.\nWrite a custom alert message that is sent when the condition is met.\nWhen setting an execution time alert, toggle\nUse Absolute Time'), 0.25), (Document(metadata={'_id': '65e3aa33-13d7-4688-98fd-7b6a24cbf91e', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='Workflow Designer\ncanvas.\nTo add alerts that send email notifications during the workflow, go to the\nAlerts\ntab in the\nWorkflow Setup panel\n.\nToggle\nEnable\nto turn the alert on or off. Select recipient email addresses from the user list. You can choose multiple recipients.\nWrite a custom alert message that is sent when the condition is met.\nWhen setting an execution time alert, toggle\nUse Absolute Time'), 0.2), (Document(metadata={'_id': '2027003d-7c4e-4b6d-acd3-b391a775ae9a', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='Workflow Alerts | Infoveave Help\nSkip to content\nWorkflow Alerts'), 0.16666667), (Document(metadata={'_id': '81a7ef81-eb12-4bcd-ad2e-403f547e7e50', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='Choose the days on which you want to execute the Workflow. By default, Infoveave sets it to every day. You can select specific days of the week, days of the month, or months.\nClick on the\nAdd'), 0.14285715), (Document(metadata={'_id': '3989b1ef-a79d-4b1d-bce6-79cb5969aa26', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='Choose the days on which you want to execute the Workflow. By default, Infoveave sets it to every day. You can select specific days of the week, days of the month, or months.\nClick on the\nAdd'), 0.125), (Document(metadata={'_id': '3fd7ab5c-2d29-41ea-9ed7-0684f87b08e1', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='Add FTP Download Activity\n0:21\nConfigure FTP Download Activity\n0:31\nAdd Read Excel Files Activity\n0:35\nAdd Transform Activity using Javascript\n0:40\nAdd Round Numbers Activity\n0:46 Add Remove Duplicate Rows Activity\n0:52\nAdd Drop Columns Activity\n0:56\nAdd Rename Columns Activity\n1:01\nAdd Upload to Datasource Activity\n1:08\nExecute the Workflow and View Instance History'), 0.11111111), (Document(metadata={'_id': '2adcd9bd-c3f6-41e9-8c27-26f07adfbe4c', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='Add FTP Download Activity\n0:21\nConfigure FTP Download Activity\n0:31\nAdd Read Excel Files Activity\n0:35\nAdd Transform Activity using Javascript\n0:40\nAdd Round Numbers Activity\n0:46 Add Remove Duplicate Rows Activity\n0:52\nAdd Drop Columns Activity\n0:56\nAdd Rename Columns Activity\n1:01\nAdd Upload to Datasource Activity\n1:08\nExecute the Workflow and View Instance History'), 0.1), (Document(metadata={'_id': 'bfe3c285-ffc2-4551-a19c-a5900bdd0aa3', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='E\nEmailhook trigger The Emailhook trigger initiates a Workflow based on incoming emails. You can set up specific email addresses that serve as Emailhooks. This allows for  automated processing of email-based activities or notifications . This trigger is useful for Workflows that involve email notifications or processing of data received via email.'), 0.09090909)]
[ 2025-08-10 11:12:42,149 ] test_main.py:96 root - INFO - (Document(metadata={'_id': '2a6c9297-ff5a-4139-bb0d-e87f53ace134', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content="Upload transformed file to destination database\nSetup the 'Oracle' connection, specify tables, and map columns\nSetup automated workflow summary notification\nEnable 'Send Workflow Summary' for email notifications on automated workflow execution\nSchedule and monitor  workflows Schedule or setup 'Webhooks' and 'Emails' to trigger workflows\nDone"), 0.5)
[ 2025-08-10 11:12:42,213 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-10 11:12:42,218 ] test_main.py:104 root - INFO - [Record(id='2a6c9297-ff5a-4139-bb0d-e87f53ace134', payload={'url': 'https://infoveave-help.pages.dev/journey/automate-workflows/', 'title': 'automate-workflows', 'section': 'automation', 'terminologies': ['Connections', 'Data Transformation', 'Infoveave', 'Workflows'], 'char_count': 978, 'word_count': 139, 'page_content': "Upload transformed file to destination database\nSetup the 'Oracle' connection, specify tables, and map columns\nSetup automated workflow summary notification\nEnable 'Send Workflow Summary' for email notifications on automated workflow execution\nSchedule and monitor  workflows Schedule or setup 'Webhooks' and 'Emails' to trigger workflows\nDone", 'chunk_index': 2}, vector=None, shard_key=None, order_value=None)]
[ 2025-08-10 11:12:42,218 ] test_main.py:105 root - INFO - Retrieved result for point ID: 2a6c9297-ff5a-4139-bb0d-e87f53ace134
[ 2025-08-10 11:12:42,218 ] test_main.py:96 root - INFO - (Document(metadata={'_id': 'df9d15c4-2094-450f-95e6-162e03d5828a', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='Creating Infoboard Using A Query\nCreate Infoboard Using A Query\nCreating Infoboard Using API\nCreate Infoboard Using API\nCreating Workflow in Infoveave\nCreating Workflows\nWorkflow Execution Status\nWorkflow Execution Status'), 0.33333334)
[ 2025-08-10 11:12:42,269 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-10 11:12:42,270 ] test_main.py:104 root - INFO - [Record(id='df9d15c4-2094-450f-95e6-162e03d5828a', payload={'url': 'https://infoveave-help.pages.dev/videos/', 'title': 'videos', 'section': 'videos', 'terminologies': ['Automation', 'Catalogues', 'Conditional Expressions', 'Custom Calendar', 'Datasources', 'Dimensions', 'Infoboards', 'Infoveave', 'Insights', 'Lists', 'Measures', 'My Organization', 'My Workspace', 'Query', 'Reports', 'SciPyR', 'What-If Analysis', 'What-If Formulae', 'Workflows', 'Workflow Execution Status'], 'char_count': 2430, 'word_count': 338, 'page_content': 'Creating Infoboard Using A Query\nCreate Infoboard Using A Query\nCreating Infoboard Using API\nCreate Infoboard Using API\nCreating Workflow in Infoveave\nCreating Workflows\nWorkflow Execution Status\nWorkflow Execution Status', 'chunk_index': 3}, vector=None, shard_key=None, order_value=None)]
[ 2025-08-10 11:12:42,270 ] test_main.py:105 root - INFO - Retrieved result for point ID: df9d15c4-2094-450f-95e6-162e03d5828a
[ 2025-08-10 11:12:42,270 ] test_main.py:96 root - INFO - (Document(metadata={'_id': '323c1ea3-b288-44b0-8825-475a23907e9f', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='Workflow Designer\ncanvas.\nTo add alerts that send email notifications during the workflow, go to the\nAlerts\ntab in the\nWorkflow Setup panel\n.\nToggle\nEnable\nto turn the alert on or off. Select recipient email addresses from the user list. You can choose multiple recipients.\nWrite a custom alert message that is sent when the condition is met.\nWhen setting an execution time alert, toggle\nUse Absolute Time'), 0.25)
[ 2025-08-10 11:12:42,341 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-10 11:12:42,342 ] test_main.py:104 root - INFO - [Record(id='323c1ea3-b288-44b0-8825-475a23907e9f', payload={'url': 'https://infoveave-help.pages.dev/automation-v8/jobs-v8/create-new-job/', 'title': 'create-new-job', 'section': 'automation', 'terminologies': ['Alerts', 'Automation', 'Infoveave', 'Measures', 'Query', 'Query Report', 'Value', 'Variables', 'View', 'View', 'Workflows'], 'char_count': 4476, 'word_count': 722, 'page_content': 'Workflow Designer\ncanvas.\nTo add alerts that send email notifications during the workflow, go to the\nAlerts\ntab in the\nWorkflow Setup panel\n.\nToggle\nEnable\nto turn the alert on or off. Select recipient email addresses from the user list. You can choose multiple recipients.\nWrite a custom alert message that is sent when the condition is met.\nWhen setting an execution time alert, toggle\nUse Absolute Time', 'chunk_index': 4}, vector=None, shard_key=None, order_value=None)]
[ 2025-08-10 11:12:42,343 ] test_main.py:105 root - INFO - Retrieved result for point ID: 323c1ea3-b288-44b0-8825-475a23907e9f
[ 2025-08-10 11:12:42,343 ] test_main.py:96 root - INFO - (Document(metadata={'_id': '65e3aa33-13d7-4688-98fd-7b6a24cbf91e', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='Workflow Designer\ncanvas.\nTo add alerts that send email notifications during the workflow, go to the\nAlerts\ntab in the\nWorkflow Setup panel\n.\nToggle\nEnable\nto turn the alert on or off. Select recipient email addresses from the user list. You can choose multiple recipients.\nWrite a custom alert message that is sent when the condition is met.\nWhen setting an execution time alert, toggle\nUse Absolute Time'), 0.2)
[ 2025-08-10 11:12:42,423 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-10 11:12:42,425 ] test_main.py:104 root - INFO - [Record(id='65e3aa33-13d7-4688-98fd-7b6a24cbf91e', payload={'url': 'https://infoveave-help.pages.dev/automation-v8/workflows/define-workflow/', 'title': 'define-workflow', 'section': 'automation', 'terminologies': ['Alerts', 'Automation', 'Infoveave', 'Measures', 'Query', 'Query Report', 'Value', 'Variables', 'View', 'View', 'Workflows'], 'char_count': 4476, 'word_count': 722, 'page_content': 'Workflow Designer\ncanvas.\nTo add alerts that send email notifications during the workflow, go to the\nAlerts\ntab in the\nWorkflow Setup panel\n.\nToggle\nEnable\nto turn the alert on or off. Select recipient email addresses from the user list. You can choose multiple recipients.\nWrite a custom alert message that is sent when the condition is met.\nWhen setting an execution time alert, toggle\nUse Absolute Time', 'chunk_index': 4}, vector=None, shard_key=None, order_value=None)]
[ 2025-08-10 11:12:42,425 ] test_main.py:105 root - INFO - Retrieved result for point ID: 65e3aa33-13d7-4688-98fd-7b6a24cbf91e
[ 2025-08-10 11:12:42,425 ] test_main.py:96 root - INFO - (Document(metadata={'_id': '2027003d-7c4e-4b6d-acd3-b391a775ae9a', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='Workflow Alerts | Infoveave Help\nSkip to content\nWorkflow Alerts'), 0.16666667)
[ 2025-08-10 11:12:42,501 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-10 11:12:42,503 ] test_main.py:104 root - INFO - [Record(id='2027003d-7c4e-4b6d-acd3-b391a775ae9a', payload={'url': 'https://infoveave-help.pages.dev/automation-v8/workflows/define-workflow/workflow-alerts-2/', 'title': 'workflow-alerts-2', 'section': 'automation', 'terminologies': ['Alerts', 'Infoveave', 'Workflows', 'Workflow Alerts'], 'char_count': 3832, 'word_count': 620, 'page_content': 'Workflow Alerts | Infoveave Help\nSkip to content\nWorkflow Alerts', 'chunk_index': 0}, vector=None, shard_key=None, order_value=None)]
[ 2025-08-10 11:12:42,503 ] test_main.py:105 root - INFO - Retrieved result for point ID: 2027003d-7c4e-4b6d-acd3-b391a775ae9a
[ 2025-08-10 11:12:42,503 ] test_main.py:96 root - INFO - (Document(metadata={'_id': '81a7ef81-eb12-4bcd-ad2e-403f547e7e50', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='Choose the days on which you want to execute the Workflow. By default, Infoveave sets it to every day. You can select specific days of the week, days of the month, or months.\nClick on the\nAdd'), 0.14285715)
[ 2025-08-10 11:12:42,561 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-10 11:12:42,562 ] test_main.py:104 root - INFO - [Record(id='81a7ef81-eb12-4bcd-ad2e-403f547e7e50', payload={'url': 'https://infoveave-help.pages.dev/automation-v8/jobs-v8/schedule-job/', 'title': 'schedule-job', 'section': 'automation', 'terminologies': ['Automation', 'Cron trigger', 'Emailhook trigger', 'Infoveave', 'Lists', 'Reports', 'Value', 'View', 'View', 'Webhook trigger', 'Workflows', 'Workflow Start trigger'], 'char_count': 5699, 'word_count': 937, 'page_content': 'Choose the days on which you want to execute the Workflow. By default, Infoveave sets it to every day. You can select specific days of the week, days of the month, or months.\nClick on the\nAdd', 'chunk_index': 5}, vector=None, shard_key=None, order_value=None)]
[ 2025-08-10 11:12:42,562 ] test_main.py:105 root - INFO - Retrieved result for point ID: 81a7ef81-eb12-4bcd-ad2e-403f547e7e50
[ 2025-08-10 11:12:42,562 ] test_main.py:96 root - INFO - (Document(metadata={'_id': '3989b1ef-a79d-4b1d-bce6-79cb5969aa26', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='Choose the days on which you want to execute the Workflow. By default, Infoveave sets it to every day. You can select specific days of the week, days of the month, or months.\nClick on the\nAdd'), 0.125)
[ 2025-08-10 11:12:42,619 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-10 11:12:42,620 ] test_main.py:104 root - INFO - [Record(id='3989b1ef-a79d-4b1d-bce6-79cb5969aa26', payload={'url': 'https://infoveave-help.pages.dev/automation-v8/workflows/define-workflow/workflow-start/', 'title': 'workflow-start', 'section': 'automation', 'terminologies': ['Automation', 'Cron trigger', 'Emailhook trigger', 'Infoveave', 'Lists', 'Reports', 'Value', 'View', 'View', 'Webhook trigger', 'Workflows', 'Workflow Start trigger'], 'char_count': 5699, 'word_count': 937, 'page_content': 'Choose the days on which you want to execute the Workflow. By default, Infoveave sets it to every day. You can select specific days of the week, days of the month, or months.\nClick on the\nAdd', 'chunk_index': 5}, vector=None, shard_key=None, order_value=None)]
[ 2025-08-10 11:12:42,621 ] test_main.py:105 root - INFO - Retrieved result for point ID: 3989b1ef-a79d-4b1d-bce6-79cb5969aa26
[ 2025-08-10 11:12:42,621 ] test_main.py:96 root - INFO - (Document(metadata={'_id': '3fd7ab5c-2d29-41ea-9ed7-0684f87b08e1', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='Add FTP Download Activity\n0:21\nConfigure FTP Download Activity\n0:31\nAdd Read Excel Files Activity\n0:35\nAdd Transform Activity using Javascript\n0:40\nAdd Round Numbers Activity\n0:46 Add Remove Duplicate Rows Activity\n0:52\nAdd Drop Columns Activity\n0:56\nAdd Rename Columns Activity\n1:01\nAdd Upload to Datasource Activity\n1:08\nExecute the Workflow and View Instance History'), 0.11111111)
[ 2025-08-10 11:12:42,681 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-10 11:12:42,682 ] test_main.py:104 root - INFO - [Record(id='3fd7ab5c-2d29-41ea-9ed7-0684f87b08e1', payload={'url': 'https://infoveave-help.pages.dev/automation-v8/jobs-v8/create-new-job/', 'title': 'create-new-job', 'section': 'automation', 'terminologies': ['Alerts', 'Automation', 'Infoveave', 'Measures', 'Query', 'Query Report', 'Value', 'Variables', 'View', 'View', 'Workflows'], 'char_count': 4476, 'word_count': 722, 'page_content': 'Add FTP Download Activity\n0:21\nConfigure FTP Download Activity\n0:31\nAdd Read Excel Files Activity\n0:35\nAdd Transform Activity using Javascript\n0:40\nAdd Round Numbers Activity\n0:46 Add Remove Duplicate Rows Activity\n0:52\nAdd Drop Columns Activity\n0:56\nAdd Rename Columns Activity\n1:01\nAdd Upload to Datasource Activity\n1:08\nExecute the Workflow and View Instance History', 'chunk_index': 1}, vector=None, shard_key=None, order_value=None)]
[ 2025-08-10 11:12:42,682 ] test_main.py:105 root - INFO - Retrieved result for point ID: 3fd7ab5c-2d29-41ea-9ed7-0684f87b08e1
[ 2025-08-10 11:12:42,682 ] test_main.py:96 root - INFO - (Document(metadata={'_id': '2adcd9bd-c3f6-41e9-8c27-26f07adfbe4c', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='Add FTP Download Activity\n0:21\nConfigure FTP Download Activity\n0:31\nAdd Read Excel Files Activity\n0:35\nAdd Transform Activity using Javascript\n0:40\nAdd Round Numbers Activity\n0:46 Add Remove Duplicate Rows Activity\n0:52\nAdd Drop Columns Activity\n0:56\nAdd Rename Columns Activity\n1:01\nAdd Upload to Datasource Activity\n1:08\nExecute the Workflow and View Instance History'), 0.1)
[ 2025-08-10 11:12:42,743 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-10 11:12:42,744 ] test_main.py:104 root - INFO - [Record(id='2adcd9bd-c3f6-41e9-8c27-26f07adfbe4c', payload={'url': 'https://infoveave-help.pages.dev/automation-v8/workflows/define-workflow/', 'title': 'define-workflow', 'section': 'automation', 'terminologies': ['Alerts', 'Automation', 'Infoveave', 'Measures', 'Query', 'Query Report', 'Value', 'Variables', 'View', 'View', 'Workflows'], 'char_count': 4476, 'word_count': 722, 'page_content': 'Add FTP Download Activity\n0:21\nConfigure FTP Download Activity\n0:31\nAdd Read Excel Files Activity\n0:35\nAdd Transform Activity using Javascript\n0:40\nAdd Round Numbers Activity\n0:46 Add Remove Duplicate Rows Activity\n0:52\nAdd Drop Columns Activity\n0:56\nAdd Rename Columns Activity\n1:01\nAdd Upload to Datasource Activity\n1:08\nExecute the Workflow and View Instance History', 'chunk_index': 1}, vector=None, shard_key=None, order_value=None)]
[ 2025-08-10 11:12:42,744 ] test_main.py:105 root - INFO - Retrieved result for point ID: 2adcd9bd-c3f6-41e9-8c27-26f07adfbe4c
[ 2025-08-10 11:12:42,745 ] test_main.py:96 root - INFO - (Document(metadata={'_id': 'bfe3c285-ffc2-4551-a19c-a5900bdd0aa3', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='E\nEmailhook trigger The Emailhook trigger initiates a Workflow based on incoming emails. You can set up specific email addresses that serve as Emailhooks. This allows for  automated processing of email-based activities or notifications . This trigger is useful for Workflows that involve email notifications or processing of data received via email.'), 0.09090909)
[ 2025-08-10 11:12:42,801 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-10 11:12:42,848 ] test_main.py:104 root - INFO - [Record(id='bfe3c285-ffc2-4551-a19c-a5900bdd0aa3', payload={'url': 'https://infoveave-help.pages.dev/introduction-to-infoveave/infoveave-terminologies/', 'title': 'infoveave-terminologies', 'section': 'introduction-to-infoveave', 'terminologies': ['Address Book', 'Alerts', 'Audit Log', 'Automation', 'Business Analysis', 'Calculated Columns', 'Calculated Measures', 'Catalogues', 'Client', 'Color Palette', 'Common Dimension filters', 'Component Panel', 'Component', 'Conditional Expressions', 'Connections', 'Control Centre', 'Creator', 'Cron trigger', 'Cube Designer', 'Custom Calendar', 'Custom Email', 'Database Connections', 'Datasources', 'Data Governance', 'Data Ingestion', 'Data Transformation', 'Data Visualization', 'Date Range Filter', 'Designer Canvas', 'Designer Layout', 'Dimensions', 'Domains', 'Emailhook trigger', 'Expression', 'Fixed Filters', 'Grid Layout', 'Hierarchies', 'Holiday Calendar', 'Infoboards', 'Infoboard Setup', 'Infoboard statistics', 'Infoveave', 'Infoveave menu', 'Insights', 'Lists', 'Linked Reports', 'Login statistics', 'Measures', 'ML Analysis', 'ML Model', 'My Organization', 'My Workspace', 'NGuage Forms', 'Query', 'Query Builder', 'Query Report', 'Reports', 'Retention Settings', 'Roles', 'SciPyR', 'Server Statistics', 'SMTP Settings', 'Statistical Analysis', 'Tags', 'Targets and Thresholds', 'Template Reports', 'Tenant', 'Tiers', 'Trash', 'Value', 'Variables', 'Version history', 'View', 'View', 'Viewer', 'Webhook trigger', 'What-If Analysis', 'What-If Formulae', 'Widget Configuration', 'Widget Customization', 'Widget statistics', 'Workflows', 'Workflow Alerts', 'Workflow Execution Status', 'Workflow Start trigger', 'Workflow Variables'], 'char_count': 25220, 'word_count': 3773, 'page_content': 'E\nEmailhook trigger The Emailhook trigger initiates a Workflow based on incoming emails. You can set up specific email addresses that serve as Emailhooks. This allows for  automated processing of email-based activities or notifications . This trigger is useful for Workflows that involve email notifications or processing of data received via email.', 'chunk_index': 13}, vector=None, shard_key=None, order_value=None)]
[ 2025-08-10 11:12:42,849 ] test_main.py:105 root - INFO - Retrieved result for point ID: bfe3c285-ffc2-4551-a19c-a5900bdd0aa3
[ 2025-08-10 11:12:42,849 ] test_main.py:322 root - INFO - Found 161 final documents.
[ 2025-08-10 11:12:42,849 ] test_main.py:369 root - INFO - Context prepared for LLM response.
[ 2025-08-10 11:12:42,851 ] test_main.py:415 root - INFO - Single query part response:

[ 2025-08-10 11:12:42,851 ] test_main.py:416 root - INFO - Let's craft a workflow to fetch data from your Oracle database and deliver it as an email report. 

Here's a breakdown of the steps involved:

1. **Execute Query:** You'll need to use the `Execute Query` activity to connect to your Oracle database and run your SQL query.  Make sure to provide the necessary connection details (database server, username, password, port, etc.) and your SQL query string.

2. **Format the Results:** The `Execute Query` activity will return the query results as a table. You might want to use activities like `Pivot columns`, `Select columns`, or `Transform using javascript` to structure the data in a way that's easy to read in an email report.

3. **Generate the Report:**  You can use the `Write to file` activity to save the formatted data to a file (e.g., a CSV or Excel file). This file will serve as the basis for your email report.

4. **Send the Email:** The `Send Email` activity will allow you to compose and send the email report. You'll need to specify the recipient's email address, the subject line, and the body of the email. You can attach the generated report file to the email using the `Attach file` option.

**Important Considerations:**

* **Error Handling:**  It's crucial to include error handling in your workflow. Use activities like `Fetch Data Quality errors` to monitor the execution and handle potential issues with the database connection, query execution, or email sending.

* **Scheduling:** If you need to send the report on a recurring basis, consider using a scheduling tool or service to automate the workflow execution.



Let me know if you have any more questions or need help with specific aspects of the workflow!
[ 2025-08-10 11:17:25,058 ] test_main.py:148 root - INFO - .........................Starting Infoverve Helper Application.........................
[ 2025-08-10 11:17:25,058 ] test_main.py:164 root - INFO - GROQ_API_KEY loaded.
[ 2025-08-10 11:17:25,067 ] test_main.py:188 root - INFO - Embedding model initialized.
[ 2025-08-10 11:17:25,208 ] _client.py:1025 httpx - INFO - HTTP Request: GET http://ai.infoveave.cloud:6333 "HTTP/1.1 200 OK"
[ 2025-08-10 11:17:25,208 ] test_main.py:192 root - INFO - Connected to Qdrant.
[ 2025-08-10 11:17:25,310 ] _client.py:1025 httpx - INFO - HTTP Request: GET http://ai.infoveave.cloud:6333/collections "HTTP/1.1 200 OK"
[ 2025-08-10 11:17:25,311 ] test_main.py:196 root - INFO - Qdrant collections retrieved.
[ 2025-08-10 11:17:25,311 ] test_main.py:203 root - INFO - Using collection: infoverve_helper_docs_hybrid
[ 2025-08-10 11:17:26,499 ] test_main.py:206 root - INFO - Sparse embeddings initialized.
[ 2025-08-10 11:17:26,609 ] _client.py:1025 httpx - INFO - HTTP Request: GET http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid "HTTP/1.1 200 OK"
[ 2025-08-10 11:17:28,786 ] _client.py:1025 httpx - INFO - HTTP Request: GET http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid "HTTP/1.1 200 OK"
[ 2025-08-10 11:17:28,788 ] test_main.py:218 root - INFO - QdrantVectorStore initialized.
[ 2025-08-10 11:17:28,822 ] test_main.py:224 root - INFO - LLM initialized.
[ 2025-08-10 11:17:29,793 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points/query "HTTP/1.1 200 OK"
[ 2025-08-10 11:17:30,575 ] test_main.py:246 root - INFO - Original query embedding generated.
[ 2025-08-10 11:17:30,595 ] test_main.py:96 root - INFO - (Document(metadata={'_id': '2a6c9297-ff5a-4139-bb0d-e87f53ace134', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content="Upload transformed file to destination database\nSetup the 'Oracle' connection, specify tables, and map columns\nSetup automated workflow summary notification\nEnable 'Send Workflow Summary' for email notifications on automated workflow execution\nSchedule and monitor  workflows Schedule or setup 'Webhooks' and 'Emails' to trigger workflows\nDone"), 0.5)
[ 2025-08-10 11:17:30,676 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-10 11:17:30,677 ] test_main.py:104 root - INFO - [Record(id='2a6c9297-ff5a-4139-bb0d-e87f53ace134', payload={'url': 'https://infoveave-help.pages.dev/journey/automate-workflows/', 'title': 'automate-workflows', 'section': 'automation', 'terminologies': ['Connections', 'Data Transformation', 'Infoveave', 'Workflows'], 'char_count': 978, 'word_count': 139, 'page_content': "Upload transformed file to destination database\nSetup the 'Oracle' connection, specify tables, and map columns\nSetup automated workflow summary notification\nEnable 'Send Workflow Summary' for email notifications on automated workflow execution\nSchedule and monitor  workflows Schedule or setup 'Webhooks' and 'Emails' to trigger workflows\nDone", 'chunk_index': 2}, vector=None, shard_key=None, order_value=None)]
[ 2025-08-10 11:17:30,678 ] test_main.py:105 root - INFO - Retrieved result for point ID: 2a6c9297-ff5a-4139-bb0d-e87f53ace134
[ 2025-08-10 11:17:30,678 ] test_main.py:90 root - ERROR - Error during query rewriting: name 'context' is not defined
[ 2025-08-10 11:17:30,678 ] test_main.py:251 root - INFO - Rewritten query: Need to create a workflow, to run a query from oracle DB and send the query response as a report through Email
[ 2025-08-10 11:17:30,678 ] test_main.py:258 root - INFO - Rewritten query parts: ['Need to create a workflow, to run a query from oracle DB and send the query response as a report through Email']
[ 2025-08-10 11:17:30,678 ] test_main.py:267 root - INFO - Rewritten Query 1: Need to create a workflow, to run a query from oracle DB and send the query response as a report through Email
[ 2025-08-10 11:17:31,804 ] test_main.py:270 root - INFO - Embedding generated for query 1.
[ 2025-08-10 11:17:32,397 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points/query "HTTP/1.1 200 OK"
[ 2025-08-10 11:17:32,448 ] test_main.py:282 root - INFO - Processing query part 1: Need to create a workflow, to run a query from oracle DB and send the query response as a report through Email
[ 2025-08-10 11:17:32,473 ] test_main.py:96 root - INFO - (Document(metadata={'_id': '2a6c9297-ff5a-4139-bb0d-e87f53ace134', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content="Upload transformed file to destination database\nSetup the 'Oracle' connection, specify tables, and map columns\nSetup automated workflow summary notification\nEnable 'Send Workflow Summary' for email notifications on automated workflow execution\nSchedule and monitor  workflows Schedule or setup 'Webhooks' and 'Emails' to trigger workflows\nDone"), 0.5)
[ 2025-08-10 11:17:32,533 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-10 11:17:32,533 ] test_main.py:104 root - INFO - [Record(id='2a6c9297-ff5a-4139-bb0d-e87f53ace134', payload={'url': 'https://infoveave-help.pages.dev/journey/automate-workflows/', 'title': 'automate-workflows', 'section': 'automation', 'terminologies': ['Connections', 'Data Transformation', 'Infoveave', 'Workflows'], 'char_count': 978, 'word_count': 139, 'page_content': "Upload transformed file to destination database\nSetup the 'Oracle' connection, specify tables, and map columns\nSetup automated workflow summary notification\nEnable 'Send Workflow Summary' for email notifications on automated workflow execution\nSchedule and monitor  workflows Schedule or setup 'Webhooks' and 'Emails' to trigger workflows\nDone", 'chunk_index': 2}, vector=None, shard_key=None, order_value=None)]
[ 2025-08-10 11:17:32,534 ] test_main.py:105 root - INFO - Retrieved result for point ID: 2a6c9297-ff5a-4139-bb0d-e87f53ace134
[ 2025-08-10 11:17:32,534 ] test_main.py:96 root - INFO - (Document(metadata={'_id': 'df9d15c4-2094-450f-95e6-162e03d5828a', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='Creating Infoboard Using A Query\nCreate Infoboard Using A Query\nCreating Infoboard Using API\nCreate Infoboard Using API\nCreating Workflow in Infoveave\nCreating Workflows\nWorkflow Execution Status\nWorkflow Execution Status'), 0.33333334)
[ 2025-08-10 11:17:32,616 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-10 11:17:32,617 ] test_main.py:104 root - INFO - [Record(id='df9d15c4-2094-450f-95e6-162e03d5828a', payload={'url': 'https://infoveave-help.pages.dev/videos/', 'title': 'videos', 'section': 'videos', 'terminologies': ['Automation', 'Catalogues', 'Conditional Expressions', 'Custom Calendar', 'Datasources', 'Dimensions', 'Infoboards', 'Infoveave', 'Insights', 'Lists', 'Measures', 'My Organization', 'My Workspace', 'Query', 'Reports', 'SciPyR', 'What-If Analysis', 'What-If Formulae', 'Workflows', 'Workflow Execution Status'], 'char_count': 2430, 'word_count': 338, 'page_content': 'Creating Infoboard Using A Query\nCreate Infoboard Using A Query\nCreating Infoboard Using API\nCreate Infoboard Using API\nCreating Workflow in Infoveave\nCreating Workflows\nWorkflow Execution Status\nWorkflow Execution Status', 'chunk_index': 3}, vector=None, shard_key=None, order_value=None)]
[ 2025-08-10 11:17:32,617 ] test_main.py:105 root - INFO - Retrieved result for point ID: df9d15c4-2094-450f-95e6-162e03d5828a
[ 2025-08-10 11:17:32,618 ] test_main.py:96 root - INFO - (Document(metadata={'_id': '323c1ea3-b288-44b0-8825-475a23907e9f', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='Workflow Designer\ncanvas.\nTo add alerts that send email notifications during the workflow, go to the\nAlerts\ntab in the\nWorkflow Setup panel\n.\nToggle\nEnable\nto turn the alert on or off. Select recipient email addresses from the user list. You can choose multiple recipients.\nWrite a custom alert message that is sent when the condition is met.\nWhen setting an execution time alert, toggle\nUse Absolute Time'), 0.25)
[ 2025-08-10 11:17:32,671 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-10 11:17:32,672 ] test_main.py:104 root - INFO - [Record(id='323c1ea3-b288-44b0-8825-475a23907e9f', payload={'url': 'https://infoveave-help.pages.dev/automation-v8/jobs-v8/create-new-job/', 'title': 'create-new-job', 'section': 'automation', 'terminologies': ['Alerts', 'Automation', 'Infoveave', 'Measures', 'Query', 'Query Report', 'Value', 'Variables', 'View', 'View', 'Workflows'], 'char_count': 4476, 'word_count': 722, 'page_content': 'Workflow Designer\ncanvas.\nTo add alerts that send email notifications during the workflow, go to the\nAlerts\ntab in the\nWorkflow Setup panel\n.\nToggle\nEnable\nto turn the alert on or off. Select recipient email addresses from the user list. You can choose multiple recipients.\nWrite a custom alert message that is sent when the condition is met.\nWhen setting an execution time alert, toggle\nUse Absolute Time', 'chunk_index': 4}, vector=None, shard_key=None, order_value=None)]
[ 2025-08-10 11:17:32,672 ] test_main.py:105 root - INFO - Retrieved result for point ID: 323c1ea3-b288-44b0-8825-475a23907e9f
[ 2025-08-10 11:17:32,672 ] test_main.py:96 root - INFO - (Document(metadata={'_id': '65e3aa33-13d7-4688-98fd-7b6a24cbf91e', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='Workflow Designer\ncanvas.\nTo add alerts that send email notifications during the workflow, go to the\nAlerts\ntab in the\nWorkflow Setup panel\n.\nToggle\nEnable\nto turn the alert on or off. Select recipient email addresses from the user list. You can choose multiple recipients.\nWrite a custom alert message that is sent when the condition is met.\nWhen setting an execution time alert, toggle\nUse Absolute Time'), 0.2)
[ 2025-08-10 11:17:32,727 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-10 11:17:32,729 ] test_main.py:104 root - INFO - [Record(id='65e3aa33-13d7-4688-98fd-7b6a24cbf91e', payload={'url': 'https://infoveave-help.pages.dev/automation-v8/workflows/define-workflow/', 'title': 'define-workflow', 'section': 'automation', 'terminologies': ['Alerts', 'Automation', 'Infoveave', 'Measures', 'Query', 'Query Report', 'Value', 'Variables', 'View', 'View', 'Workflows'], 'char_count': 4476, 'word_count': 722, 'page_content': 'Workflow Designer\ncanvas.\nTo add alerts that send email notifications during the workflow, go to the\nAlerts\ntab in the\nWorkflow Setup panel\n.\nToggle\nEnable\nto turn the alert on or off. Select recipient email addresses from the user list. You can choose multiple recipients.\nWrite a custom alert message that is sent when the condition is met.\nWhen setting an execution time alert, toggle\nUse Absolute Time', 'chunk_index': 4}, vector=None, shard_key=None, order_value=None)]
[ 2025-08-10 11:17:32,729 ] test_main.py:105 root - INFO - Retrieved result for point ID: 65e3aa33-13d7-4688-98fd-7b6a24cbf91e
[ 2025-08-10 11:17:32,729 ] test_main.py:96 root - INFO - (Document(metadata={'_id': '2027003d-7c4e-4b6d-acd3-b391a775ae9a', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='Workflow Alerts | Infoveave Help\nSkip to content\nWorkflow Alerts'), 0.16666667)
[ 2025-08-10 11:17:32,796 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-10 11:17:32,797 ] test_main.py:104 root - INFO - [Record(id='2027003d-7c4e-4b6d-acd3-b391a775ae9a', payload={'url': 'https://infoveave-help.pages.dev/automation-v8/workflows/define-workflow/workflow-alerts-2/', 'title': 'workflow-alerts-2', 'section': 'automation', 'terminologies': ['Alerts', 'Infoveave', 'Workflows', 'Workflow Alerts'], 'char_count': 3832, 'word_count': 620, 'page_content': 'Workflow Alerts | Infoveave Help\nSkip to content\nWorkflow Alerts', 'chunk_index': 0}, vector=None, shard_key=None, order_value=None)]
[ 2025-08-10 11:17:32,797 ] test_main.py:105 root - INFO - Retrieved result for point ID: 2027003d-7c4e-4b6d-acd3-b391a775ae9a
[ 2025-08-10 11:17:32,797 ] test_main.py:96 root - INFO - (Document(metadata={'_id': '81a7ef81-eb12-4bcd-ad2e-403f547e7e50', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='Choose the days on which you want to execute the Workflow. By default, Infoveave sets it to every day. You can select specific days of the week, days of the month, or months.\nClick on the\nAdd'), 0.14285715)
[ 2025-08-10 11:17:32,856 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-10 11:17:32,858 ] test_main.py:104 root - INFO - [Record(id='81a7ef81-eb12-4bcd-ad2e-403f547e7e50', payload={'url': 'https://infoveave-help.pages.dev/automation-v8/jobs-v8/schedule-job/', 'title': 'schedule-job', 'section': 'automation', 'terminologies': ['Automation', 'Cron trigger', 'Emailhook trigger', 'Infoveave', 'Lists', 'Reports', 'Value', 'View', 'View', 'Webhook trigger', 'Workflows', 'Workflow Start trigger'], 'char_count': 5699, 'word_count': 937, 'page_content': 'Choose the days on which you want to execute the Workflow. By default, Infoveave sets it to every day. You can select specific days of the week, days of the month, or months.\nClick on the\nAdd', 'chunk_index': 5}, vector=None, shard_key=None, order_value=None)]
[ 2025-08-10 11:17:32,858 ] test_main.py:105 root - INFO - Retrieved result for point ID: 81a7ef81-eb12-4bcd-ad2e-403f547e7e50
[ 2025-08-10 11:17:32,858 ] test_main.py:96 root - INFO - (Document(metadata={'_id': '3989b1ef-a79d-4b1d-bce6-79cb5969aa26', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='Choose the days on which you want to execute the Workflow. By default, Infoveave sets it to every day. You can select specific days of the week, days of the month, or months.\nClick on the\nAdd'), 0.125)
[ 2025-08-10 11:17:32,906 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-10 11:17:32,909 ] test_main.py:104 root - INFO - [Record(id='3989b1ef-a79d-4b1d-bce6-79cb5969aa26', payload={'url': 'https://infoveave-help.pages.dev/automation-v8/workflows/define-workflow/workflow-start/', 'title': 'workflow-start', 'section': 'automation', 'terminologies': ['Automation', 'Cron trigger', 'Emailhook trigger', 'Infoveave', 'Lists', 'Reports', 'Value', 'View', 'View', 'Webhook trigger', 'Workflows', 'Workflow Start trigger'], 'char_count': 5699, 'word_count': 937, 'page_content': 'Choose the days on which you want to execute the Workflow. By default, Infoveave sets it to every day. You can select specific days of the week, days of the month, or months.\nClick on the\nAdd', 'chunk_index': 5}, vector=None, shard_key=None, order_value=None)]
[ 2025-08-10 11:17:32,909 ] test_main.py:105 root - INFO - Retrieved result for point ID: 3989b1ef-a79d-4b1d-bce6-79cb5969aa26
[ 2025-08-10 11:17:32,910 ] test_main.py:96 root - INFO - (Document(metadata={'_id': '3fd7ab5c-2d29-41ea-9ed7-0684f87b08e1', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='Add FTP Download Activity\n0:21\nConfigure FTP Download Activity\n0:31\nAdd Read Excel Files Activity\n0:35\nAdd Transform Activity using Javascript\n0:40\nAdd Round Numbers Activity\n0:46 Add Remove Duplicate Rows Activity\n0:52\nAdd Drop Columns Activity\n0:56\nAdd Rename Columns Activity\n1:01\nAdd Upload to Datasource Activity\n1:08\nExecute the Workflow and View Instance History'), 0.11111111)
[ 2025-08-10 11:17:32,956 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-10 11:17:32,958 ] test_main.py:104 root - INFO - [Record(id='3fd7ab5c-2d29-41ea-9ed7-0684f87b08e1', payload={'url': 'https://infoveave-help.pages.dev/automation-v8/jobs-v8/create-new-job/', 'title': 'create-new-job', 'section': 'automation', 'terminologies': ['Alerts', 'Automation', 'Infoveave', 'Measures', 'Query', 'Query Report', 'Value', 'Variables', 'View', 'View', 'Workflows'], 'char_count': 4476, 'word_count': 722, 'page_content': 'Add FTP Download Activity\n0:21\nConfigure FTP Download Activity\n0:31\nAdd Read Excel Files Activity\n0:35\nAdd Transform Activity using Javascript\n0:40\nAdd Round Numbers Activity\n0:46 Add Remove Duplicate Rows Activity\n0:52\nAdd Drop Columns Activity\n0:56\nAdd Rename Columns Activity\n1:01\nAdd Upload to Datasource Activity\n1:08\nExecute the Workflow and View Instance History', 'chunk_index': 1}, vector=None, shard_key=None, order_value=None)]
[ 2025-08-10 11:17:32,959 ] test_main.py:105 root - INFO - Retrieved result for point ID: 3fd7ab5c-2d29-41ea-9ed7-0684f87b08e1
[ 2025-08-10 11:17:32,959 ] test_main.py:96 root - INFO - (Document(metadata={'_id': '2adcd9bd-c3f6-41e9-8c27-26f07adfbe4c', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='Add FTP Download Activity\n0:21\nConfigure FTP Download Activity\n0:31\nAdd Read Excel Files Activity\n0:35\nAdd Transform Activity using Javascript\n0:40\nAdd Round Numbers Activity\n0:46 Add Remove Duplicate Rows Activity\n0:52\nAdd Drop Columns Activity\n0:56\nAdd Rename Columns Activity\n1:01\nAdd Upload to Datasource Activity\n1:08\nExecute the Workflow and View Instance History'), 0.1)
[ 2025-08-10 11:17:33,013 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-10 11:17:33,014 ] test_main.py:104 root - INFO - [Record(id='2adcd9bd-c3f6-41e9-8c27-26f07adfbe4c', payload={'url': 'https://infoveave-help.pages.dev/automation-v8/workflows/define-workflow/', 'title': 'define-workflow', 'section': 'automation', 'terminologies': ['Alerts', 'Automation', 'Infoveave', 'Measures', 'Query', 'Query Report', 'Value', 'Variables', 'View', 'View', 'Workflows'], 'char_count': 4476, 'word_count': 722, 'page_content': 'Add FTP Download Activity\n0:21\nConfigure FTP Download Activity\n0:31\nAdd Read Excel Files Activity\n0:35\nAdd Transform Activity using Javascript\n0:40\nAdd Round Numbers Activity\n0:46 Add Remove Duplicate Rows Activity\n0:52\nAdd Drop Columns Activity\n0:56\nAdd Rename Columns Activity\n1:01\nAdd Upload to Datasource Activity\n1:08\nExecute the Workflow and View Instance History', 'chunk_index': 1}, vector=None, shard_key=None, order_value=None)]
[ 2025-08-10 11:17:33,014 ] test_main.py:105 root - INFO - Retrieved result for point ID: 2adcd9bd-c3f6-41e9-8c27-26f07adfbe4c
[ 2025-08-10 11:17:33,014 ] test_main.py:96 root - INFO - (Document(metadata={'_id': 'bfe3c285-ffc2-4551-a19c-a5900bdd0aa3', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='E\nEmailhook trigger The Emailhook trigger initiates a Workflow based on incoming emails. You can set up specific email addresses that serve as Emailhooks. This allows for  automated processing of email-based activities or notifications . This trigger is useful for Workflows that involve email notifications or processing of data received via email.'), 0.09090909)
[ 2025-08-10 11:17:33,085 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-10 11:17:33,086 ] test_main.py:104 root - INFO - [Record(id='bfe3c285-ffc2-4551-a19c-a5900bdd0aa3', payload={'url': 'https://infoveave-help.pages.dev/introduction-to-infoveave/infoveave-terminologies/', 'title': 'infoveave-terminologies', 'section': 'introduction-to-infoveave', 'terminologies': ['Address Book', 'Alerts', 'Audit Log', 'Automation', 'Business Analysis', 'Calculated Columns', 'Calculated Measures', 'Catalogues', 'Client', 'Color Palette', 'Common Dimension filters', 'Component Panel', 'Component', 'Conditional Expressions', 'Connections', 'Control Centre', 'Creator', 'Cron trigger', 'Cube Designer', 'Custom Calendar', 'Custom Email', 'Database Connections', 'Datasources', 'Data Governance', 'Data Ingestion', 'Data Transformation', 'Data Visualization', 'Date Range Filter', 'Designer Canvas', 'Designer Layout', 'Dimensions', 'Domains', 'Emailhook trigger', 'Expression', 'Fixed Filters', 'Grid Layout', 'Hierarchies', 'Holiday Calendar', 'Infoboards', 'Infoboard Setup', 'Infoboard statistics', 'Infoveave', 'Infoveave menu', 'Insights', 'Lists', 'Linked Reports', 'Login statistics', 'Measures', 'ML Analysis', 'ML Model', 'My Organization', 'My Workspace', 'NGuage Forms', 'Query', 'Query Builder', 'Query Report', 'Reports', 'Retention Settings', 'Roles', 'SciPyR', 'Server Statistics', 'SMTP Settings', 'Statistical Analysis', 'Tags', 'Targets and Thresholds', 'Template Reports', 'Tenant', 'Tiers', 'Trash', 'Value', 'Variables', 'Version history', 'View', 'View', 'Viewer', 'Webhook trigger', 'What-If Analysis', 'What-If Formulae', 'Widget Configuration', 'Widget Customization', 'Widget statistics', 'Workflows', 'Workflow Alerts', 'Workflow Execution Status', 'Workflow Start trigger', 'Workflow Variables'], 'char_count': 25220, 'word_count': 3773, 'page_content': 'E\nEmailhook trigger The Emailhook trigger initiates a Workflow based on incoming emails. You can set up specific email addresses that serve as Emailhooks. This allows for  automated processing of email-based activities or notifications . This trigger is useful for Workflows that involve email notifications or processing of data received via email.', 'chunk_index': 13}, vector=None, shard_key=None, order_value=None)]
[ 2025-08-10 11:17:33,087 ] test_main.py:105 root - INFO - Retrieved result for point ID: bfe3c285-ffc2-4551-a19c-a5900bdd0aa3
[ 2025-08-10 11:17:33,088 ] test_main.py:137 root - INFO - Loaded rewritten query user prompt.
[ 2025-08-10 11:17:34,877 ] _client.py:1025 httpx - INFO - HTTP Request: POST https://api.groq.com/openai/v1/chat/completions "HTTP/1.1 200 OK"
[ 2025-08-10 11:17:34,880 ] test_main.py:285 root - INFO - Response for query part 1: Let's craft a workflow to fetch data from your Oracle database and deliver it as an email report. 

Here's a breakdown of the steps involved:

1. **Execute Query:** You'll need to use the `Execute Query` activity to connect to your Oracle database and run your desired SQL query.  

   *  **Database Connection:**  Make sure you configure the `Execute Query` activity with the correct connection details for your Oracle database (hostname, port, username, password, and database name).

   * **SQL Query:**  Input your SQL query into the `Execute Query` activity. This query should select the specific data you want to include in your report.

2. **Format the Data:**  The `Execute Query` activity will return the query results as a dataset. You might need to use other activities to format this data into a presentable structure for your email report.

   * **Pivot Columns:** If you need to restructure your data, consider using the `Pivot Columns` activity to rearrange it into a more suitable format.

   * **Transform using Javascript:** You can leverage the `Transform using Javascript` activity to apply custom formatting, calculations, or manipulations to your data.

3. **Generate the Report:**  Now that your data is formatted, you can generate the report itself.

   * **Download Report:** The `Download Report` activity can create a report in various formats (e.g., PDF, CSV, Excel) based on your chosen data structure.

4. **Send the Email:** Finally, use the `Send Email` activity to deliver the report to the intended recipients.

   * **Email Configuration:**  Set up the `Send Email` activity with the recipient's email address, subject line, and body content.

   * **Attach the Report:**  Attach the generated report file to the email using the `Download Report` activity's output.

**Remember:**

*  You'll need to configure each activity with the appropriate settings and inputs based on your specific database connection, query, and reporting requirements.
*  Refer to the Infoveave documentation for detailed instructions on each activity and its parameters.



Let me know if you have any more questions or need help with specific aspects of the workflow!
[ 2025-08-10 11:17:34,880 ] test_main.py:288 root - INFO - [(Document(metadata={'_id': '2a6c9297-ff5a-4139-bb0d-e87f53ace134', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content="Upload transformed file to destination database\nSetup the 'Oracle' connection, specify tables, and map columns\nSetup automated workflow summary notification\nEnable 'Send Workflow Summary' for email notifications on automated workflow execution\nSchedule and monitor  workflows Schedule or setup 'Webhooks' and 'Emails' to trigger workflows\nDone"), 0.5), (Document(metadata={'_id': 'df9d15c4-2094-450f-95e6-162e03d5828a', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='Creating Infoboard Using A Query\nCreate Infoboard Using A Query\nCreating Infoboard Using API\nCreate Infoboard Using API\nCreating Workflow in Infoveave\nCreating Workflows\nWorkflow Execution Status\nWorkflow Execution Status'), 0.33333334), (Document(metadata={'_id': '323c1ea3-b288-44b0-8825-475a23907e9f', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='Workflow Designer\ncanvas.\nTo add alerts that send email notifications during the workflow, go to the\nAlerts\ntab in the\nWorkflow Setup panel\n.\nToggle\nEnable\nto turn the alert on or off. Select recipient email addresses from the user list. You can choose multiple recipients.\nWrite a custom alert message that is sent when the condition is met.\nWhen setting an execution time alert, toggle\nUse Absolute Time'), 0.25), (Document(metadata={'_id': '65e3aa33-13d7-4688-98fd-7b6a24cbf91e', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='Workflow Designer\ncanvas.\nTo add alerts that send email notifications during the workflow, go to the\nAlerts\ntab in the\nWorkflow Setup panel\n.\nToggle\nEnable\nto turn the alert on or off. Select recipient email addresses from the user list. You can choose multiple recipients.\nWrite a custom alert message that is sent when the condition is met.\nWhen setting an execution time alert, toggle\nUse Absolute Time'), 0.2), (Document(metadata={'_id': '2027003d-7c4e-4b6d-acd3-b391a775ae9a', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='Workflow Alerts | Infoveave Help\nSkip to content\nWorkflow Alerts'), 0.16666667), (Document(metadata={'_id': '81a7ef81-eb12-4bcd-ad2e-403f547e7e50', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='Choose the days on which you want to execute the Workflow. By default, Infoveave sets it to every day. You can select specific days of the week, days of the month, or months.\nClick on the\nAdd'), 0.14285715), (Document(metadata={'_id': '3989b1ef-a79d-4b1d-bce6-79cb5969aa26', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='Choose the days on which you want to execute the Workflow. By default, Infoveave sets it to every day. You can select specific days of the week, days of the month, or months.\nClick on the\nAdd'), 0.125), (Document(metadata={'_id': '3fd7ab5c-2d29-41ea-9ed7-0684f87b08e1', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='Add FTP Download Activity\n0:21\nConfigure FTP Download Activity\n0:31\nAdd Read Excel Files Activity\n0:35\nAdd Transform Activity using Javascript\n0:40\nAdd Round Numbers Activity\n0:46 Add Remove Duplicate Rows Activity\n0:52\nAdd Drop Columns Activity\n0:56\nAdd Rename Columns Activity\n1:01\nAdd Upload to Datasource Activity\n1:08\nExecute the Workflow and View Instance History'), 0.11111111), (Document(metadata={'_id': '2adcd9bd-c3f6-41e9-8c27-26f07adfbe4c', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='Add FTP Download Activity\n0:21\nConfigure FTP Download Activity\n0:31\nAdd Read Excel Files Activity\n0:35\nAdd Transform Activity using Javascript\n0:40\nAdd Round Numbers Activity\n0:46 Add Remove Duplicate Rows Activity\n0:52\nAdd Drop Columns Activity\n0:56\nAdd Rename Columns Activity\n1:01\nAdd Upload to Datasource Activity\n1:08\nExecute the Workflow and View Instance History'), 0.1), (Document(metadata={'_id': 'bfe3c285-ffc2-4551-a19c-a5900bdd0aa3', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='E\nEmailhook trigger The Emailhook trigger initiates a Workflow based on incoming emails. You can set up specific email addresses that serve as Emailhooks. This allows for  automated processing of email-based activities or notifications . This trigger is useful for Workflows that involve email notifications or processing of data received via email.'), 0.09090909)]
[ 2025-08-10 11:17:34,903 ] test_main.py:96 root - INFO - (Document(metadata={'_id': '2a6c9297-ff5a-4139-bb0d-e87f53ace134', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content="Upload transformed file to destination database\nSetup the 'Oracle' connection, specify tables, and map columns\nSetup automated workflow summary notification\nEnable 'Send Workflow Summary' for email notifications on automated workflow execution\nSchedule and monitor  workflows Schedule or setup 'Webhooks' and 'Emails' to trigger workflows\nDone"), 0.5)
[ 2025-08-10 11:17:34,986 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-10 11:17:34,987 ] test_main.py:104 root - INFO - [Record(id='2a6c9297-ff5a-4139-bb0d-e87f53ace134', payload={'url': 'https://infoveave-help.pages.dev/journey/automate-workflows/', 'title': 'automate-workflows', 'section': 'automation', 'terminologies': ['Connections', 'Data Transformation', 'Infoveave', 'Workflows'], 'char_count': 978, 'word_count': 139, 'page_content': "Upload transformed file to destination database\nSetup the 'Oracle' connection, specify tables, and map columns\nSetup automated workflow summary notification\nEnable 'Send Workflow Summary' for email notifications on automated workflow execution\nSchedule and monitor  workflows Schedule or setup 'Webhooks' and 'Emails' to trigger workflows\nDone", 'chunk_index': 2}, vector=None, shard_key=None, order_value=None)]
[ 2025-08-10 11:17:34,987 ] test_main.py:105 root - INFO - Retrieved result for point ID: 2a6c9297-ff5a-4139-bb0d-e87f53ace134
[ 2025-08-10 11:17:34,987 ] test_main.py:96 root - INFO - (Document(metadata={'_id': 'df9d15c4-2094-450f-95e6-162e03d5828a', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='Creating Infoboard Using A Query\nCreate Infoboard Using A Query\nCreating Infoboard Using API\nCreate Infoboard Using API\nCreating Workflow in Infoveave\nCreating Workflows\nWorkflow Execution Status\nWorkflow Execution Status'), 0.33333334)
[ 2025-08-10 11:17:35,066 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-10 11:17:35,067 ] test_main.py:104 root - INFO - [Record(id='df9d15c4-2094-450f-95e6-162e03d5828a', payload={'url': 'https://infoveave-help.pages.dev/videos/', 'title': 'videos', 'section': 'videos', 'terminologies': ['Automation', 'Catalogues', 'Conditional Expressions', 'Custom Calendar', 'Datasources', 'Dimensions', 'Infoboards', 'Infoveave', 'Insights', 'Lists', 'Measures', 'My Organization', 'My Workspace', 'Query', 'Reports', 'SciPyR', 'What-If Analysis', 'What-If Formulae', 'Workflows', 'Workflow Execution Status'], 'char_count': 2430, 'word_count': 338, 'page_content': 'Creating Infoboard Using A Query\nCreate Infoboard Using A Query\nCreating Infoboard Using API\nCreate Infoboard Using API\nCreating Workflow in Infoveave\nCreating Workflows\nWorkflow Execution Status\nWorkflow Execution Status', 'chunk_index': 3}, vector=None, shard_key=None, order_value=None)]
[ 2025-08-10 11:17:35,067 ] test_main.py:105 root - INFO - Retrieved result for point ID: df9d15c4-2094-450f-95e6-162e03d5828a
[ 2025-08-10 11:17:35,068 ] test_main.py:96 root - INFO - (Document(metadata={'_id': '323c1ea3-b288-44b0-8825-475a23907e9f', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='Workflow Designer\ncanvas.\nTo add alerts that send email notifications during the workflow, go to the\nAlerts\ntab in the\nWorkflow Setup panel\n.\nToggle\nEnable\nto turn the alert on or off. Select recipient email addresses from the user list. You can choose multiple recipients.\nWrite a custom alert message that is sent when the condition is met.\nWhen setting an execution time alert, toggle\nUse Absolute Time'), 0.25)
[ 2025-08-10 11:17:35,131 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-10 11:17:35,133 ] test_main.py:104 root - INFO - [Record(id='323c1ea3-b288-44b0-8825-475a23907e9f', payload={'url': 'https://infoveave-help.pages.dev/automation-v8/jobs-v8/create-new-job/', 'title': 'create-new-job', 'section': 'automation', 'terminologies': ['Alerts', 'Automation', 'Infoveave', 'Measures', 'Query', 'Query Report', 'Value', 'Variables', 'View', 'View', 'Workflows'], 'char_count': 4476, 'word_count': 722, 'page_content': 'Workflow Designer\ncanvas.\nTo add alerts that send email notifications during the workflow, go to the\nAlerts\ntab in the\nWorkflow Setup panel\n.\nToggle\nEnable\nto turn the alert on or off. Select recipient email addresses from the user list. You can choose multiple recipients.\nWrite a custom alert message that is sent when the condition is met.\nWhen setting an execution time alert, toggle\nUse Absolute Time', 'chunk_index': 4}, vector=None, shard_key=None, order_value=None)]
[ 2025-08-10 11:17:35,134 ] test_main.py:105 root - INFO - Retrieved result for point ID: 323c1ea3-b288-44b0-8825-475a23907e9f
[ 2025-08-10 11:17:35,134 ] test_main.py:96 root - INFO - (Document(metadata={'_id': '65e3aa33-13d7-4688-98fd-7b6a24cbf91e', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='Workflow Designer\ncanvas.\nTo add alerts that send email notifications during the workflow, go to the\nAlerts\ntab in the\nWorkflow Setup panel\n.\nToggle\nEnable\nto turn the alert on or off. Select recipient email addresses from the user list. You can choose multiple recipients.\nWrite a custom alert message that is sent when the condition is met.\nWhen setting an execution time alert, toggle\nUse Absolute Time'), 0.2)
[ 2025-08-10 11:17:35,206 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-10 11:17:35,207 ] test_main.py:104 root - INFO - [Record(id='65e3aa33-13d7-4688-98fd-7b6a24cbf91e', payload={'url': 'https://infoveave-help.pages.dev/automation-v8/workflows/define-workflow/', 'title': 'define-workflow', 'section': 'automation', 'terminologies': ['Alerts', 'Automation', 'Infoveave', 'Measures', 'Query', 'Query Report', 'Value', 'Variables', 'View', 'View', 'Workflows'], 'char_count': 4476, 'word_count': 722, 'page_content': 'Workflow Designer\ncanvas.\nTo add alerts that send email notifications during the workflow, go to the\nAlerts\ntab in the\nWorkflow Setup panel\n.\nToggle\nEnable\nto turn the alert on or off. Select recipient email addresses from the user list. You can choose multiple recipients.\nWrite a custom alert message that is sent when the condition is met.\nWhen setting an execution time alert, toggle\nUse Absolute Time', 'chunk_index': 4}, vector=None, shard_key=None, order_value=None)]
[ 2025-08-10 11:17:35,208 ] test_main.py:105 root - INFO - Retrieved result for point ID: 65e3aa33-13d7-4688-98fd-7b6a24cbf91e
[ 2025-08-10 11:17:35,208 ] test_main.py:96 root - INFO - (Document(metadata={'_id': '2027003d-7c4e-4b6d-acd3-b391a775ae9a', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='Workflow Alerts | Infoveave Help\nSkip to content\nWorkflow Alerts'), 0.16666667)
[ 2025-08-10 11:17:35,293 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-10 11:17:35,294 ] test_main.py:104 root - INFO - [Record(id='2027003d-7c4e-4b6d-acd3-b391a775ae9a', payload={'url': 'https://infoveave-help.pages.dev/automation-v8/workflows/define-workflow/workflow-alerts-2/', 'title': 'workflow-alerts-2', 'section': 'automation', 'terminologies': ['Alerts', 'Infoveave', 'Workflows', 'Workflow Alerts'], 'char_count': 3832, 'word_count': 620, 'page_content': 'Workflow Alerts | Infoveave Help\nSkip to content\nWorkflow Alerts', 'chunk_index': 0}, vector=None, shard_key=None, order_value=None)]
[ 2025-08-10 11:17:35,294 ] test_main.py:105 root - INFO - Retrieved result for point ID: 2027003d-7c4e-4b6d-acd3-b391a775ae9a
[ 2025-08-10 11:17:35,295 ] test_main.py:96 root - INFO - (Document(metadata={'_id': '81a7ef81-eb12-4bcd-ad2e-403f547e7e50', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='Choose the days on which you want to execute the Workflow. By default, Infoveave sets it to every day. You can select specific days of the week, days of the month, or months.\nClick on the\nAdd'), 0.14285715)
[ 2025-08-10 11:17:35,358 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-10 11:17:35,359 ] test_main.py:104 root - INFO - [Record(id='81a7ef81-eb12-4bcd-ad2e-403f547e7e50', payload={'url': 'https://infoveave-help.pages.dev/automation-v8/jobs-v8/schedule-job/', 'title': 'schedule-job', 'section': 'automation', 'terminologies': ['Automation', 'Cron trigger', 'Emailhook trigger', 'Infoveave', 'Lists', 'Reports', 'Value', 'View', 'View', 'Webhook trigger', 'Workflows', 'Workflow Start trigger'], 'char_count': 5699, 'word_count': 937, 'page_content': 'Choose the days on which you want to execute the Workflow. By default, Infoveave sets it to every day. You can select specific days of the week, days of the month, or months.\nClick on the\nAdd', 'chunk_index': 5}, vector=None, shard_key=None, order_value=None)]
[ 2025-08-10 11:17:35,359 ] test_main.py:105 root - INFO - Retrieved result for point ID: 81a7ef81-eb12-4bcd-ad2e-403f547e7e50
[ 2025-08-10 11:17:35,359 ] test_main.py:96 root - INFO - (Document(metadata={'_id': '3989b1ef-a79d-4b1d-bce6-79cb5969aa26', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='Choose the days on which you want to execute the Workflow. By default, Infoveave sets it to every day. You can select specific days of the week, days of the month, or months.\nClick on the\nAdd'), 0.125)
[ 2025-08-10 11:17:35,420 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-10 11:17:35,421 ] test_main.py:104 root - INFO - [Record(id='3989b1ef-a79d-4b1d-bce6-79cb5969aa26', payload={'url': 'https://infoveave-help.pages.dev/automation-v8/workflows/define-workflow/workflow-start/', 'title': 'workflow-start', 'section': 'automation', 'terminologies': ['Automation', 'Cron trigger', 'Emailhook trigger', 'Infoveave', 'Lists', 'Reports', 'Value', 'View', 'View', 'Webhook trigger', 'Workflows', 'Workflow Start trigger'], 'char_count': 5699, 'word_count': 937, 'page_content': 'Choose the days on which you want to execute the Workflow. By default, Infoveave sets it to every day. You can select specific days of the week, days of the month, or months.\nClick on the\nAdd', 'chunk_index': 5}, vector=None, shard_key=None, order_value=None)]
[ 2025-08-10 11:17:35,421 ] test_main.py:105 root - INFO - Retrieved result for point ID: 3989b1ef-a79d-4b1d-bce6-79cb5969aa26
[ 2025-08-10 11:17:35,421 ] test_main.py:96 root - INFO - (Document(metadata={'_id': '3fd7ab5c-2d29-41ea-9ed7-0684f87b08e1', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='Add FTP Download Activity\n0:21\nConfigure FTP Download Activity\n0:31\nAdd Read Excel Files Activity\n0:35\nAdd Transform Activity using Javascript\n0:40\nAdd Round Numbers Activity\n0:46 Add Remove Duplicate Rows Activity\n0:52\nAdd Drop Columns Activity\n0:56\nAdd Rename Columns Activity\n1:01\nAdd Upload to Datasource Activity\n1:08\nExecute the Workflow and View Instance History'), 0.11111111)
[ 2025-08-10 11:17:35,487 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-10 11:17:35,488 ] test_main.py:104 root - INFO - [Record(id='3fd7ab5c-2d29-41ea-9ed7-0684f87b08e1', payload={'url': 'https://infoveave-help.pages.dev/automation-v8/jobs-v8/create-new-job/', 'title': 'create-new-job', 'section': 'automation', 'terminologies': ['Alerts', 'Automation', 'Infoveave', 'Measures', 'Query', 'Query Report', 'Value', 'Variables', 'View', 'View', 'Workflows'], 'char_count': 4476, 'word_count': 722, 'page_content': 'Add FTP Download Activity\n0:21\nConfigure FTP Download Activity\n0:31\nAdd Read Excel Files Activity\n0:35\nAdd Transform Activity using Javascript\n0:40\nAdd Round Numbers Activity\n0:46 Add Remove Duplicate Rows Activity\n0:52\nAdd Drop Columns Activity\n0:56\nAdd Rename Columns Activity\n1:01\nAdd Upload to Datasource Activity\n1:08\nExecute the Workflow and View Instance History', 'chunk_index': 1}, vector=None, shard_key=None, order_value=None)]
[ 2025-08-10 11:17:35,488 ] test_main.py:105 root - INFO - Retrieved result for point ID: 3fd7ab5c-2d29-41ea-9ed7-0684f87b08e1
[ 2025-08-10 11:17:35,488 ] test_main.py:96 root - INFO - (Document(metadata={'_id': '2adcd9bd-c3f6-41e9-8c27-26f07adfbe4c', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='Add FTP Download Activity\n0:21\nConfigure FTP Download Activity\n0:31\nAdd Read Excel Files Activity\n0:35\nAdd Transform Activity using Javascript\n0:40\nAdd Round Numbers Activity\n0:46 Add Remove Duplicate Rows Activity\n0:52\nAdd Drop Columns Activity\n0:56\nAdd Rename Columns Activity\n1:01\nAdd Upload to Datasource Activity\n1:08\nExecute the Workflow and View Instance History'), 0.1)
[ 2025-08-10 11:17:35,547 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-10 11:17:35,548 ] test_main.py:104 root - INFO - [Record(id='2adcd9bd-c3f6-41e9-8c27-26f07adfbe4c', payload={'url': 'https://infoveave-help.pages.dev/automation-v8/workflows/define-workflow/', 'title': 'define-workflow', 'section': 'automation', 'terminologies': ['Alerts', 'Automation', 'Infoveave', 'Measures', 'Query', 'Query Report', 'Value', 'Variables', 'View', 'View', 'Workflows'], 'char_count': 4476, 'word_count': 722, 'page_content': 'Add FTP Download Activity\n0:21\nConfigure FTP Download Activity\n0:31\nAdd Read Excel Files Activity\n0:35\nAdd Transform Activity using Javascript\n0:40\nAdd Round Numbers Activity\n0:46 Add Remove Duplicate Rows Activity\n0:52\nAdd Drop Columns Activity\n0:56\nAdd Rename Columns Activity\n1:01\nAdd Upload to Datasource Activity\n1:08\nExecute the Workflow and View Instance History', 'chunk_index': 1}, vector=None, shard_key=None, order_value=None)]
[ 2025-08-10 11:17:35,548 ] test_main.py:105 root - INFO - Retrieved result for point ID: 2adcd9bd-c3f6-41e9-8c27-26f07adfbe4c
[ 2025-08-10 11:17:35,548 ] test_main.py:96 root - INFO - (Document(metadata={'_id': 'bfe3c285-ffc2-4551-a19c-a5900bdd0aa3', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='E\nEmailhook trigger The Emailhook trigger initiates a Workflow based on incoming emails. You can set up specific email addresses that serve as Emailhooks. This allows for  automated processing of email-based activities or notifications . This trigger is useful for Workflows that involve email notifications or processing of data received via email.'), 0.09090909)
[ 2025-08-10 11:17:35,604 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-10 11:17:35,646 ] test_main.py:104 root - INFO - [Record(id='bfe3c285-ffc2-4551-a19c-a5900bdd0aa3', payload={'url': 'https://infoveave-help.pages.dev/introduction-to-infoveave/infoveave-terminologies/', 'title': 'infoveave-terminologies', 'section': 'introduction-to-infoveave', 'terminologies': ['Address Book', 'Alerts', 'Audit Log', 'Automation', 'Business Analysis', 'Calculated Columns', 'Calculated Measures', 'Catalogues', 'Client', 'Color Palette', 'Common Dimension filters', 'Component Panel', 'Component', 'Conditional Expressions', 'Connections', 'Control Centre', 'Creator', 'Cron trigger', 'Cube Designer', 'Custom Calendar', 'Custom Email', 'Database Connections', 'Datasources', 'Data Governance', 'Data Ingestion', 'Data Transformation', 'Data Visualization', 'Date Range Filter', 'Designer Canvas', 'Designer Layout', 'Dimensions', 'Domains', 'Emailhook trigger', 'Expression', 'Fixed Filters', 'Grid Layout', 'Hierarchies', 'Holiday Calendar', 'Infoboards', 'Infoboard Setup', 'Infoboard statistics', 'Infoveave', 'Infoveave menu', 'Insights', 'Lists', 'Linked Reports', 'Login statistics', 'Measures', 'ML Analysis', 'ML Model', 'My Organization', 'My Workspace', 'NGuage Forms', 'Query', 'Query Builder', 'Query Report', 'Reports', 'Retention Settings', 'Roles', 'SciPyR', 'Server Statistics', 'SMTP Settings', 'Statistical Analysis', 'Tags', 'Targets and Thresholds', 'Template Reports', 'Tenant', 'Tiers', 'Trash', 'Value', 'Variables', 'Version history', 'View', 'View', 'Viewer', 'Webhook trigger', 'What-If Analysis', 'What-If Formulae', 'Widget Configuration', 'Widget Customization', 'Widget statistics', 'Workflows', 'Workflow Alerts', 'Workflow Execution Status', 'Workflow Start trigger', 'Workflow Variables'], 'char_count': 25220, 'word_count': 3773, 'page_content': 'E\nEmailhook trigger The Emailhook trigger initiates a Workflow based on incoming emails. You can set up specific email addresses that serve as Emailhooks. This allows for  automated processing of email-based activities or notifications . This trigger is useful for Workflows that involve email notifications or processing of data received via email.', 'chunk_index': 13}, vector=None, shard_key=None, order_value=None)]
[ 2025-08-10 11:17:35,646 ] test_main.py:105 root - INFO - Retrieved result for point ID: bfe3c285-ffc2-4551-a19c-a5900bdd0aa3
[ 2025-08-10 11:17:35,647 ] test_main.py:324 root - INFO - Found 161 final documents.
[ 2025-08-10 11:17:35,647 ] test_main.py:371 root - INFO - Context prepared for LLM response.
[ 2025-08-10 11:17:35,648 ] test_main.py:417 root - INFO - Single query part response:

[ 2025-08-10 11:17:35,648 ] test_main.py:418 root - INFO - Let's craft a workflow to fetch data from your Oracle database and deliver it as an email report. 

Here's a breakdown of the steps involved:

1. **Execute Query:** You'll need to use the `Execute Query` activity to connect to your Oracle database and run your desired SQL query.  

   *  **Database Connection:**  Make sure you configure the `Execute Query` activity with the correct connection details for your Oracle database (hostname, port, username, password, and database name).

   * **SQL Query:**  Input your SQL query into the `Execute Query` activity. This query should select the specific data you want to include in your report.

2. **Format the Data:**  The `Execute Query` activity will return the query results as a dataset. You might need to use other activities to format this data into a presentable structure for your email report.

   * **Pivot Columns:** If you need to restructure your data, consider using the `Pivot Columns` activity to rearrange it into a more suitable format.

   * **Transform using Javascript:** You can leverage the `Transform using Javascript` activity to apply custom formatting, calculations, or manipulations to your data.

3. **Generate the Report:**  Now that your data is formatted, you can generate the report itself.

   * **Download Report:** The `Download Report` activity can create a report in various formats (e.g., PDF, CSV, Excel) based on your chosen data structure.

4. **Send the Email:** Finally, use the `Send Email` activity to deliver the report to the intended recipients.

   * **Email Configuration:**  Set up the `Send Email` activity with the recipient's email address, subject line, and body content.

   * **Attach the Report:**  Attach the generated report file to the email using the `Download Report` activity's output.

**Remember:**

*  You'll need to configure each activity with the appropriate settings and inputs based on your specific database connection, query, and reporting requirements.
*  Refer to the Infoveave documentation for detailed instructions on each activity and its parameters.



Let me know if you have any more questions or need help with specific aspects of the workflow!
[ 2025-08-10 11:22:02,231 ] test_main.py:148 root - INFO - .........................Starting Infoverve Helper Application.........................
[ 2025-08-10 11:22:02,231 ] test_main.py:164 root - INFO - GROQ_API_KEY loaded.
[ 2025-08-10 11:22:02,239 ] test_main.py:188 root - INFO - Embedding model initialized.
[ 2025-08-10 11:22:02,453 ] _client.py:1025 httpx - INFO - HTTP Request: GET http://ai.infoveave.cloud:6333 "HTTP/1.1 200 OK"
[ 2025-08-10 11:22:02,456 ] test_main.py:192 root - INFO - Connected to Qdrant.
[ 2025-08-10 11:22:02,563 ] _client.py:1025 httpx - INFO - HTTP Request: GET http://ai.infoveave.cloud:6333/collections "HTTP/1.1 200 OK"
[ 2025-08-10 11:22:02,564 ] test_main.py:196 root - INFO - Qdrant collections retrieved.
[ 2025-08-10 11:22:02,565 ] test_main.py:203 root - INFO - Using collection: infoverve_helper_docs_hybrid
[ 2025-08-10 11:22:03,902 ] test_main.py:206 root - INFO - Sparse embeddings initialized.
[ 2025-08-10 11:22:03,995 ] _client.py:1025 httpx - INFO - HTTP Request: GET http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid "HTTP/1.1 200 OK"
[ 2025-08-10 11:22:06,200 ] _client.py:1025 httpx - INFO - HTTP Request: GET http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid "HTTP/1.1 200 OK"
[ 2025-08-10 11:22:06,201 ] test_main.py:218 root - INFO - QdrantVectorStore initialized.
[ 2025-08-10 11:22:06,237 ] test_main.py:224 root - INFO - LLM initialized.
[ 2025-08-10 11:22:07,194 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points/query "HTTP/1.1 200 OK"
[ 2025-08-10 11:22:07,974 ] test_main.py:246 root - INFO - Original query embedding generated.
[ 2025-08-10 11:22:07,996 ] test_main.py:96 root - INFO - (Document(metadata={'_id': '2a6c9297-ff5a-4139-bb0d-e87f53ace134', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content="Upload transformed file to destination database\nSetup the 'Oracle' connection, specify tables, and map columns\nSetup automated workflow summary notification\nEnable 'Send Workflow Summary' for email notifications on automated workflow execution\nSchedule and monitor  workflows Schedule or setup 'Webhooks' and 'Emails' to trigger workflows\nDone"), 0.5)
[ 2025-08-10 11:22:08,075 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-10 11:22:08,075 ] test_main.py:104 root - INFO - [Record(id='2a6c9297-ff5a-4139-bb0d-e87f53ace134', payload={'url': 'https://infoveave-help.pages.dev/journey/automate-workflows/', 'title': 'automate-workflows', 'section': 'automation', 'terminologies': ['Connections', 'Data Transformation', 'Infoveave', 'Workflows'], 'char_count': 978, 'word_count': 139, 'page_content': "Upload transformed file to destination database\nSetup the 'Oracle' connection, specify tables, and map columns\nSetup automated workflow summary notification\nEnable 'Send Workflow Summary' for email notifications on automated workflow execution\nSchedule and monitor  workflows Schedule or setup 'Webhooks' and 'Emails' to trigger workflows\nDone", 'chunk_index': 2}, vector=None, shard_key=None, order_value=None)]
[ 2025-08-10 11:22:08,076 ] test_main.py:105 root - INFO - Retrieved result for point ID: 2a6c9297-ff5a-4139-bb0d-e87f53ace134
[ 2025-08-10 11:22:08,076 ] test_main.py:90 root - ERROR - Error during query rewriting: name 'context' is not defined
[ 2025-08-10 11:22:08,076 ] test_main.py:251 root - INFO - Rewritten query: Need to create a workflow, to run a query from oracle DB and send the query response as a report through Email
[ 2025-08-10 11:22:08,076 ] test_main.py:258 root - INFO - Rewritten query parts: ['Need to create a workflow, to run a query from oracle DB and send the query response as a report through Email']
[ 2025-08-10 11:22:08,076 ] test_main.py:267 root - INFO - Rewritten Query 1: Need to create a workflow, to run a query from oracle DB and send the query response as a report through Email
[ 2025-08-10 11:22:08,914 ] test_main.py:270 root - INFO - Embedding generated for query 1.
[ 2025-08-10 11:22:09,777 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points/query "HTTP/1.1 200 OK"
[ 2025-08-10 11:22:09,783 ] test_main.py:282 root - INFO - Processing query part 1: Need to create a workflow, to run a query from oracle DB and send the query response as a report through Email
[ 2025-08-10 11:22:09,805 ] test_main.py:96 root - INFO - (Document(metadata={'_id': '2a6c9297-ff5a-4139-bb0d-e87f53ace134', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content="Upload transformed file to destination database\nSetup the 'Oracle' connection, specify tables, and map columns\nSetup automated workflow summary notification\nEnable 'Send Workflow Summary' for email notifications on automated workflow execution\nSchedule and monitor  workflows Schedule or setup 'Webhooks' and 'Emails' to trigger workflows\nDone"), 0.5)
[ 2025-08-10 11:22:09,853 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-10 11:22:09,854 ] test_main.py:104 root - INFO - [Record(id='2a6c9297-ff5a-4139-bb0d-e87f53ace134', payload={'url': 'https://infoveave-help.pages.dev/journey/automate-workflows/', 'title': 'automate-workflows', 'section': 'automation', 'terminologies': ['Connections', 'Data Transformation', 'Infoveave', 'Workflows'], 'char_count': 978, 'word_count': 139, 'page_content': "Upload transformed file to destination database\nSetup the 'Oracle' connection, specify tables, and map columns\nSetup automated workflow summary notification\nEnable 'Send Workflow Summary' for email notifications on automated workflow execution\nSchedule and monitor  workflows Schedule or setup 'Webhooks' and 'Emails' to trigger workflows\nDone", 'chunk_index': 2}, vector=None, shard_key=None, order_value=None)]
[ 2025-08-10 11:22:09,854 ] test_main.py:105 root - INFO - Retrieved result for point ID: 2a6c9297-ff5a-4139-bb0d-e87f53ace134
[ 2025-08-10 11:22:09,854 ] test_main.py:96 root - INFO - (Document(metadata={'_id': 'df9d15c4-2094-450f-95e6-162e03d5828a', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='Creating Infoboard Using A Query\nCreate Infoboard Using A Query\nCreating Infoboard Using API\nCreate Infoboard Using API\nCreating Workflow in Infoveave\nCreating Workflows\nWorkflow Execution Status\nWorkflow Execution Status'), 0.33333334)
[ 2025-08-10 11:22:09,906 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-10 11:22:09,907 ] test_main.py:104 root - INFO - [Record(id='df9d15c4-2094-450f-95e6-162e03d5828a', payload={'url': 'https://infoveave-help.pages.dev/videos/', 'title': 'videos', 'section': 'videos', 'terminologies': ['Automation', 'Catalogues', 'Conditional Expressions', 'Custom Calendar', 'Datasources', 'Dimensions', 'Infoboards', 'Infoveave', 'Insights', 'Lists', 'Measures', 'My Organization', 'My Workspace', 'Query', 'Reports', 'SciPyR', 'What-If Analysis', 'What-If Formulae', 'Workflows', 'Workflow Execution Status'], 'char_count': 2430, 'word_count': 338, 'page_content': 'Creating Infoboard Using A Query\nCreate Infoboard Using A Query\nCreating Infoboard Using API\nCreate Infoboard Using API\nCreating Workflow in Infoveave\nCreating Workflows\nWorkflow Execution Status\nWorkflow Execution Status', 'chunk_index': 3}, vector=None, shard_key=None, order_value=None)]
[ 2025-08-10 11:22:09,908 ] test_main.py:105 root - INFO - Retrieved result for point ID: df9d15c4-2094-450f-95e6-162e03d5828a
[ 2025-08-10 11:22:09,908 ] test_main.py:96 root - INFO - (Document(metadata={'_id': '323c1ea3-b288-44b0-8825-475a23907e9f', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='Workflow Designer\ncanvas.\nTo add alerts that send email notifications during the workflow, go to the\nAlerts\ntab in the\nWorkflow Setup panel\n.\nToggle\nEnable\nto turn the alert on or off. Select recipient email addresses from the user list. You can choose multiple recipients.\nWrite a custom alert message that is sent when the condition is met.\nWhen setting an execution time alert, toggle\nUse Absolute Time'), 0.25)
[ 2025-08-10 11:22:09,967 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-10 11:22:09,968 ] test_main.py:104 root - INFO - [Record(id='323c1ea3-b288-44b0-8825-475a23907e9f', payload={'url': 'https://infoveave-help.pages.dev/automation-v8/jobs-v8/create-new-job/', 'title': 'create-new-job', 'section': 'automation', 'terminologies': ['Alerts', 'Automation', 'Infoveave', 'Measures', 'Query', 'Query Report', 'Value', 'Variables', 'View', 'View', 'Workflows'], 'char_count': 4476, 'word_count': 722, 'page_content': 'Workflow Designer\ncanvas.\nTo add alerts that send email notifications during the workflow, go to the\nAlerts\ntab in the\nWorkflow Setup panel\n.\nToggle\nEnable\nto turn the alert on or off. Select recipient email addresses from the user list. You can choose multiple recipients.\nWrite a custom alert message that is sent when the condition is met.\nWhen setting an execution time alert, toggle\nUse Absolute Time', 'chunk_index': 4}, vector=None, shard_key=None, order_value=None)]
[ 2025-08-10 11:22:09,968 ] test_main.py:105 root - INFO - Retrieved result for point ID: 323c1ea3-b288-44b0-8825-475a23907e9f
[ 2025-08-10 11:22:09,968 ] test_main.py:96 root - INFO - (Document(metadata={'_id': '65e3aa33-13d7-4688-98fd-7b6a24cbf91e', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='Workflow Designer\ncanvas.\nTo add alerts that send email notifications during the workflow, go to the\nAlerts\ntab in the\nWorkflow Setup panel\n.\nToggle\nEnable\nto turn the alert on or off. Select recipient email addresses from the user list. You can choose multiple recipients.\nWrite a custom alert message that is sent when the condition is met.\nWhen setting an execution time alert, toggle\nUse Absolute Time'), 0.2)
[ 2025-08-10 11:22:10,027 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-10 11:22:10,028 ] test_main.py:104 root - INFO - [Record(id='65e3aa33-13d7-4688-98fd-7b6a24cbf91e', payload={'url': 'https://infoveave-help.pages.dev/automation-v8/workflows/define-workflow/', 'title': 'define-workflow', 'section': 'automation', 'terminologies': ['Alerts', 'Automation', 'Infoveave', 'Measures', 'Query', 'Query Report', 'Value', 'Variables', 'View', 'View', 'Workflows'], 'char_count': 4476, 'word_count': 722, 'page_content': 'Workflow Designer\ncanvas.\nTo add alerts that send email notifications during the workflow, go to the\nAlerts\ntab in the\nWorkflow Setup panel\n.\nToggle\nEnable\nto turn the alert on or off. Select recipient email addresses from the user list. You can choose multiple recipients.\nWrite a custom alert message that is sent when the condition is met.\nWhen setting an execution time alert, toggle\nUse Absolute Time', 'chunk_index': 4}, vector=None, shard_key=None, order_value=None)]
[ 2025-08-10 11:22:10,028 ] test_main.py:105 root - INFO - Retrieved result for point ID: 65e3aa33-13d7-4688-98fd-7b6a24cbf91e
[ 2025-08-10 11:22:10,028 ] test_main.py:96 root - INFO - (Document(metadata={'_id': '2027003d-7c4e-4b6d-acd3-b391a775ae9a', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='Workflow Alerts | Infoveave Help\nSkip to content\nWorkflow Alerts'), 0.16666667)
[ 2025-08-10 11:22:10,091 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-10 11:22:10,092 ] test_main.py:104 root - INFO - [Record(id='2027003d-7c4e-4b6d-acd3-b391a775ae9a', payload={'url': 'https://infoveave-help.pages.dev/automation-v8/workflows/define-workflow/workflow-alerts-2/', 'title': 'workflow-alerts-2', 'section': 'automation', 'terminologies': ['Alerts', 'Infoveave', 'Workflows', 'Workflow Alerts'], 'char_count': 3832, 'word_count': 620, 'page_content': 'Workflow Alerts | Infoveave Help\nSkip to content\nWorkflow Alerts', 'chunk_index': 0}, vector=None, shard_key=None, order_value=None)]
[ 2025-08-10 11:22:10,092 ] test_main.py:105 root - INFO - Retrieved result for point ID: 2027003d-7c4e-4b6d-acd3-b391a775ae9a
[ 2025-08-10 11:22:10,092 ] test_main.py:96 root - INFO - (Document(metadata={'_id': '81a7ef81-eb12-4bcd-ad2e-403f547e7e50', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='Choose the days on which you want to execute the Workflow. By default, Infoveave sets it to every day. You can select specific days of the week, days of the month, or months.\nClick on the\nAdd'), 0.14285715)
[ 2025-08-10 11:22:10,157 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-10 11:22:10,158 ] test_main.py:104 root - INFO - [Record(id='81a7ef81-eb12-4bcd-ad2e-403f547e7e50', payload={'url': 'https://infoveave-help.pages.dev/automation-v8/jobs-v8/schedule-job/', 'title': 'schedule-job', 'section': 'automation', 'terminologies': ['Automation', 'Cron trigger', 'Emailhook trigger', 'Infoveave', 'Lists', 'Reports', 'Value', 'View', 'View', 'Webhook trigger', 'Workflows', 'Workflow Start trigger'], 'char_count': 5699, 'word_count': 937, 'page_content': 'Choose the days on which you want to execute the Workflow. By default, Infoveave sets it to every day. You can select specific days of the week, days of the month, or months.\nClick on the\nAdd', 'chunk_index': 5}, vector=None, shard_key=None, order_value=None)]
[ 2025-08-10 11:22:10,159 ] test_main.py:105 root - INFO - Retrieved result for point ID: 81a7ef81-eb12-4bcd-ad2e-403f547e7e50
[ 2025-08-10 11:22:10,159 ] test_main.py:96 root - INFO - (Document(metadata={'_id': '3989b1ef-a79d-4b1d-bce6-79cb5969aa26', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='Choose the days on which you want to execute the Workflow. By default, Infoveave sets it to every day. You can select specific days of the week, days of the month, or months.\nClick on the\nAdd'), 0.125)
[ 2025-08-10 11:22:10,228 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-10 11:22:10,229 ] test_main.py:104 root - INFO - [Record(id='3989b1ef-a79d-4b1d-bce6-79cb5969aa26', payload={'url': 'https://infoveave-help.pages.dev/automation-v8/workflows/define-workflow/workflow-start/', 'title': 'workflow-start', 'section': 'automation', 'terminologies': ['Automation', 'Cron trigger', 'Emailhook trigger', 'Infoveave', 'Lists', 'Reports', 'Value', 'View', 'View', 'Webhook trigger', 'Workflows', 'Workflow Start trigger'], 'char_count': 5699, 'word_count': 937, 'page_content': 'Choose the days on which you want to execute the Workflow. By default, Infoveave sets it to every day. You can select specific days of the week, days of the month, or months.\nClick on the\nAdd', 'chunk_index': 5}, vector=None, shard_key=None, order_value=None)]
[ 2025-08-10 11:22:10,230 ] test_main.py:105 root - INFO - Retrieved result for point ID: 3989b1ef-a79d-4b1d-bce6-79cb5969aa26
[ 2025-08-10 11:22:10,230 ] test_main.py:96 root - INFO - (Document(metadata={'_id': '3fd7ab5c-2d29-41ea-9ed7-0684f87b08e1', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='Add FTP Download Activity\n0:21\nConfigure FTP Download Activity\n0:31\nAdd Read Excel Files Activity\n0:35\nAdd Transform Activity using Javascript\n0:40\nAdd Round Numbers Activity\n0:46 Add Remove Duplicate Rows Activity\n0:52\nAdd Drop Columns Activity\n0:56\nAdd Rename Columns Activity\n1:01\nAdd Upload to Datasource Activity\n1:08\nExecute the Workflow and View Instance History'), 0.11111111)
[ 2025-08-10 11:22:10,293 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-10 11:22:10,294 ] test_main.py:104 root - INFO - [Record(id='3fd7ab5c-2d29-41ea-9ed7-0684f87b08e1', payload={'url': 'https://infoveave-help.pages.dev/automation-v8/jobs-v8/create-new-job/', 'title': 'create-new-job', 'section': 'automation', 'terminologies': ['Alerts', 'Automation', 'Infoveave', 'Measures', 'Query', 'Query Report', 'Value', 'Variables', 'View', 'View', 'Workflows'], 'char_count': 4476, 'word_count': 722, 'page_content': 'Add FTP Download Activity\n0:21\nConfigure FTP Download Activity\n0:31\nAdd Read Excel Files Activity\n0:35\nAdd Transform Activity using Javascript\n0:40\nAdd Round Numbers Activity\n0:46 Add Remove Duplicate Rows Activity\n0:52\nAdd Drop Columns Activity\n0:56\nAdd Rename Columns Activity\n1:01\nAdd Upload to Datasource Activity\n1:08\nExecute the Workflow and View Instance History', 'chunk_index': 1}, vector=None, shard_key=None, order_value=None)]
[ 2025-08-10 11:22:10,294 ] test_main.py:105 root - INFO - Retrieved result for point ID: 3fd7ab5c-2d29-41ea-9ed7-0684f87b08e1
[ 2025-08-10 11:22:10,294 ] test_main.py:96 root - INFO - (Document(metadata={'_id': '2adcd9bd-c3f6-41e9-8c27-26f07adfbe4c', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='Add FTP Download Activity\n0:21\nConfigure FTP Download Activity\n0:31\nAdd Read Excel Files Activity\n0:35\nAdd Transform Activity using Javascript\n0:40\nAdd Round Numbers Activity\n0:46 Add Remove Duplicate Rows Activity\n0:52\nAdd Drop Columns Activity\n0:56\nAdd Rename Columns Activity\n1:01\nAdd Upload to Datasource Activity\n1:08\nExecute the Workflow and View Instance History'), 0.1)
[ 2025-08-10 11:22:10,352 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-10 11:22:10,354 ] test_main.py:104 root - INFO - [Record(id='2adcd9bd-c3f6-41e9-8c27-26f07adfbe4c', payload={'url': 'https://infoveave-help.pages.dev/automation-v8/workflows/define-workflow/', 'title': 'define-workflow', 'section': 'automation', 'terminologies': ['Alerts', 'Automation', 'Infoveave', 'Measures', 'Query', 'Query Report', 'Value', 'Variables', 'View', 'View', 'Workflows'], 'char_count': 4476, 'word_count': 722, 'page_content': 'Add FTP Download Activity\n0:21\nConfigure FTP Download Activity\n0:31\nAdd Read Excel Files Activity\n0:35\nAdd Transform Activity using Javascript\n0:40\nAdd Round Numbers Activity\n0:46 Add Remove Duplicate Rows Activity\n0:52\nAdd Drop Columns Activity\n0:56\nAdd Rename Columns Activity\n1:01\nAdd Upload to Datasource Activity\n1:08\nExecute the Workflow and View Instance History', 'chunk_index': 1}, vector=None, shard_key=None, order_value=None)]
[ 2025-08-10 11:22:10,354 ] test_main.py:105 root - INFO - Retrieved result for point ID: 2adcd9bd-c3f6-41e9-8c27-26f07adfbe4c
[ 2025-08-10 11:22:10,354 ] test_main.py:96 root - INFO - (Document(metadata={'_id': 'bfe3c285-ffc2-4551-a19c-a5900bdd0aa3', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='E\nEmailhook trigger The Emailhook trigger initiates a Workflow based on incoming emails. You can set up specific email addresses that serve as Emailhooks. This allows for  automated processing of email-based activities or notifications . This trigger is useful for Workflows that involve email notifications or processing of data received via email.'), 0.09090909)
[ 2025-08-10 11:22:10,428 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-10 11:22:10,429 ] test_main.py:104 root - INFO - [Record(id='bfe3c285-ffc2-4551-a19c-a5900bdd0aa3', payload={'url': 'https://infoveave-help.pages.dev/introduction-to-infoveave/infoveave-terminologies/', 'title': 'infoveave-terminologies', 'section': 'introduction-to-infoveave', 'terminologies': ['Address Book', 'Alerts', 'Audit Log', 'Automation', 'Business Analysis', 'Calculated Columns', 'Calculated Measures', 'Catalogues', 'Client', 'Color Palette', 'Common Dimension filters', 'Component Panel', 'Component', 'Conditional Expressions', 'Connections', 'Control Centre', 'Creator', 'Cron trigger', 'Cube Designer', 'Custom Calendar', 'Custom Email', 'Database Connections', 'Datasources', 'Data Governance', 'Data Ingestion', 'Data Transformation', 'Data Visualization', 'Date Range Filter', 'Designer Canvas', 'Designer Layout', 'Dimensions', 'Domains', 'Emailhook trigger', 'Expression', 'Fixed Filters', 'Grid Layout', 'Hierarchies', 'Holiday Calendar', 'Infoboards', 'Infoboard Setup', 'Infoboard statistics', 'Infoveave', 'Infoveave menu', 'Insights', 'Lists', 'Linked Reports', 'Login statistics', 'Measures', 'ML Analysis', 'ML Model', 'My Organization', 'My Workspace', 'NGuage Forms', 'Query', 'Query Builder', 'Query Report', 'Reports', 'Retention Settings', 'Roles', 'SciPyR', 'Server Statistics', 'SMTP Settings', 'Statistical Analysis', 'Tags', 'Targets and Thresholds', 'Template Reports', 'Tenant', 'Tiers', 'Trash', 'Value', 'Variables', 'Version history', 'View', 'View', 'Viewer', 'Webhook trigger', 'What-If Analysis', 'What-If Formulae', 'Widget Configuration', 'Widget Customization', 'Widget statistics', 'Workflows', 'Workflow Alerts', 'Workflow Execution Status', 'Workflow Start trigger', 'Workflow Variables'], 'char_count': 25220, 'word_count': 3773, 'page_content': 'E\nEmailhook trigger The Emailhook trigger initiates a Workflow based on incoming emails. You can set up specific email addresses that serve as Emailhooks. This allows for  automated processing of email-based activities or notifications . This trigger is useful for Workflows that involve email notifications or processing of data received via email.', 'chunk_index': 13}, vector=None, shard_key=None, order_value=None)]
[ 2025-08-10 11:22:10,430 ] test_main.py:105 root - INFO - Retrieved result for point ID: bfe3c285-ffc2-4551-a19c-a5900bdd0aa3
[ 2025-08-10 11:22:10,430 ] test_main.py:118 root - INFO - ['page_content', 'url', 'title', 'section', 'terminologies', 'char_count', 'word_count', 'chunk_index', 'page_content', 'url', 'title', 'section', 'terminologies', 'char_count', 'word_count', 'chunk_index', 'page_content', 'url', 'title', 'section', 'terminologies', 'char_count', 'word_count', 'chunk_index', 'page_content', 'url', 'title', 'section', 'terminologies', 'char_count', 'word_count', 'chunk_index', 'page_content', 'url', 'title', 'section', 'terminologies', 'char_count', 'word_count', 'chunk_index', 'page_content', 'url', 'title', 'section', 'terminologies', 'char_count', 'word_count', 'chunk_index', 'page_content', 'url', 'title', 'section', 'terminologies', 'char_count', 'word_count', 'chunk_index', 'page_content', 'url', 'title', 'section', 'terminologies', 'char_count', 'word_count', 'chunk_index', 'page_content', 'url', 'title', 'section', 'terminologies', 'char_count', 'word_count', 'chunk_index', 'page_content', 'url', 'title', 'section', 'terminologies', 'char_count', 'word_count', 'chunk_index']
[ 2025-08-10 11:22:10,430 ] test_main.py:137 root - INFO - Loaded rewritten query user prompt.
[ 2025-08-10 11:22:12,129 ] _client.py:1025 httpx - INFO - HTTP Request: POST https://api.groq.com/openai/v1/chat/completions "HTTP/1.1 200 OK"
[ 2025-08-10 11:22:12,133 ] test_main.py:285 root - INFO - Response for query part 1: Let's craft a workflow to fetch data from your Oracle database and deliver it as an email report. 

Here's a breakdown of the steps involved:

1. **Execute Query:** You'll need to use the "Execute Query" activity to connect to your Oracle database and run your desired SQL query.  

   *  **Database Connection:**  Make sure you configure the "Execute Query" activity with the correct connection details for your Oracle database, including the hostname, port, username, and password.
   * **SQL Query:**  Input your SQL query into the "Query" field of the activity. This query should select the data you want to include in your report.

2. **Format the Data:**  The "Execute Query" activity will return the query results as a dataset. You might need to use other activities to format this data into a presentable structure for your email report.

   * **Pivot Columns:** If you need to restructure your data, consider using the "Pivot Columns" activity to rearrange the data into a more suitable format.
   * **Transform using Javascript:** You can leverage the "Transform using Javascript" activity to apply custom formatting or calculations to your data.

3. **Generate the Report:**  Now that your data is formatted, you can generate the report itself.

   * **Write to File:**  Use the "Write to File" activity to save the formatted data as a file (e.g., CSV, Excel, or HTML). This file will serve as the content of your email report.

4. **Send the Email:** Finally, use the "Send Email" activity to deliver the report.

   * **Recipient:** Specify the email address(es) of the recipients.
   * **Subject:**  Craft a clear and concise subject line for your email.
   * **Body:**  You can include a simple message in the email body, or you can use the "Write to File" output to directly attach the report file to the email.

**Remember:**

*  **Error Handling:**  It's crucial to include error handling in your workflow to gracefully manage any issues that might arise during the process.
* **Security:**  Handle sensitive database credentials securely. Avoid storing them directly in your workflow; consider using environment variables or secure configuration methods.



Let me know if you have any more questions or need help with specific parts of the workflow!
[ 2025-08-10 11:22:12,133 ] test_main.py:288 root - INFO - [(Document(metadata={'_id': '2a6c9297-ff5a-4139-bb0d-e87f53ace134', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content="Upload transformed file to destination database\nSetup the 'Oracle' connection, specify tables, and map columns\nSetup automated workflow summary notification\nEnable 'Send Workflow Summary' for email notifications on automated workflow execution\nSchedule and monitor  workflows Schedule or setup 'Webhooks' and 'Emails' to trigger workflows\nDone"), 0.5), (Document(metadata={'_id': 'df9d15c4-2094-450f-95e6-162e03d5828a', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='Creating Infoboard Using A Query\nCreate Infoboard Using A Query\nCreating Infoboard Using API\nCreate Infoboard Using API\nCreating Workflow in Infoveave\nCreating Workflows\nWorkflow Execution Status\nWorkflow Execution Status'), 0.33333334), (Document(metadata={'_id': '323c1ea3-b288-44b0-8825-475a23907e9f', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='Workflow Designer\ncanvas.\nTo add alerts that send email notifications during the workflow, go to the\nAlerts\ntab in the\nWorkflow Setup panel\n.\nToggle\nEnable\nto turn the alert on or off. Select recipient email addresses from the user list. You can choose multiple recipients.\nWrite a custom alert message that is sent when the condition is met.\nWhen setting an execution time alert, toggle\nUse Absolute Time'), 0.25), (Document(metadata={'_id': '65e3aa33-13d7-4688-98fd-7b6a24cbf91e', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='Workflow Designer\ncanvas.\nTo add alerts that send email notifications during the workflow, go to the\nAlerts\ntab in the\nWorkflow Setup panel\n.\nToggle\nEnable\nto turn the alert on or off. Select recipient email addresses from the user list. You can choose multiple recipients.\nWrite a custom alert message that is sent when the condition is met.\nWhen setting an execution time alert, toggle\nUse Absolute Time'), 0.2), (Document(metadata={'_id': '2027003d-7c4e-4b6d-acd3-b391a775ae9a', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='Workflow Alerts | Infoveave Help\nSkip to content\nWorkflow Alerts'), 0.16666667), (Document(metadata={'_id': '81a7ef81-eb12-4bcd-ad2e-403f547e7e50', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='Choose the days on which you want to execute the Workflow. By default, Infoveave sets it to every day. You can select specific days of the week, days of the month, or months.\nClick on the\nAdd'), 0.14285715), (Document(metadata={'_id': '3989b1ef-a79d-4b1d-bce6-79cb5969aa26', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='Choose the days on which you want to execute the Workflow. By default, Infoveave sets it to every day. You can select specific days of the week, days of the month, or months.\nClick on the\nAdd'), 0.125), (Document(metadata={'_id': '3fd7ab5c-2d29-41ea-9ed7-0684f87b08e1', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='Add FTP Download Activity\n0:21\nConfigure FTP Download Activity\n0:31\nAdd Read Excel Files Activity\n0:35\nAdd Transform Activity using Javascript\n0:40\nAdd Round Numbers Activity\n0:46 Add Remove Duplicate Rows Activity\n0:52\nAdd Drop Columns Activity\n0:56\nAdd Rename Columns Activity\n1:01\nAdd Upload to Datasource Activity\n1:08\nExecute the Workflow and View Instance History'), 0.11111111), (Document(metadata={'_id': '2adcd9bd-c3f6-41e9-8c27-26f07adfbe4c', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='Add FTP Download Activity\n0:21\nConfigure FTP Download Activity\n0:31\nAdd Read Excel Files Activity\n0:35\nAdd Transform Activity using Javascript\n0:40\nAdd Round Numbers Activity\n0:46 Add Remove Duplicate Rows Activity\n0:52\nAdd Drop Columns Activity\n0:56\nAdd Rename Columns Activity\n1:01\nAdd Upload to Datasource Activity\n1:08\nExecute the Workflow and View Instance History'), 0.1), (Document(metadata={'_id': 'bfe3c285-ffc2-4551-a19c-a5900bdd0aa3', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='E\nEmailhook trigger The Emailhook trigger initiates a Workflow based on incoming emails. You can set up specific email addresses that serve as Emailhooks. This allows for  automated processing of email-based activities or notifications . This trigger is useful for Workflows that involve email notifications or processing of data received via email.'), 0.09090909)]
[ 2025-08-10 11:22:12,156 ] test_main.py:96 root - INFO - (Document(metadata={'_id': '2a6c9297-ff5a-4139-bb0d-e87f53ace134', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content="Upload transformed file to destination database\nSetup the 'Oracle' connection, specify tables, and map columns\nSetup automated workflow summary notification\nEnable 'Send Workflow Summary' for email notifications on automated workflow execution\nSchedule and monitor  workflows Schedule or setup 'Webhooks' and 'Emails' to trigger workflows\nDone"), 0.5)
[ 2025-08-10 11:22:12,229 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-10 11:22:12,230 ] test_main.py:104 root - INFO - [Record(id='2a6c9297-ff5a-4139-bb0d-e87f53ace134', payload={'url': 'https://infoveave-help.pages.dev/journey/automate-workflows/', 'title': 'automate-workflows', 'section': 'automation', 'terminologies': ['Connections', 'Data Transformation', 'Infoveave', 'Workflows'], 'char_count': 978, 'word_count': 139, 'page_content': "Upload transformed file to destination database\nSetup the 'Oracle' connection, specify tables, and map columns\nSetup automated workflow summary notification\nEnable 'Send Workflow Summary' for email notifications on automated workflow execution\nSchedule and monitor  workflows Schedule or setup 'Webhooks' and 'Emails' to trigger workflows\nDone", 'chunk_index': 2}, vector=None, shard_key=None, order_value=None)]
[ 2025-08-10 11:22:12,230 ] test_main.py:105 root - INFO - Retrieved result for point ID: 2a6c9297-ff5a-4139-bb0d-e87f53ace134
[ 2025-08-10 11:22:12,230 ] test_main.py:96 root - INFO - (Document(metadata={'_id': 'df9d15c4-2094-450f-95e6-162e03d5828a', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='Creating Infoboard Using A Query\nCreate Infoboard Using A Query\nCreating Infoboard Using API\nCreate Infoboard Using API\nCreating Workflow in Infoveave\nCreating Workflows\nWorkflow Execution Status\nWorkflow Execution Status'), 0.33333334)
[ 2025-08-10 11:22:12,308 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-10 11:22:12,309 ] test_main.py:104 root - INFO - [Record(id='df9d15c4-2094-450f-95e6-162e03d5828a', payload={'url': 'https://infoveave-help.pages.dev/videos/', 'title': 'videos', 'section': 'videos', 'terminologies': ['Automation', 'Catalogues', 'Conditional Expressions', 'Custom Calendar', 'Datasources', 'Dimensions', 'Infoboards', 'Infoveave', 'Insights', 'Lists', 'Measures', 'My Organization', 'My Workspace', 'Query', 'Reports', 'SciPyR', 'What-If Analysis', 'What-If Formulae', 'Workflows', 'Workflow Execution Status'], 'char_count': 2430, 'word_count': 338, 'page_content': 'Creating Infoboard Using A Query\nCreate Infoboard Using A Query\nCreating Infoboard Using API\nCreate Infoboard Using API\nCreating Workflow in Infoveave\nCreating Workflows\nWorkflow Execution Status\nWorkflow Execution Status', 'chunk_index': 3}, vector=None, shard_key=None, order_value=None)]
[ 2025-08-10 11:22:12,309 ] test_main.py:105 root - INFO - Retrieved result for point ID: df9d15c4-2094-450f-95e6-162e03d5828a
[ 2025-08-10 11:22:12,310 ] test_main.py:96 root - INFO - (Document(metadata={'_id': '323c1ea3-b288-44b0-8825-475a23907e9f', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='Workflow Designer\ncanvas.\nTo add alerts that send email notifications during the workflow, go to the\nAlerts\ntab in the\nWorkflow Setup panel\n.\nToggle\nEnable\nto turn the alert on or off. Select recipient email addresses from the user list. You can choose multiple recipients.\nWrite a custom alert message that is sent when the condition is met.\nWhen setting an execution time alert, toggle\nUse Absolute Time'), 0.25)
[ 2025-08-10 11:22:12,374 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-10 11:22:12,375 ] test_main.py:104 root - INFO - [Record(id='323c1ea3-b288-44b0-8825-475a23907e9f', payload={'url': 'https://infoveave-help.pages.dev/automation-v8/jobs-v8/create-new-job/', 'title': 'create-new-job', 'section': 'automation', 'terminologies': ['Alerts', 'Automation', 'Infoveave', 'Measures', 'Query', 'Query Report', 'Value', 'Variables', 'View', 'View', 'Workflows'], 'char_count': 4476, 'word_count': 722, 'page_content': 'Workflow Designer\ncanvas.\nTo add alerts that send email notifications during the workflow, go to the\nAlerts\ntab in the\nWorkflow Setup panel\n.\nToggle\nEnable\nto turn the alert on or off. Select recipient email addresses from the user list. You can choose multiple recipients.\nWrite a custom alert message that is sent when the condition is met.\nWhen setting an execution time alert, toggle\nUse Absolute Time', 'chunk_index': 4}, vector=None, shard_key=None, order_value=None)]
[ 2025-08-10 11:22:12,375 ] test_main.py:105 root - INFO - Retrieved result for point ID: 323c1ea3-b288-44b0-8825-475a23907e9f
[ 2025-08-10 11:22:12,375 ] test_main.py:96 root - INFO - (Document(metadata={'_id': '65e3aa33-13d7-4688-98fd-7b6a24cbf91e', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='Workflow Designer\ncanvas.\nTo add alerts that send email notifications during the workflow, go to the\nAlerts\ntab in the\nWorkflow Setup panel\n.\nToggle\nEnable\nto turn the alert on or off. Select recipient email addresses from the user list. You can choose multiple recipients.\nWrite a custom alert message that is sent when the condition is met.\nWhen setting an execution time alert, toggle\nUse Absolute Time'), 0.2)
[ 2025-08-10 11:22:12,427 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-10 11:22:12,428 ] test_main.py:104 root - INFO - [Record(id='65e3aa33-13d7-4688-98fd-7b6a24cbf91e', payload={'url': 'https://infoveave-help.pages.dev/automation-v8/workflows/define-workflow/', 'title': 'define-workflow', 'section': 'automation', 'terminologies': ['Alerts', 'Automation', 'Infoveave', 'Measures', 'Query', 'Query Report', 'Value', 'Variables', 'View', 'View', 'Workflows'], 'char_count': 4476, 'word_count': 722, 'page_content': 'Workflow Designer\ncanvas.\nTo add alerts that send email notifications during the workflow, go to the\nAlerts\ntab in the\nWorkflow Setup panel\n.\nToggle\nEnable\nto turn the alert on or off. Select recipient email addresses from the user list. You can choose multiple recipients.\nWrite a custom alert message that is sent when the condition is met.\nWhen setting an execution time alert, toggle\nUse Absolute Time', 'chunk_index': 4}, vector=None, shard_key=None, order_value=None)]
[ 2025-08-10 11:22:12,428 ] test_main.py:105 root - INFO - Retrieved result for point ID: 65e3aa33-13d7-4688-98fd-7b6a24cbf91e
[ 2025-08-10 11:22:12,428 ] test_main.py:96 root - INFO - (Document(metadata={'_id': '2027003d-7c4e-4b6d-acd3-b391a775ae9a', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='Workflow Alerts | Infoveave Help\nSkip to content\nWorkflow Alerts'), 0.16666667)
[ 2025-08-10 11:22:12,492 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-10 11:22:12,492 ] test_main.py:104 root - INFO - [Record(id='2027003d-7c4e-4b6d-acd3-b391a775ae9a', payload={'url': 'https://infoveave-help.pages.dev/automation-v8/workflows/define-workflow/workflow-alerts-2/', 'title': 'workflow-alerts-2', 'section': 'automation', 'terminologies': ['Alerts', 'Infoveave', 'Workflows', 'Workflow Alerts'], 'char_count': 3832, 'word_count': 620, 'page_content': 'Workflow Alerts | Infoveave Help\nSkip to content\nWorkflow Alerts', 'chunk_index': 0}, vector=None, shard_key=None, order_value=None)]
[ 2025-08-10 11:22:12,492 ] test_main.py:105 root - INFO - Retrieved result for point ID: 2027003d-7c4e-4b6d-acd3-b391a775ae9a
[ 2025-08-10 11:22:12,493 ] test_main.py:96 root - INFO - (Document(metadata={'_id': '81a7ef81-eb12-4bcd-ad2e-403f547e7e50', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='Choose the days on which you want to execute the Workflow. By default, Infoveave sets it to every day. You can select specific days of the week, days of the month, or months.\nClick on the\nAdd'), 0.14285715)
[ 2025-08-10 11:22:12,550 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-10 11:22:12,551 ] test_main.py:104 root - INFO - [Record(id='81a7ef81-eb12-4bcd-ad2e-403f547e7e50', payload={'url': 'https://infoveave-help.pages.dev/automation-v8/jobs-v8/schedule-job/', 'title': 'schedule-job', 'section': 'automation', 'terminologies': ['Automation', 'Cron trigger', 'Emailhook trigger', 'Infoveave', 'Lists', 'Reports', 'Value', 'View', 'View', 'Webhook trigger', 'Workflows', 'Workflow Start trigger'], 'char_count': 5699, 'word_count': 937, 'page_content': 'Choose the days on which you want to execute the Workflow. By default, Infoveave sets it to every day. You can select specific days of the week, days of the month, or months.\nClick on the\nAdd', 'chunk_index': 5}, vector=None, shard_key=None, order_value=None)]
[ 2025-08-10 11:22:12,551 ] test_main.py:105 root - INFO - Retrieved result for point ID: 81a7ef81-eb12-4bcd-ad2e-403f547e7e50
[ 2025-08-10 11:22:12,551 ] test_main.py:96 root - INFO - (Document(metadata={'_id': '3989b1ef-a79d-4b1d-bce6-79cb5969aa26', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='Choose the days on which you want to execute the Workflow. By default, Infoveave sets it to every day. You can select specific days of the week, days of the month, or months.\nClick on the\nAdd'), 0.125)
[ 2025-08-10 11:22:12,606 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-10 11:22:12,608 ] test_main.py:104 root - INFO - [Record(id='3989b1ef-a79d-4b1d-bce6-79cb5969aa26', payload={'url': 'https://infoveave-help.pages.dev/automation-v8/workflows/define-workflow/workflow-start/', 'title': 'workflow-start', 'section': 'automation', 'terminologies': ['Automation', 'Cron trigger', 'Emailhook trigger', 'Infoveave', 'Lists', 'Reports', 'Value', 'View', 'View', 'Webhook trigger', 'Workflows', 'Workflow Start trigger'], 'char_count': 5699, 'word_count': 937, 'page_content': 'Choose the days on which you want to execute the Workflow. By default, Infoveave sets it to every day. You can select specific days of the week, days of the month, or months.\nClick on the\nAdd', 'chunk_index': 5}, vector=None, shard_key=None, order_value=None)]
[ 2025-08-10 11:22:12,608 ] test_main.py:105 root - INFO - Retrieved result for point ID: 3989b1ef-a79d-4b1d-bce6-79cb5969aa26
[ 2025-08-10 11:22:12,608 ] test_main.py:96 root - INFO - (Document(metadata={'_id': '3fd7ab5c-2d29-41ea-9ed7-0684f87b08e1', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='Add FTP Download Activity\n0:21\nConfigure FTP Download Activity\n0:31\nAdd Read Excel Files Activity\n0:35\nAdd Transform Activity using Javascript\n0:40\nAdd Round Numbers Activity\n0:46 Add Remove Duplicate Rows Activity\n0:52\nAdd Drop Columns Activity\n0:56\nAdd Rename Columns Activity\n1:01\nAdd Upload to Datasource Activity\n1:08\nExecute the Workflow and View Instance History'), 0.11111111)
[ 2025-08-10 11:22:12,706 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-10 11:22:12,707 ] test_main.py:104 root - INFO - [Record(id='3fd7ab5c-2d29-41ea-9ed7-0684f87b08e1', payload={'url': 'https://infoveave-help.pages.dev/automation-v8/jobs-v8/create-new-job/', 'title': 'create-new-job', 'section': 'automation', 'terminologies': ['Alerts', 'Automation', 'Infoveave', 'Measures', 'Query', 'Query Report', 'Value', 'Variables', 'View', 'View', 'Workflows'], 'char_count': 4476, 'word_count': 722, 'page_content': 'Add FTP Download Activity\n0:21\nConfigure FTP Download Activity\n0:31\nAdd Read Excel Files Activity\n0:35\nAdd Transform Activity using Javascript\n0:40\nAdd Round Numbers Activity\n0:46 Add Remove Duplicate Rows Activity\n0:52\nAdd Drop Columns Activity\n0:56\nAdd Rename Columns Activity\n1:01\nAdd Upload to Datasource Activity\n1:08\nExecute the Workflow and View Instance History', 'chunk_index': 1}, vector=None, shard_key=None, order_value=None)]
[ 2025-08-10 11:22:12,707 ] test_main.py:105 root - INFO - Retrieved result for point ID: 3fd7ab5c-2d29-41ea-9ed7-0684f87b08e1
[ 2025-08-10 11:22:12,707 ] test_main.py:96 root - INFO - (Document(metadata={'_id': '2adcd9bd-c3f6-41e9-8c27-26f07adfbe4c', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='Add FTP Download Activity\n0:21\nConfigure FTP Download Activity\n0:31\nAdd Read Excel Files Activity\n0:35\nAdd Transform Activity using Javascript\n0:40\nAdd Round Numbers Activity\n0:46 Add Remove Duplicate Rows Activity\n0:52\nAdd Drop Columns Activity\n0:56\nAdd Rename Columns Activity\n1:01\nAdd Upload to Datasource Activity\n1:08\nExecute the Workflow and View Instance History'), 0.1)
[ 2025-08-10 11:22:12,796 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-10 11:22:12,797 ] test_main.py:104 root - INFO - [Record(id='2adcd9bd-c3f6-41e9-8c27-26f07adfbe4c', payload={'url': 'https://infoveave-help.pages.dev/automation-v8/workflows/define-workflow/', 'title': 'define-workflow', 'section': 'automation', 'terminologies': ['Alerts', 'Automation', 'Infoveave', 'Measures', 'Query', 'Query Report', 'Value', 'Variables', 'View', 'View', 'Workflows'], 'char_count': 4476, 'word_count': 722, 'page_content': 'Add FTP Download Activity\n0:21\nConfigure FTP Download Activity\n0:31\nAdd Read Excel Files Activity\n0:35\nAdd Transform Activity using Javascript\n0:40\nAdd Round Numbers Activity\n0:46 Add Remove Duplicate Rows Activity\n0:52\nAdd Drop Columns Activity\n0:56\nAdd Rename Columns Activity\n1:01\nAdd Upload to Datasource Activity\n1:08\nExecute the Workflow and View Instance History', 'chunk_index': 1}, vector=None, shard_key=None, order_value=None)]
[ 2025-08-10 11:22:12,797 ] test_main.py:105 root - INFO - Retrieved result for point ID: 2adcd9bd-c3f6-41e9-8c27-26f07adfbe4c
[ 2025-08-10 11:22:12,797 ] test_main.py:96 root - INFO - (Document(metadata={'_id': 'bfe3c285-ffc2-4551-a19c-a5900bdd0aa3', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='E\nEmailhook trigger The Emailhook trigger initiates a Workflow based on incoming emails. You can set up specific email addresses that serve as Emailhooks. This allows for  automated processing of email-based activities or notifications . This trigger is useful for Workflows that involve email notifications or processing of data received via email.'), 0.09090909)
[ 2025-08-10 11:22:12,873 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-10 11:22:12,874 ] test_main.py:104 root - INFO - [Record(id='bfe3c285-ffc2-4551-a19c-a5900bdd0aa3', payload={'url': 'https://infoveave-help.pages.dev/introduction-to-infoveave/infoveave-terminologies/', 'title': 'infoveave-terminologies', 'section': 'introduction-to-infoveave', 'terminologies': ['Address Book', 'Alerts', 'Audit Log', 'Automation', 'Business Analysis', 'Calculated Columns', 'Calculated Measures', 'Catalogues', 'Client', 'Color Palette', 'Common Dimension filters', 'Component Panel', 'Component', 'Conditional Expressions', 'Connections', 'Control Centre', 'Creator', 'Cron trigger', 'Cube Designer', 'Custom Calendar', 'Custom Email', 'Database Connections', 'Datasources', 'Data Governance', 'Data Ingestion', 'Data Transformation', 'Data Visualization', 'Date Range Filter', 'Designer Canvas', 'Designer Layout', 'Dimensions', 'Domains', 'Emailhook trigger', 'Expression', 'Fixed Filters', 'Grid Layout', 'Hierarchies', 'Holiday Calendar', 'Infoboards', 'Infoboard Setup', 'Infoboard statistics', 'Infoveave', 'Infoveave menu', 'Insights', 'Lists', 'Linked Reports', 'Login statistics', 'Measures', 'ML Analysis', 'ML Model', 'My Organization', 'My Workspace', 'NGuage Forms', 'Query', 'Query Builder', 'Query Report', 'Reports', 'Retention Settings', 'Roles', 'SciPyR', 'Server Statistics', 'SMTP Settings', 'Statistical Analysis', 'Tags', 'Targets and Thresholds', 'Template Reports', 'Tenant', 'Tiers', 'Trash', 'Value', 'Variables', 'Version history', 'View', 'View', 'Viewer', 'Webhook trigger', 'What-If Analysis', 'What-If Formulae', 'Widget Configuration', 'Widget Customization', 'Widget statistics', 'Workflows', 'Workflow Alerts', 'Workflow Execution Status', 'Workflow Start trigger', 'Workflow Variables'], 'char_count': 25220, 'word_count': 3773, 'page_content': 'E\nEmailhook trigger The Emailhook trigger initiates a Workflow based on incoming emails. You can set up specific email addresses that serve as Emailhooks. This allows for  automated processing of email-based activities or notifications . This trigger is useful for Workflows that involve email notifications or processing of data received via email.', 'chunk_index': 13}, vector=None, shard_key=None, order_value=None)]
[ 2025-08-10 11:22:12,874 ] test_main.py:105 root - INFO - Retrieved result for point ID: bfe3c285-ffc2-4551-a19c-a5900bdd0aa3
[ 2025-08-10 11:22:12,874 ] test_main.py:118 root - INFO - ['page_content', 'url', 'title', 'section', 'terminologies', 'char_count', 'word_count', 'chunk_index', 'page_content', 'url', 'title', 'section', 'terminologies', 'char_count', 'word_count', 'chunk_index', 'page_content', 'url', 'title', 'section', 'terminologies', 'char_count', 'word_count', 'chunk_index', 'page_content', 'url', 'title', 'section', 'terminologies', 'char_count', 'word_count', 'chunk_index', 'page_content', 'url', 'title', 'section', 'terminologies', 'char_count', 'word_count', 'chunk_index', 'page_content', 'url', 'title', 'section', 'terminologies', 'char_count', 'word_count', 'chunk_index', 'page_content', 'url', 'title', 'section', 'terminologies', 'char_count', 'word_count', 'chunk_index', 'page_content', 'url', 'title', 'section', 'terminologies', 'char_count', 'word_count', 'chunk_index', 'page_content', 'url', 'title', 'section', 'terminologies', 'char_count', 'word_count', 'chunk_index', 'page_content', 'url', 'title', 'section', 'terminologies', 'char_count', 'word_count', 'chunk_index', 'page_content', 'url', 'title', 'section', 'terminologies', 'char_count', 'word_count', 'chunk_index', 'page_content', 'url', 'title', 'section', 'terminologies', 'char_count', 'word_count', 'chunk_index', 'page_content', 'url', 'title', 'section', 'terminologies', 'char_count', 'word_count', 'chunk_index', 'page_content', 'url', 'title', 'section', 'terminologies', 'char_count', 'word_count', 'chunk_index', 'page_content', 'url', 'title', 'section', 'terminologies', 'char_count', 'word_count', 'chunk_index', 'page_content', 'url', 'title', 'section', 'terminologies', 'char_count', 'word_count', 'chunk_index', 'page_content', 'url', 'title', 'section', 'terminologies', 'char_count', 'word_count', 'chunk_index', 'page_content', 'url', 'title', 'section', 'terminologies', 'char_count', 'word_count', 'chunk_index', 'page_content', 'url', 'title', 'section', 'terminologies', 'char_count', 'word_count', 'chunk_index', 'page_content', 'url', 'title', 'section', 'terminologies', 'char_count', 'word_count', 'chunk_index']
[ 2025-08-10 11:22:12,874 ] test_main.py:324 root - INFO - Found 161 final documents.
[ 2025-08-10 11:22:12,874 ] test_main.py:371 root - INFO - Context prepared for LLM response.
[ 2025-08-10 11:22:12,875 ] test_main.py:417 root - INFO - Single query part response:

[ 2025-08-10 11:22:12,876 ] test_main.py:418 root - INFO - Let's craft a workflow to fetch data from your Oracle database and deliver it as an email report. 

Here's a breakdown of the steps involved:

1. **Execute Query:** You'll need to use the "Execute Query" activity to connect to your Oracle database and run your desired SQL query.  

   *  **Database Connection:**  Make sure you configure the "Execute Query" activity with the correct connection details for your Oracle database, including the hostname, port, username, and password.
   * **SQL Query:**  Input your SQL query into the "Query" field of the activity. This query should select the data you want to include in your report.

2. **Format the Data:**  The "Execute Query" activity will return the query results as a dataset. You might need to use other activities to format this data into a presentable structure for your email report.

   * **Pivot Columns:** If you need to restructure your data, consider using the "Pivot Columns" activity to rearrange the data into a more suitable format.
   * **Transform using Javascript:** You can leverage the "Transform using Javascript" activity to apply custom formatting or calculations to your data.

3. **Generate the Report:**  Now that your data is formatted, you can generate the report itself.

   * **Write to File:**  Use the "Write to File" activity to save the formatted data as a file (e.g., CSV, Excel, or HTML). This file will serve as the content of your email report.

4. **Send the Email:** Finally, use the "Send Email" activity to deliver the report.

   * **Recipient:** Specify the email address(es) of the recipients.
   * **Subject:**  Craft a clear and concise subject line for your email.
   * **Body:**  You can include a simple message in the email body, or you can use the "Write to File" output to directly attach the report file to the email.

**Remember:**

*  **Error Handling:**  It's crucial to include error handling in your workflow to gracefully manage any issues that might arise during the process.
* **Security:**  Handle sensitive database credentials securely. Avoid storing them directly in your workflow; consider using environment variables or secure configuration methods.



Let me know if you have any more questions or need help with specific parts of the workflow!
[ 2025-08-10 11:26:55,088 ] test_main.py:148 root - INFO - .........................Starting Infoverve Helper Application.........................
[ 2025-08-10 11:26:55,089 ] test_main.py:164 root - INFO - GROQ_API_KEY loaded.
[ 2025-08-10 11:26:55,101 ] test_main.py:188 root - INFO - Embedding model initialized.
[ 2025-08-10 11:26:55,238 ] _client.py:1025 httpx - INFO - HTTP Request: GET http://ai.infoveave.cloud:6333 "HTTP/1.1 200 OK"
[ 2025-08-10 11:26:55,239 ] test_main.py:192 root - INFO - Connected to Qdrant.
[ 2025-08-10 11:26:55,387 ] _client.py:1025 httpx - INFO - HTTP Request: GET http://ai.infoveave.cloud:6333/collections "HTTP/1.1 200 OK"
[ 2025-08-10 11:26:55,388 ] test_main.py:196 root - INFO - Qdrant collections retrieved.
[ 2025-08-10 11:26:55,388 ] test_main.py:203 root - INFO - Using collection: infoverve_helper_docs_hybrid
[ 2025-08-10 11:27:00,581 ] test_main.py:206 root - INFO - Sparse embeddings initialized.
[ 2025-08-10 11:27:00,743 ] _client.py:1025 httpx - INFO - HTTP Request: GET http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid "HTTP/1.1 200 OK"
[ 2025-08-10 11:27:02,642 ] _client.py:1025 httpx - INFO - HTTP Request: GET http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid "HTTP/1.1 200 OK"
[ 2025-08-10 11:27:02,644 ] test_main.py:218 root - INFO - QdrantVectorStore initialized.
[ 2025-08-10 11:27:02,678 ] test_main.py:224 root - INFO - LLM initialized.
[ 2025-08-10 11:27:03,679 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points/query "HTTP/1.1 200 OK"
[ 2025-08-10 11:27:04,272 ] test_main.py:246 root - INFO - Original query embedding generated.
[ 2025-08-10 11:27:04,296 ] test_main.py:96 root - INFO - (Document(metadata={'_id': '2a6c9297-ff5a-4139-bb0d-e87f53ace134', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content="Upload transformed file to destination database\nSetup the 'Oracle' connection, specify tables, and map columns\nSetup automated workflow summary notification\nEnable 'Send Workflow Summary' for email notifications on automated workflow execution\nSchedule and monitor  workflows Schedule or setup 'Webhooks' and 'Emails' to trigger workflows\nDone"), 0.5)
[ 2025-08-10 11:27:04,360 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-10 11:27:04,361 ] test_main.py:104 root - INFO - [Record(id='2a6c9297-ff5a-4139-bb0d-e87f53ace134', payload={'url': 'https://infoveave-help.pages.dev/journey/automate-workflows/', 'title': 'automate-workflows', 'section': 'automation', 'terminologies': ['Connections', 'Data Transformation', 'Infoveave', 'Workflows'], 'char_count': 978, 'word_count': 139, 'page_content': "Upload transformed file to destination database\nSetup the 'Oracle' connection, specify tables, and map columns\nSetup automated workflow summary notification\nEnable 'Send Workflow Summary' for email notifications on automated workflow execution\nSchedule and monitor  workflows Schedule or setup 'Webhooks' and 'Emails' to trigger workflows\nDone", 'chunk_index': 2}, vector=None, shard_key=None, order_value=None)]
[ 2025-08-10 11:27:04,361 ] test_main.py:105 root - INFO - Retrieved result for point ID: 2a6c9297-ff5a-4139-bb0d-e87f53ace134
[ 2025-08-10 11:27:04,361 ] test_main.py:90 root - ERROR - Error during query rewriting: name 'context' is not defined
[ 2025-08-10 11:27:04,361 ] test_main.py:251 root - INFO - Rewritten query: Need to create a workflow, to run a query from oracle DB and send the query response as a report through Email
[ 2025-08-10 11:27:04,361 ] test_main.py:258 root - INFO - Rewritten query parts: ['Need to create a workflow, to run a query from oracle DB and send the query response as a report through Email']
[ 2025-08-10 11:27:04,361 ] test_main.py:267 root - INFO - Rewritten Query 1: Need to create a workflow, to run a query from oracle DB and send the query response as a report through Email
[ 2025-08-10 11:27:05,650 ] test_main.py:270 root - INFO - Embedding generated for query 1.
[ 2025-08-10 11:27:06,249 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points/query "HTTP/1.1 200 OK"
[ 2025-08-10 11:27:06,308 ] test_main.py:282 root - INFO - Processing query part 1: Need to create a workflow, to run a query from oracle DB and send the query response as a report through Email
[ 2025-08-10 11:27:06,333 ] test_main.py:96 root - INFO - (Document(metadata={'_id': '2a6c9297-ff5a-4139-bb0d-e87f53ace134', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content="Upload transformed file to destination database\nSetup the 'Oracle' connection, specify tables, and map columns\nSetup automated workflow summary notification\nEnable 'Send Workflow Summary' for email notifications on automated workflow execution\nSchedule and monitor  workflows Schedule or setup 'Webhooks' and 'Emails' to trigger workflows\nDone"), 0.5)
[ 2025-08-10 11:27:06,391 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-10 11:27:06,392 ] test_main.py:104 root - INFO - [Record(id='2a6c9297-ff5a-4139-bb0d-e87f53ace134', payload={'url': 'https://infoveave-help.pages.dev/journey/automate-workflows/', 'title': 'automate-workflows', 'section': 'automation', 'terminologies': ['Connections', 'Data Transformation', 'Infoveave', 'Workflows'], 'char_count': 978, 'word_count': 139, 'page_content': "Upload transformed file to destination database\nSetup the 'Oracle' connection, specify tables, and map columns\nSetup automated workflow summary notification\nEnable 'Send Workflow Summary' for email notifications on automated workflow execution\nSchedule and monitor  workflows Schedule or setup 'Webhooks' and 'Emails' to trigger workflows\nDone", 'chunk_index': 2}, vector=None, shard_key=None, order_value=None)]
[ 2025-08-10 11:27:06,392 ] test_main.py:105 root - INFO - Retrieved result for point ID: 2a6c9297-ff5a-4139-bb0d-e87f53ace134
[ 2025-08-10 11:27:06,392 ] test_main.py:144 root - ERROR - Error during query rewriting: name 'context' is not defined
[ 2025-08-10 11:32:23,489 ] test_main.py:150 root - INFO - .........................Starting Infoverve Helper Application.........................
[ 2025-08-10 11:32:23,490 ] test_main.py:166 root - INFO - GROQ_API_KEY loaded.
[ 2025-08-10 11:32:23,495 ] test_main.py:190 root - INFO - Embedding model initialized.
[ 2025-08-10 11:32:23,688 ] _client.py:1025 httpx - INFO - HTTP Request: GET http://ai.infoveave.cloud:6333 "HTTP/1.1 200 OK"
[ 2025-08-10 11:32:23,689 ] test_main.py:194 root - INFO - Connected to Qdrant.
[ 2025-08-10 11:32:23,798 ] _client.py:1025 httpx - INFO - HTTP Request: GET http://ai.infoveave.cloud:6333/collections "HTTP/1.1 200 OK"
[ 2025-08-10 11:32:23,800 ] test_main.py:198 root - INFO - Qdrant collections retrieved.
[ 2025-08-10 11:32:23,800 ] test_main.py:205 root - INFO - Using collection: infoverve_helper_docs_hybrid
[ 2025-08-10 11:32:24,905 ] test_main.py:208 root - INFO - Sparse embeddings initialized.
[ 2025-08-10 11:32:24,968 ] _client.py:1025 httpx - INFO - HTTP Request: GET http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid "HTTP/1.1 200 OK"
[ 2025-08-10 11:32:26,918 ] _client.py:1025 httpx - INFO - HTTP Request: GET http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid "HTTP/1.1 200 OK"
[ 2025-08-10 11:32:26,920 ] test_main.py:220 root - INFO - QdrantVectorStore initialized.
[ 2025-08-10 11:32:26,957 ] test_main.py:226 root - INFO - LLM initialized.
[ 2025-08-10 11:32:27,786 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points/query "HTTP/1.1 200 OK"
[ 2025-08-10 11:32:28,563 ] test_main.py:248 root - INFO - Original query embedding generated.
[ 2025-08-10 11:32:28,587 ] test_main.py:65 root - INFO - (Document(metadata={'_id': '2a6c9297-ff5a-4139-bb0d-e87f53ace134', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content="Upload transformed file to destination database\nSetup the 'Oracle' connection, specify tables, and map columns\nSetup automated workflow summary notification\nEnable 'Send Workflow Summary' for email notifications on automated workflow execution\nSchedule and monitor  workflows Schedule or setup 'Webhooks' and 'Emails' to trigger workflows\nDone"), 0.5)
[ 2025-08-10 11:32:28,671 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-10 11:32:28,675 ] test_main.py:73 root - INFO - [Record(id='2a6c9297-ff5a-4139-bb0d-e87f53ace134', payload={'url': 'https://infoveave-help.pages.dev/journey/automate-workflows/', 'title': 'automate-workflows', 'section': 'automation', 'terminologies': ['Connections', 'Data Transformation', 'Infoveave', 'Workflows'], 'char_count': 978, 'word_count': 139, 'page_content': "Upload transformed file to destination database\nSetup the 'Oracle' connection, specify tables, and map columns\nSetup automated workflow summary notification\nEnable 'Send Workflow Summary' for email notifications on automated workflow execution\nSchedule and monitor  workflows Schedule or setup 'Webhooks' and 'Emails' to trigger workflows\nDone", 'chunk_index': 2}, vector=None, shard_key=None, order_value=None)]
[ 2025-08-10 11:32:28,675 ] test_main.py:74 root - INFO - Retrieved result for point ID: 2a6c9297-ff5a-4139-bb0d-e87f53ace134
[ 2025-08-10 11:32:28,675 ] test_main.py:118 root - ERROR - Error during query rewriting: name 'context' is not defined
[ 2025-08-10 11:32:28,675 ] test_main.py:253 root - INFO - Rewritten query: Need to create a workflow, to run a query from oracle DB and send the query response as a report through Email
[ 2025-08-10 11:32:28,675 ] test_main.py:260 root - INFO - Rewritten query parts: ['Need to create a workflow, to run a query from oracle DB and send the query response as a report through Email']
[ 2025-08-10 11:32:28,675 ] test_main.py:269 root - INFO - Rewritten Query 1: Need to create a workflow, to run a query from oracle DB and send the query response as a report through Email
[ 2025-08-10 11:32:29,468 ] test_main.py:272 root - INFO - Embedding generated for query 1.
[ 2025-08-10 11:32:30,363 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points/query "HTTP/1.1 200 OK"
[ 2025-08-10 11:32:30,369 ] test_main.py:284 root - INFO - Processing query part 1: Need to create a workflow, to run a query from oracle DB and send the query response as a report through Email
[ 2025-08-10 11:32:30,394 ] test_main.py:65 root - INFO - (Document(metadata={'_id': '2a6c9297-ff5a-4139-bb0d-e87f53ace134', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content="Upload transformed file to destination database\nSetup the 'Oracle' connection, specify tables, and map columns\nSetup automated workflow summary notification\nEnable 'Send Workflow Summary' for email notifications on automated workflow execution\nSchedule and monitor  workflows Schedule or setup 'Webhooks' and 'Emails' to trigger workflows\nDone"), 0.5)
[ 2025-08-10 11:32:30,457 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-10 11:32:30,462 ] test_main.py:73 root - INFO - [Record(id='2a6c9297-ff5a-4139-bb0d-e87f53ace134', payload={'url': 'https://infoveave-help.pages.dev/journey/automate-workflows/', 'title': 'automate-workflows', 'section': 'automation', 'terminologies': ['Connections', 'Data Transformation', 'Infoveave', 'Workflows'], 'char_count': 978, 'word_count': 139, 'page_content': "Upload transformed file to destination database\nSetup the 'Oracle' connection, specify tables, and map columns\nSetup automated workflow summary notification\nEnable 'Send Workflow Summary' for email notifications on automated workflow execution\nSchedule and monitor  workflows Schedule or setup 'Webhooks' and 'Emails' to trigger workflows\nDone", 'chunk_index': 2}, vector=None, shard_key=None, order_value=None)]
[ 2025-08-10 11:32:30,462 ] test_main.py:74 root - INFO - Retrieved result for point ID: 2a6c9297-ff5a-4139-bb0d-e87f53ace134
[ 2025-08-10 11:32:30,462 ] test_main.py:65 root - INFO - (Document(metadata={'_id': 'df9d15c4-2094-450f-95e6-162e03d5828a', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='Creating Infoboard Using A Query\nCreate Infoboard Using A Query\nCreating Infoboard Using API\nCreate Infoboard Using API\nCreating Workflow in Infoveave\nCreating Workflows\nWorkflow Execution Status\nWorkflow Execution Status'), 0.33333334)
[ 2025-08-10 11:32:30,515 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-10 11:32:30,516 ] test_main.py:73 root - INFO - [Record(id='df9d15c4-2094-450f-95e6-162e03d5828a', payload={'url': 'https://infoveave-help.pages.dev/videos/', 'title': 'videos', 'section': 'videos', 'terminologies': ['Automation', 'Catalogues', 'Conditional Expressions', 'Custom Calendar', 'Datasources', 'Dimensions', 'Infoboards', 'Infoveave', 'Insights', 'Lists', 'Measures', 'My Organization', 'My Workspace', 'Query', 'Reports', 'SciPyR', 'What-If Analysis', 'What-If Formulae', 'Workflows', 'Workflow Execution Status'], 'char_count': 2430, 'word_count': 338, 'page_content': 'Creating Infoboard Using A Query\nCreate Infoboard Using A Query\nCreating Infoboard Using API\nCreate Infoboard Using API\nCreating Workflow in Infoveave\nCreating Workflows\nWorkflow Execution Status\nWorkflow Execution Status', 'chunk_index': 3}, vector=None, shard_key=None, order_value=None)]
[ 2025-08-10 11:32:30,516 ] test_main.py:74 root - INFO - Retrieved result for point ID: df9d15c4-2094-450f-95e6-162e03d5828a
[ 2025-08-10 11:32:30,516 ] test_main.py:65 root - INFO - (Document(metadata={'_id': '323c1ea3-b288-44b0-8825-475a23907e9f', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='Workflow Designer\ncanvas.\nTo add alerts that send email notifications during the workflow, go to the\nAlerts\ntab in the\nWorkflow Setup panel\n.\nToggle\nEnable\nto turn the alert on or off. Select recipient email addresses from the user list. You can choose multiple recipients.\nWrite a custom alert message that is sent when the condition is met.\nWhen setting an execution time alert, toggle\nUse Absolute Time'), 0.25)
[ 2025-08-10 11:32:30,571 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-10 11:32:30,572 ] test_main.py:73 root - INFO - [Record(id='323c1ea3-b288-44b0-8825-475a23907e9f', payload={'url': 'https://infoveave-help.pages.dev/automation-v8/jobs-v8/create-new-job/', 'title': 'create-new-job', 'section': 'automation', 'terminologies': ['Alerts', 'Automation', 'Infoveave', 'Measures', 'Query', 'Query Report', 'Value', 'Variables', 'View', 'View', 'Workflows'], 'char_count': 4476, 'word_count': 722, 'page_content': 'Workflow Designer\ncanvas.\nTo add alerts that send email notifications during the workflow, go to the\nAlerts\ntab in the\nWorkflow Setup panel\n.\nToggle\nEnable\nto turn the alert on or off. Select recipient email addresses from the user list. You can choose multiple recipients.\nWrite a custom alert message that is sent when the condition is met.\nWhen setting an execution time alert, toggle\nUse Absolute Time', 'chunk_index': 4}, vector=None, shard_key=None, order_value=None)]
[ 2025-08-10 11:32:30,572 ] test_main.py:74 root - INFO - Retrieved result for point ID: 323c1ea3-b288-44b0-8825-475a23907e9f
[ 2025-08-10 11:32:30,572 ] test_main.py:65 root - INFO - (Document(metadata={'_id': '65e3aa33-13d7-4688-98fd-7b6a24cbf91e', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='Workflow Designer\ncanvas.\nTo add alerts that send email notifications during the workflow, go to the\nAlerts\ntab in the\nWorkflow Setup panel\n.\nToggle\nEnable\nto turn the alert on or off. Select recipient email addresses from the user list. You can choose multiple recipients.\nWrite a custom alert message that is sent when the condition is met.\nWhen setting an execution time alert, toggle\nUse Absolute Time'), 0.2)
[ 2025-08-10 11:32:30,631 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-10 11:32:30,632 ] test_main.py:73 root - INFO - [Record(id='65e3aa33-13d7-4688-98fd-7b6a24cbf91e', payload={'url': 'https://infoveave-help.pages.dev/automation-v8/workflows/define-workflow/', 'title': 'define-workflow', 'section': 'automation', 'terminologies': ['Alerts', 'Automation', 'Infoveave', 'Measures', 'Query', 'Query Report', 'Value', 'Variables', 'View', 'View', 'Workflows'], 'char_count': 4476, 'word_count': 722, 'page_content': 'Workflow Designer\ncanvas.\nTo add alerts that send email notifications during the workflow, go to the\nAlerts\ntab in the\nWorkflow Setup panel\n.\nToggle\nEnable\nto turn the alert on or off. Select recipient email addresses from the user list. You can choose multiple recipients.\nWrite a custom alert message that is sent when the condition is met.\nWhen setting an execution time alert, toggle\nUse Absolute Time', 'chunk_index': 4}, vector=None, shard_key=None, order_value=None)]
[ 2025-08-10 11:32:30,632 ] test_main.py:74 root - INFO - Retrieved result for point ID: 65e3aa33-13d7-4688-98fd-7b6a24cbf91e
[ 2025-08-10 11:32:30,633 ] test_main.py:65 root - INFO - (Document(metadata={'_id': '2027003d-7c4e-4b6d-acd3-b391a775ae9a', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='Workflow Alerts | Infoveave Help\nSkip to content\nWorkflow Alerts'), 0.16666667)
[ 2025-08-10 11:32:30,700 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-10 11:32:30,702 ] test_main.py:73 root - INFO - [Record(id='2027003d-7c4e-4b6d-acd3-b391a775ae9a', payload={'url': 'https://infoveave-help.pages.dev/automation-v8/workflows/define-workflow/workflow-alerts-2/', 'title': 'workflow-alerts-2', 'section': 'automation', 'terminologies': ['Alerts', 'Infoveave', 'Workflows', 'Workflow Alerts'], 'char_count': 3832, 'word_count': 620, 'page_content': 'Workflow Alerts | Infoveave Help\nSkip to content\nWorkflow Alerts', 'chunk_index': 0}, vector=None, shard_key=None, order_value=None)]
[ 2025-08-10 11:32:30,702 ] test_main.py:74 root - INFO - Retrieved result for point ID: 2027003d-7c4e-4b6d-acd3-b391a775ae9a
[ 2025-08-10 11:32:30,702 ] test_main.py:65 root - INFO - (Document(metadata={'_id': '81a7ef81-eb12-4bcd-ad2e-403f547e7e50', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='Choose the days on which you want to execute the Workflow. By default, Infoveave sets it to every day. You can select specific days of the week, days of the month, or months.\nClick on the\nAdd'), 0.14285715)
[ 2025-08-10 11:32:30,755 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-10 11:32:30,755 ] test_main.py:73 root - INFO - [Record(id='81a7ef81-eb12-4bcd-ad2e-403f547e7e50', payload={'url': 'https://infoveave-help.pages.dev/automation-v8/jobs-v8/schedule-job/', 'title': 'schedule-job', 'section': 'automation', 'terminologies': ['Automation', 'Cron trigger', 'Emailhook trigger', 'Infoveave', 'Lists', 'Reports', 'Value', 'View', 'View', 'Webhook trigger', 'Workflows', 'Workflow Start trigger'], 'char_count': 5699, 'word_count': 937, 'page_content': 'Choose the days on which you want to execute the Workflow. By default, Infoveave sets it to every day. You can select specific days of the week, days of the month, or months.\nClick on the\nAdd', 'chunk_index': 5}, vector=None, shard_key=None, order_value=None)]
[ 2025-08-10 11:32:30,755 ] test_main.py:74 root - INFO - Retrieved result for point ID: 81a7ef81-eb12-4bcd-ad2e-403f547e7e50
[ 2025-08-10 11:32:30,755 ] test_main.py:65 root - INFO - (Document(metadata={'_id': '3989b1ef-a79d-4b1d-bce6-79cb5969aa26', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='Choose the days on which you want to execute the Workflow. By default, Infoveave sets it to every day. You can select specific days of the week, days of the month, or months.\nClick on the\nAdd'), 0.125)
[ 2025-08-10 11:32:30,810 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-10 11:32:30,811 ] test_main.py:73 root - INFO - [Record(id='3989b1ef-a79d-4b1d-bce6-79cb5969aa26', payload={'url': 'https://infoveave-help.pages.dev/automation-v8/workflows/define-workflow/workflow-start/', 'title': 'workflow-start', 'section': 'automation', 'terminologies': ['Automation', 'Cron trigger', 'Emailhook trigger', 'Infoveave', 'Lists', 'Reports', 'Value', 'View', 'View', 'Webhook trigger', 'Workflows', 'Workflow Start trigger'], 'char_count': 5699, 'word_count': 937, 'page_content': 'Choose the days on which you want to execute the Workflow. By default, Infoveave sets it to every day. You can select specific days of the week, days of the month, or months.\nClick on the\nAdd', 'chunk_index': 5}, vector=None, shard_key=None, order_value=None)]
[ 2025-08-10 11:32:30,812 ] test_main.py:74 root - INFO - Retrieved result for point ID: 3989b1ef-a79d-4b1d-bce6-79cb5969aa26
[ 2025-08-10 11:32:30,812 ] test_main.py:65 root - INFO - (Document(metadata={'_id': '3fd7ab5c-2d29-41ea-9ed7-0684f87b08e1', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='Add FTP Download Activity\n0:21\nConfigure FTP Download Activity\n0:31\nAdd Read Excel Files Activity\n0:35\nAdd Transform Activity using Javascript\n0:40\nAdd Round Numbers Activity\n0:46 Add Remove Duplicate Rows Activity\n0:52\nAdd Drop Columns Activity\n0:56\nAdd Rename Columns Activity\n1:01\nAdd Upload to Datasource Activity\n1:08\nExecute the Workflow and View Instance History'), 0.11111111)
[ 2025-08-10 11:32:30,867 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-10 11:32:30,868 ] test_main.py:73 root - INFO - [Record(id='3fd7ab5c-2d29-41ea-9ed7-0684f87b08e1', payload={'url': 'https://infoveave-help.pages.dev/automation-v8/jobs-v8/create-new-job/', 'title': 'create-new-job', 'section': 'automation', 'terminologies': ['Alerts', 'Automation', 'Infoveave', 'Measures', 'Query', 'Query Report', 'Value', 'Variables', 'View', 'View', 'Workflows'], 'char_count': 4476, 'word_count': 722, 'page_content': 'Add FTP Download Activity\n0:21\nConfigure FTP Download Activity\n0:31\nAdd Read Excel Files Activity\n0:35\nAdd Transform Activity using Javascript\n0:40\nAdd Round Numbers Activity\n0:46 Add Remove Duplicate Rows Activity\n0:52\nAdd Drop Columns Activity\n0:56\nAdd Rename Columns Activity\n1:01\nAdd Upload to Datasource Activity\n1:08\nExecute the Workflow and View Instance History', 'chunk_index': 1}, vector=None, shard_key=None, order_value=None)]
[ 2025-08-10 11:32:30,868 ] test_main.py:74 root - INFO - Retrieved result for point ID: 3fd7ab5c-2d29-41ea-9ed7-0684f87b08e1
[ 2025-08-10 11:32:30,869 ] test_main.py:65 root - INFO - (Document(metadata={'_id': '2adcd9bd-c3f6-41e9-8c27-26f07adfbe4c', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='Add FTP Download Activity\n0:21\nConfigure FTP Download Activity\n0:31\nAdd Read Excel Files Activity\n0:35\nAdd Transform Activity using Javascript\n0:40\nAdd Round Numbers Activity\n0:46 Add Remove Duplicate Rows Activity\n0:52\nAdd Drop Columns Activity\n0:56\nAdd Rename Columns Activity\n1:01\nAdd Upload to Datasource Activity\n1:08\nExecute the Workflow and View Instance History'), 0.1)
[ 2025-08-10 11:32:30,931 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-10 11:32:30,932 ] test_main.py:73 root - INFO - [Record(id='2adcd9bd-c3f6-41e9-8c27-26f07adfbe4c', payload={'url': 'https://infoveave-help.pages.dev/automation-v8/workflows/define-workflow/', 'title': 'define-workflow', 'section': 'automation', 'terminologies': ['Alerts', 'Automation', 'Infoveave', 'Measures', 'Query', 'Query Report', 'Value', 'Variables', 'View', 'View', 'Workflows'], 'char_count': 4476, 'word_count': 722, 'page_content': 'Add FTP Download Activity\n0:21\nConfigure FTP Download Activity\n0:31\nAdd Read Excel Files Activity\n0:35\nAdd Transform Activity using Javascript\n0:40\nAdd Round Numbers Activity\n0:46 Add Remove Duplicate Rows Activity\n0:52\nAdd Drop Columns Activity\n0:56\nAdd Rename Columns Activity\n1:01\nAdd Upload to Datasource Activity\n1:08\nExecute the Workflow and View Instance History', 'chunk_index': 1}, vector=None, shard_key=None, order_value=None)]
[ 2025-08-10 11:32:30,932 ] test_main.py:74 root - INFO - Retrieved result for point ID: 2adcd9bd-c3f6-41e9-8c27-26f07adfbe4c
[ 2025-08-10 11:32:30,932 ] test_main.py:65 root - INFO - (Document(metadata={'_id': 'bfe3c285-ffc2-4551-a19c-a5900bdd0aa3', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='E\nEmailhook trigger The Emailhook trigger initiates a Workflow based on incoming emails. You can set up specific email addresses that serve as Emailhooks. This allows for  automated processing of email-based activities or notifications . This trigger is useful for Workflows that involve email notifications or processing of data received via email.'), 0.09090909)
[ 2025-08-10 11:32:30,998 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-10 11:32:30,999 ] test_main.py:73 root - INFO - [Record(id='bfe3c285-ffc2-4551-a19c-a5900bdd0aa3', payload={'url': 'https://infoveave-help.pages.dev/introduction-to-infoveave/infoveave-terminologies/', 'title': 'infoveave-terminologies', 'section': 'introduction-to-infoveave', 'terminologies': ['Address Book', 'Alerts', 'Audit Log', 'Automation', 'Business Analysis', 'Calculated Columns', 'Calculated Measures', 'Catalogues', 'Client', 'Color Palette', 'Common Dimension filters', 'Component Panel', 'Component', 'Conditional Expressions', 'Connections', 'Control Centre', 'Creator', 'Cron trigger', 'Cube Designer', 'Custom Calendar', 'Custom Email', 'Database Connections', 'Datasources', 'Data Governance', 'Data Ingestion', 'Data Transformation', 'Data Visualization', 'Date Range Filter', 'Designer Canvas', 'Designer Layout', 'Dimensions', 'Domains', 'Emailhook trigger', 'Expression', 'Fixed Filters', 'Grid Layout', 'Hierarchies', 'Holiday Calendar', 'Infoboards', 'Infoboard Setup', 'Infoboard statistics', 'Infoveave', 'Infoveave menu', 'Insights', 'Lists', 'Linked Reports', 'Login statistics', 'Measures', 'ML Analysis', 'ML Model', 'My Organization', 'My Workspace', 'NGuage Forms', 'Query', 'Query Builder', 'Query Report', 'Reports', 'Retention Settings', 'Roles', 'SciPyR', 'Server Statistics', 'SMTP Settings', 'Statistical Analysis', 'Tags', 'Targets and Thresholds', 'Template Reports', 'Tenant', 'Tiers', 'Trash', 'Value', 'Variables', 'Version history', 'View', 'View', 'Viewer', 'Webhook trigger', 'What-If Analysis', 'What-If Formulae', 'Widget Configuration', 'Widget Customization', 'Widget statistics', 'Workflows', 'Workflow Alerts', 'Workflow Execution Status', 'Workflow Start trigger', 'Workflow Variables'], 'char_count': 25220, 'word_count': 3773, 'page_content': 'E\nEmailhook trigger The Emailhook trigger initiates a Workflow based on incoming emails. You can set up specific email addresses that serve as Emailhooks. This allows for  automated processing of email-based activities or notifications . This trigger is useful for Workflows that involve email notifications or processing of data received via email.', 'chunk_index': 13}, vector=None, shard_key=None, order_value=None)]
[ 2025-08-10 11:32:30,999 ] test_main.py:74 root - INFO - Retrieved result for point ID: bfe3c285-ffc2-4551-a19c-a5900bdd0aa3
[ 2025-08-10 11:32:30,999 ] test_main.py:87 root - INFO - ['page_content', 'url', 'title', 'section', 'terminologies', 'char_count', 'word_count', 'chunk_index', 'page_content', 'url', 'title', 'section', 'terminologies', 'char_count', 'word_count', 'chunk_index', 'page_content', 'url', 'title', 'section', 'terminologies', 'char_count', 'word_count', 'chunk_index', 'page_content', 'url', 'title', 'section', 'terminologies', 'char_count', 'word_count', 'chunk_index', 'page_content', 'url', 'title', 'section', 'terminologies', 'char_count', 'word_count', 'chunk_index', 'page_content', 'url', 'title', 'section', 'terminologies', 'char_count', 'word_count', 'chunk_index', 'page_content', 'url', 'title', 'section', 'terminologies', 'char_count', 'word_count', 'chunk_index', 'page_content', 'url', 'title', 'section', 'terminologies', 'char_count', 'word_count', 'chunk_index', 'page_content', 'url', 'title', 'section', 'terminologies', 'char_count', 'word_count', 'chunk_index', 'page_content', 'url', 'title', 'section', 'terminologies', 'char_count', 'word_count', 'chunk_index']
[ 2025-08-10 11:32:31,000 ] test_main.py:139 root - INFO - Loaded rewritten query user prompt.
[ 2025-08-10 11:32:32,435 ] _client.py:1025 httpx - INFO - HTTP Request: POST https://api.groq.com/openai/v1/chat/completions "HTTP/1.1 200 OK"
[ 2025-08-10 11:32:32,439 ] test_main.py:287 root - INFO - Response for query part 1: Let's craft a workflow to fetch data from your Oracle database and deliver it as an email report. 

Here's a breakdown of the steps involved:

1. **Execute Query:** You'll need to use the `Execute Query` activity to connect to your Oracle database and run your SQL query.  Make sure to provide the necessary connection details (database server, username, password, port, etc.) and your SQL query string.

2. **Format the Results:** The `Execute Query` activity will return the query results as a table. You might want to use activities like `Pivot columns`, `Select columns`, or `Transform using javascript` to structure the data in a way that's easy to read in an email report.

3. **Generate the Report:**  You can use the `Write to file` activity to save the formatted data to a file (e.g., a CSV or Excel file). This file will serve as the basis for your email report.

4. **Send the Email:** The `Send Email` activity will allow you to compose and send the email report. You'll need to specify the recipient's email address, the subject line, and the body of the email. You can attach the generated report file to the email using the `Attach file` option.

**Important Considerations:**

* **Error Handling:**  It's crucial to include error handling in your workflow. Use activities like `Fetch Data Quality errors` to monitor the execution and handle potential issues with the database connection or query execution.

* **Scheduling:** If you need to send the report on a regular basis, consider using a scheduling tool to automate the workflow execution.

* **Security:**  Ensure that your database connection credentials and email settings are securely stored and protected.



Let me know if you have any more questions or need help with specific aspects of the workflow!
[ 2025-08-10 11:32:32,440 ] test_main.py:290 root - INFO - [(Document(metadata={'_id': '2a6c9297-ff5a-4139-bb0d-e87f53ace134', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content="Upload transformed file to destination database\nSetup the 'Oracle' connection, specify tables, and map columns\nSetup automated workflow summary notification\nEnable 'Send Workflow Summary' for email notifications on automated workflow execution\nSchedule and monitor  workflows Schedule or setup 'Webhooks' and 'Emails' to trigger workflows\nDone"), 0.5), (Document(metadata={'_id': 'df9d15c4-2094-450f-95e6-162e03d5828a', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='Creating Infoboard Using A Query\nCreate Infoboard Using A Query\nCreating Infoboard Using API\nCreate Infoboard Using API\nCreating Workflow in Infoveave\nCreating Workflows\nWorkflow Execution Status\nWorkflow Execution Status'), 0.33333334), (Document(metadata={'_id': '323c1ea3-b288-44b0-8825-475a23907e9f', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='Workflow Designer\ncanvas.\nTo add alerts that send email notifications during the workflow, go to the\nAlerts\ntab in the\nWorkflow Setup panel\n.\nToggle\nEnable\nto turn the alert on or off. Select recipient email addresses from the user list. You can choose multiple recipients.\nWrite a custom alert message that is sent when the condition is met.\nWhen setting an execution time alert, toggle\nUse Absolute Time'), 0.25), (Document(metadata={'_id': '65e3aa33-13d7-4688-98fd-7b6a24cbf91e', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='Workflow Designer\ncanvas.\nTo add alerts that send email notifications during the workflow, go to the\nAlerts\ntab in the\nWorkflow Setup panel\n.\nToggle\nEnable\nto turn the alert on or off. Select recipient email addresses from the user list. You can choose multiple recipients.\nWrite a custom alert message that is sent when the condition is met.\nWhen setting an execution time alert, toggle\nUse Absolute Time'), 0.2), (Document(metadata={'_id': '2027003d-7c4e-4b6d-acd3-b391a775ae9a', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='Workflow Alerts | Infoveave Help\nSkip to content\nWorkflow Alerts'), 0.16666667), (Document(metadata={'_id': '81a7ef81-eb12-4bcd-ad2e-403f547e7e50', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='Choose the days on which you want to execute the Workflow. By default, Infoveave sets it to every day. You can select specific days of the week, days of the month, or months.\nClick on the\nAdd'), 0.14285715), (Document(metadata={'_id': '3989b1ef-a79d-4b1d-bce6-79cb5969aa26', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='Choose the days on which you want to execute the Workflow. By default, Infoveave sets it to every day. You can select specific days of the week, days of the month, or months.\nClick on the\nAdd'), 0.125), (Document(metadata={'_id': '3fd7ab5c-2d29-41ea-9ed7-0684f87b08e1', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='Add FTP Download Activity\n0:21\nConfigure FTP Download Activity\n0:31\nAdd Read Excel Files Activity\n0:35\nAdd Transform Activity using Javascript\n0:40\nAdd Round Numbers Activity\n0:46 Add Remove Duplicate Rows Activity\n0:52\nAdd Drop Columns Activity\n0:56\nAdd Rename Columns Activity\n1:01\nAdd Upload to Datasource Activity\n1:08\nExecute the Workflow and View Instance History'), 0.11111111), (Document(metadata={'_id': '2adcd9bd-c3f6-41e9-8c27-26f07adfbe4c', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='Add FTP Download Activity\n0:21\nConfigure FTP Download Activity\n0:31\nAdd Read Excel Files Activity\n0:35\nAdd Transform Activity using Javascript\n0:40\nAdd Round Numbers Activity\n0:46 Add Remove Duplicate Rows Activity\n0:52\nAdd Drop Columns Activity\n0:56\nAdd Rename Columns Activity\n1:01\nAdd Upload to Datasource Activity\n1:08\nExecute the Workflow and View Instance History'), 0.1), (Document(metadata={'_id': 'bfe3c285-ffc2-4551-a19c-a5900bdd0aa3', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='E\nEmailhook trigger The Emailhook trigger initiates a Workflow based on incoming emails. You can set up specific email addresses that serve as Emailhooks. This allows for  automated processing of email-based activities or notifications . This trigger is useful for Workflows that involve email notifications or processing of data received via email.'), 0.09090909)]
[ 2025-08-10 11:32:32,465 ] test_main.py:65 root - INFO - (Document(metadata={'_id': '2a6c9297-ff5a-4139-bb0d-e87f53ace134', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content="Upload transformed file to destination database\nSetup the 'Oracle' connection, specify tables, and map columns\nSetup automated workflow summary notification\nEnable 'Send Workflow Summary' for email notifications on automated workflow execution\nSchedule and monitor  workflows Schedule or setup 'Webhooks' and 'Emails' to trigger workflows\nDone"), 0.5)
[ 2025-08-10 11:32:32,522 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-10 11:32:32,522 ] test_main.py:73 root - INFO - [Record(id='2a6c9297-ff5a-4139-bb0d-e87f53ace134', payload={'url': 'https://infoveave-help.pages.dev/journey/automate-workflows/', 'title': 'automate-workflows', 'section': 'automation', 'terminologies': ['Connections', 'Data Transformation', 'Infoveave', 'Workflows'], 'char_count': 978, 'word_count': 139, 'page_content': "Upload transformed file to destination database\nSetup the 'Oracle' connection, specify tables, and map columns\nSetup automated workflow summary notification\nEnable 'Send Workflow Summary' for email notifications on automated workflow execution\nSchedule and monitor  workflows Schedule or setup 'Webhooks' and 'Emails' to trigger workflows\nDone", 'chunk_index': 2}, vector=None, shard_key=None, order_value=None)]
[ 2025-08-10 11:32:32,523 ] test_main.py:74 root - INFO - Retrieved result for point ID: 2a6c9297-ff5a-4139-bb0d-e87f53ace134
[ 2025-08-10 11:32:32,523 ] test_main.py:65 root - INFO - (Document(metadata={'_id': 'df9d15c4-2094-450f-95e6-162e03d5828a', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='Creating Infoboard Using A Query\nCreate Infoboard Using A Query\nCreating Infoboard Using API\nCreate Infoboard Using API\nCreating Workflow in Infoveave\nCreating Workflows\nWorkflow Execution Status\nWorkflow Execution Status'), 0.33333334)
[ 2025-08-10 11:32:32,586 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-10 11:32:32,587 ] test_main.py:73 root - INFO - [Record(id='df9d15c4-2094-450f-95e6-162e03d5828a', payload={'url': 'https://infoveave-help.pages.dev/videos/', 'title': 'videos', 'section': 'videos', 'terminologies': ['Automation', 'Catalogues', 'Conditional Expressions', 'Custom Calendar', 'Datasources', 'Dimensions', 'Infoboards', 'Infoveave', 'Insights', 'Lists', 'Measures', 'My Organization', 'My Workspace', 'Query', 'Reports', 'SciPyR', 'What-If Analysis', 'What-If Formulae', 'Workflows', 'Workflow Execution Status'], 'char_count': 2430, 'word_count': 338, 'page_content': 'Creating Infoboard Using A Query\nCreate Infoboard Using A Query\nCreating Infoboard Using API\nCreate Infoboard Using API\nCreating Workflow in Infoveave\nCreating Workflows\nWorkflow Execution Status\nWorkflow Execution Status', 'chunk_index': 3}, vector=None, shard_key=None, order_value=None)]
[ 2025-08-10 11:32:32,587 ] test_main.py:74 root - INFO - Retrieved result for point ID: df9d15c4-2094-450f-95e6-162e03d5828a
[ 2025-08-10 11:32:32,587 ] test_main.py:65 root - INFO - (Document(metadata={'_id': '323c1ea3-b288-44b0-8825-475a23907e9f', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='Workflow Designer\ncanvas.\nTo add alerts that send email notifications during the workflow, go to the\nAlerts\ntab in the\nWorkflow Setup panel\n.\nToggle\nEnable\nto turn the alert on or off. Select recipient email addresses from the user list. You can choose multiple recipients.\nWrite a custom alert message that is sent when the condition is met.\nWhen setting an execution time alert, toggle\nUse Absolute Time'), 0.25)
[ 2025-08-10 11:32:32,639 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-10 11:32:32,640 ] test_main.py:73 root - INFO - [Record(id='323c1ea3-b288-44b0-8825-475a23907e9f', payload={'url': 'https://infoveave-help.pages.dev/automation-v8/jobs-v8/create-new-job/', 'title': 'create-new-job', 'section': 'automation', 'terminologies': ['Alerts', 'Automation', 'Infoveave', 'Measures', 'Query', 'Query Report', 'Value', 'Variables', 'View', 'View', 'Workflows'], 'char_count': 4476, 'word_count': 722, 'page_content': 'Workflow Designer\ncanvas.\nTo add alerts that send email notifications during the workflow, go to the\nAlerts\ntab in the\nWorkflow Setup panel\n.\nToggle\nEnable\nto turn the alert on or off. Select recipient email addresses from the user list. You can choose multiple recipients.\nWrite a custom alert message that is sent when the condition is met.\nWhen setting an execution time alert, toggle\nUse Absolute Time', 'chunk_index': 4}, vector=None, shard_key=None, order_value=None)]
[ 2025-08-10 11:32:32,640 ] test_main.py:74 root - INFO - Retrieved result for point ID: 323c1ea3-b288-44b0-8825-475a23907e9f
[ 2025-08-10 11:32:32,640 ] test_main.py:65 root - INFO - (Document(metadata={'_id': '65e3aa33-13d7-4688-98fd-7b6a24cbf91e', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='Workflow Designer\ncanvas.\nTo add alerts that send email notifications during the workflow, go to the\nAlerts\ntab in the\nWorkflow Setup panel\n.\nToggle\nEnable\nto turn the alert on or off. Select recipient email addresses from the user list. You can choose multiple recipients.\nWrite a custom alert message that is sent when the condition is met.\nWhen setting an execution time alert, toggle\nUse Absolute Time'), 0.2)
[ 2025-08-10 11:32:32,701 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-10 11:32:32,702 ] test_main.py:73 root - INFO - [Record(id='65e3aa33-13d7-4688-98fd-7b6a24cbf91e', payload={'url': 'https://infoveave-help.pages.dev/automation-v8/workflows/define-workflow/', 'title': 'define-workflow', 'section': 'automation', 'terminologies': ['Alerts', 'Automation', 'Infoveave', 'Measures', 'Query', 'Query Report', 'Value', 'Variables', 'View', 'View', 'Workflows'], 'char_count': 4476, 'word_count': 722, 'page_content': 'Workflow Designer\ncanvas.\nTo add alerts that send email notifications during the workflow, go to the\nAlerts\ntab in the\nWorkflow Setup panel\n.\nToggle\nEnable\nto turn the alert on or off. Select recipient email addresses from the user list. You can choose multiple recipients.\nWrite a custom alert message that is sent when the condition is met.\nWhen setting an execution time alert, toggle\nUse Absolute Time', 'chunk_index': 4}, vector=None, shard_key=None, order_value=None)]
[ 2025-08-10 11:32:32,702 ] test_main.py:74 root - INFO - Retrieved result for point ID: 65e3aa33-13d7-4688-98fd-7b6a24cbf91e
[ 2025-08-10 11:32:32,702 ] test_main.py:65 root - INFO - (Document(metadata={'_id': '2027003d-7c4e-4b6d-acd3-b391a775ae9a', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='Workflow Alerts | Infoveave Help\nSkip to content\nWorkflow Alerts'), 0.16666667)
[ 2025-08-10 11:32:32,754 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-10 11:32:32,755 ] test_main.py:73 root - INFO - [Record(id='2027003d-7c4e-4b6d-acd3-b391a775ae9a', payload={'url': 'https://infoveave-help.pages.dev/automation-v8/workflows/define-workflow/workflow-alerts-2/', 'title': 'workflow-alerts-2', 'section': 'automation', 'terminologies': ['Alerts', 'Infoveave', 'Workflows', 'Workflow Alerts'], 'char_count': 3832, 'word_count': 620, 'page_content': 'Workflow Alerts | Infoveave Help\nSkip to content\nWorkflow Alerts', 'chunk_index': 0}, vector=None, shard_key=None, order_value=None)]
[ 2025-08-10 11:32:32,756 ] test_main.py:74 root - INFO - Retrieved result for point ID: 2027003d-7c4e-4b6d-acd3-b391a775ae9a
[ 2025-08-10 11:32:32,756 ] test_main.py:65 root - INFO - (Document(metadata={'_id': '81a7ef81-eb12-4bcd-ad2e-403f547e7e50', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='Choose the days on which you want to execute the Workflow. By default, Infoveave sets it to every day. You can select specific days of the week, days of the month, or months.\nClick on the\nAdd'), 0.14285715)
[ 2025-08-10 11:32:32,811 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-10 11:32:32,812 ] test_main.py:73 root - INFO - [Record(id='81a7ef81-eb12-4bcd-ad2e-403f547e7e50', payload={'url': 'https://infoveave-help.pages.dev/automation-v8/jobs-v8/schedule-job/', 'title': 'schedule-job', 'section': 'automation', 'terminologies': ['Automation', 'Cron trigger', 'Emailhook trigger', 'Infoveave', 'Lists', 'Reports', 'Value', 'View', 'View', 'Webhook trigger', 'Workflows', 'Workflow Start trigger'], 'char_count': 5699, 'word_count': 937, 'page_content': 'Choose the days on which you want to execute the Workflow. By default, Infoveave sets it to every day. You can select specific days of the week, days of the month, or months.\nClick on the\nAdd', 'chunk_index': 5}, vector=None, shard_key=None, order_value=None)]
[ 2025-08-10 11:32:32,812 ] test_main.py:74 root - INFO - Retrieved result for point ID: 81a7ef81-eb12-4bcd-ad2e-403f547e7e50
[ 2025-08-10 11:32:32,812 ] test_main.py:65 root - INFO - (Document(metadata={'_id': '3989b1ef-a79d-4b1d-bce6-79cb5969aa26', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='Choose the days on which you want to execute the Workflow. By default, Infoveave sets it to every day. You can select specific days of the week, days of the month, or months.\nClick on the\nAdd'), 0.125)
[ 2025-08-10 11:32:32,865 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-10 11:32:32,865 ] test_main.py:73 root - INFO - [Record(id='3989b1ef-a79d-4b1d-bce6-79cb5969aa26', payload={'url': 'https://infoveave-help.pages.dev/automation-v8/workflows/define-workflow/workflow-start/', 'title': 'workflow-start', 'section': 'automation', 'terminologies': ['Automation', 'Cron trigger', 'Emailhook trigger', 'Infoveave', 'Lists', 'Reports', 'Value', 'View', 'View', 'Webhook trigger', 'Workflows', 'Workflow Start trigger'], 'char_count': 5699, 'word_count': 937, 'page_content': 'Choose the days on which you want to execute the Workflow. By default, Infoveave sets it to every day. You can select specific days of the week, days of the month, or months.\nClick on the\nAdd', 'chunk_index': 5}, vector=None, shard_key=None, order_value=None)]
[ 2025-08-10 11:32:32,866 ] test_main.py:74 root - INFO - Retrieved result for point ID: 3989b1ef-a79d-4b1d-bce6-79cb5969aa26
[ 2025-08-10 11:32:32,866 ] test_main.py:65 root - INFO - (Document(metadata={'_id': '3fd7ab5c-2d29-41ea-9ed7-0684f87b08e1', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='Add FTP Download Activity\n0:21\nConfigure FTP Download Activity\n0:31\nAdd Read Excel Files Activity\n0:35\nAdd Transform Activity using Javascript\n0:40\nAdd Round Numbers Activity\n0:46 Add Remove Duplicate Rows Activity\n0:52\nAdd Drop Columns Activity\n0:56\nAdd Rename Columns Activity\n1:01\nAdd Upload to Datasource Activity\n1:08\nExecute the Workflow and View Instance History'), 0.11111111)
[ 2025-08-10 11:32:32,926 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-10 11:32:32,927 ] test_main.py:73 root - INFO - [Record(id='3fd7ab5c-2d29-41ea-9ed7-0684f87b08e1', payload={'url': 'https://infoveave-help.pages.dev/automation-v8/jobs-v8/create-new-job/', 'title': 'create-new-job', 'section': 'automation', 'terminologies': ['Alerts', 'Automation', 'Infoveave', 'Measures', 'Query', 'Query Report', 'Value', 'Variables', 'View', 'View', 'Workflows'], 'char_count': 4476, 'word_count': 722, 'page_content': 'Add FTP Download Activity\n0:21\nConfigure FTP Download Activity\n0:31\nAdd Read Excel Files Activity\n0:35\nAdd Transform Activity using Javascript\n0:40\nAdd Round Numbers Activity\n0:46 Add Remove Duplicate Rows Activity\n0:52\nAdd Drop Columns Activity\n0:56\nAdd Rename Columns Activity\n1:01\nAdd Upload to Datasource Activity\n1:08\nExecute the Workflow and View Instance History', 'chunk_index': 1}, vector=None, shard_key=None, order_value=None)]
[ 2025-08-10 11:32:32,927 ] test_main.py:74 root - INFO - Retrieved result for point ID: 3fd7ab5c-2d29-41ea-9ed7-0684f87b08e1
[ 2025-08-10 11:32:32,927 ] test_main.py:65 root - INFO - (Document(metadata={'_id': '2adcd9bd-c3f6-41e9-8c27-26f07adfbe4c', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='Add FTP Download Activity\n0:21\nConfigure FTP Download Activity\n0:31\nAdd Read Excel Files Activity\n0:35\nAdd Transform Activity using Javascript\n0:40\nAdd Round Numbers Activity\n0:46 Add Remove Duplicate Rows Activity\n0:52\nAdd Drop Columns Activity\n0:56\nAdd Rename Columns Activity\n1:01\nAdd Upload to Datasource Activity\n1:08\nExecute the Workflow and View Instance History'), 0.1)
[ 2025-08-10 11:32:32,985 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-10 11:32:32,986 ] test_main.py:73 root - INFO - [Record(id='2adcd9bd-c3f6-41e9-8c27-26f07adfbe4c', payload={'url': 'https://infoveave-help.pages.dev/automation-v8/workflows/define-workflow/', 'title': 'define-workflow', 'section': 'automation', 'terminologies': ['Alerts', 'Automation', 'Infoveave', 'Measures', 'Query', 'Query Report', 'Value', 'Variables', 'View', 'View', 'Workflows'], 'char_count': 4476, 'word_count': 722, 'page_content': 'Add FTP Download Activity\n0:21\nConfigure FTP Download Activity\n0:31\nAdd Read Excel Files Activity\n0:35\nAdd Transform Activity using Javascript\n0:40\nAdd Round Numbers Activity\n0:46 Add Remove Duplicate Rows Activity\n0:52\nAdd Drop Columns Activity\n0:56\nAdd Rename Columns Activity\n1:01\nAdd Upload to Datasource Activity\n1:08\nExecute the Workflow and View Instance History', 'chunk_index': 1}, vector=None, shard_key=None, order_value=None)]
[ 2025-08-10 11:32:32,986 ] test_main.py:74 root - INFO - Retrieved result for point ID: 2adcd9bd-c3f6-41e9-8c27-26f07adfbe4c
[ 2025-08-10 11:32:32,986 ] test_main.py:65 root - INFO - (Document(metadata={'_id': 'bfe3c285-ffc2-4551-a19c-a5900bdd0aa3', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='E\nEmailhook trigger The Emailhook trigger initiates a Workflow based on incoming emails. You can set up specific email addresses that serve as Emailhooks. This allows for  automated processing of email-based activities or notifications . This trigger is useful for Workflows that involve email notifications or processing of data received via email.'), 0.09090909)
[ 2025-08-10 11:32:33,049 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-10 11:32:33,050 ] test_main.py:73 root - INFO - [Record(id='bfe3c285-ffc2-4551-a19c-a5900bdd0aa3', payload={'url': 'https://infoveave-help.pages.dev/introduction-to-infoveave/infoveave-terminologies/', 'title': 'infoveave-terminologies', 'section': 'introduction-to-infoveave', 'terminologies': ['Address Book', 'Alerts', 'Audit Log', 'Automation', 'Business Analysis', 'Calculated Columns', 'Calculated Measures', 'Catalogues', 'Client', 'Color Palette', 'Common Dimension filters', 'Component Panel', 'Component', 'Conditional Expressions', 'Connections', 'Control Centre', 'Creator', 'Cron trigger', 'Cube Designer', 'Custom Calendar', 'Custom Email', 'Database Connections', 'Datasources', 'Data Governance', 'Data Ingestion', 'Data Transformation', 'Data Visualization', 'Date Range Filter', 'Designer Canvas', 'Designer Layout', 'Dimensions', 'Domains', 'Emailhook trigger', 'Expression', 'Fixed Filters', 'Grid Layout', 'Hierarchies', 'Holiday Calendar', 'Infoboards', 'Infoboard Setup', 'Infoboard statistics', 'Infoveave', 'Infoveave menu', 'Insights', 'Lists', 'Linked Reports', 'Login statistics', 'Measures', 'ML Analysis', 'ML Model', 'My Organization', 'My Workspace', 'NGuage Forms', 'Query', 'Query Builder', 'Query Report', 'Reports', 'Retention Settings', 'Roles', 'SciPyR', 'Server Statistics', 'SMTP Settings', 'Statistical Analysis', 'Tags', 'Targets and Thresholds', 'Template Reports', 'Tenant', 'Tiers', 'Trash', 'Value', 'Variables', 'Version history', 'View', 'View', 'Viewer', 'Webhook trigger', 'What-If Analysis', 'What-If Formulae', 'Widget Configuration', 'Widget Customization', 'Widget statistics', 'Workflows', 'Workflow Alerts', 'Workflow Execution Status', 'Workflow Start trigger', 'Workflow Variables'], 'char_count': 25220, 'word_count': 3773, 'page_content': 'E\nEmailhook trigger The Emailhook trigger initiates a Workflow based on incoming emails. You can set up specific email addresses that serve as Emailhooks. This allows for  automated processing of email-based activities or notifications . This trigger is useful for Workflows that involve email notifications or processing of data received via email.', 'chunk_index': 13}, vector=None, shard_key=None, order_value=None)]
[ 2025-08-10 11:32:33,050 ] test_main.py:74 root - INFO - Retrieved result for point ID: bfe3c285-ffc2-4551-a19c-a5900bdd0aa3
[ 2025-08-10 11:32:33,050 ] test_main.py:87 root - INFO - ['page_content', 'url', 'title', 'section', 'terminologies', 'char_count', 'word_count', 'chunk_index', 'page_content', 'url', 'title', 'section', 'terminologies', 'char_count', 'word_count', 'chunk_index', 'page_content', 'url', 'title', 'section', 'terminologies', 'char_count', 'word_count', 'chunk_index', 'page_content', 'url', 'title', 'section', 'terminologies', 'char_count', 'word_count', 'chunk_index', 'page_content', 'url', 'title', 'section', 'terminologies', 'char_count', 'word_count', 'chunk_index', 'page_content', 'url', 'title', 'section', 'terminologies', 'char_count', 'word_count', 'chunk_index', 'page_content', 'url', 'title', 'section', 'terminologies', 'char_count', 'word_count', 'chunk_index', 'page_content', 'url', 'title', 'section', 'terminologies', 'char_count', 'word_count', 'chunk_index', 'page_content', 'url', 'title', 'section', 'terminologies', 'char_count', 'word_count', 'chunk_index', 'page_content', 'url', 'title', 'section', 'terminologies', 'char_count', 'word_count', 'chunk_index', 'page_content', 'url', 'title', 'section', 'terminologies', 'char_count', 'word_count', 'chunk_index', 'page_content', 'url', 'title', 'section', 'terminologies', 'char_count', 'word_count', 'chunk_index', 'page_content', 'url', 'title', 'section', 'terminologies', 'char_count', 'word_count', 'chunk_index', 'page_content', 'url', 'title', 'section', 'terminologies', 'char_count', 'word_count', 'chunk_index', 'page_content', 'url', 'title', 'section', 'terminologies', 'char_count', 'word_count', 'chunk_index', 'page_content', 'url', 'title', 'section', 'terminologies', 'char_count', 'word_count', 'chunk_index', 'page_content', 'url', 'title', 'section', 'terminologies', 'char_count', 'word_count', 'chunk_index', 'page_content', 'url', 'title', 'section', 'terminologies', 'char_count', 'word_count', 'chunk_index', 'page_content', 'url', 'title', 'section', 'terminologies', 'char_count', 'word_count', 'chunk_index', 'page_content', 'url', 'title', 'section', 'terminologies', 'char_count', 'word_count', 'chunk_index']
[ 2025-08-10 11:32:33,050 ] test_main.py:326 root - INFO - Found 161 final documents.
[ 2025-08-10 11:32:33,050 ] test_main.py:373 root - INFO - Context prepared for LLM response.
[ 2025-08-10 11:32:33,052 ] test_main.py:419 root - INFO - Single query part response:

[ 2025-08-10 11:32:33,052 ] test_main.py:420 root - INFO - Let's craft a workflow to fetch data from your Oracle database and deliver it as an email report. 

Here's a breakdown of the steps involved:

1. **Execute Query:** You'll need to use the `Execute Query` activity to connect to your Oracle database and run your SQL query.  Make sure to provide the necessary connection details (database server, username, password, port, etc.) and your SQL query string.

2. **Format the Results:** The `Execute Query` activity will return the query results as a table. You might want to use activities like `Pivot columns`, `Select columns`, or `Transform using javascript` to structure the data in a way that's easy to read in an email report.

3. **Generate the Report:**  You can use the `Write to file` activity to save the formatted data to a file (e.g., a CSV or Excel file). This file will serve as the basis for your email report.

4. **Send the Email:** The `Send Email` activity will allow you to compose and send the email report. You'll need to specify the recipient's email address, the subject line, and the body of the email. You can attach the generated report file to the email using the `Attach file` option.

**Important Considerations:**

* **Error Handling:**  It's crucial to include error handling in your workflow. Use activities like `Fetch Data Quality errors` to monitor the execution and handle potential issues with the database connection or query execution.

* **Scheduling:** If you need to send the report on a regular basis, consider using a scheduling tool to automate the workflow execution.

* **Security:**  Ensure that your database connection credentials and email settings are securely stored and protected.



Let me know if you have any more questions or need help with specific aspects of the workflow!
[ 2025-08-10 11:37:32,133 ] test_main.py:152 root - INFO - .........................Starting Infoverve Helper Application.........................
[ 2025-08-10 11:37:32,134 ] test_main.py:168 root - INFO - GROQ_API_KEY loaded.
[ 2025-08-10 11:37:32,142 ] test_main.py:192 root - INFO - Embedding model initialized.
[ 2025-08-10 11:37:32,284 ] _client.py:1025 httpx - INFO - HTTP Request: GET http://ai.infoveave.cloud:6333 "HTTP/1.1 200 OK"
[ 2025-08-10 11:37:32,285 ] test_main.py:196 root - INFO - Connected to Qdrant.
[ 2025-08-10 11:37:32,388 ] _client.py:1025 httpx - INFO - HTTP Request: GET http://ai.infoveave.cloud:6333/collections "HTTP/1.1 200 OK"
[ 2025-08-10 11:37:32,390 ] test_main.py:200 root - INFO - Qdrant collections retrieved.
[ 2025-08-10 11:37:32,390 ] test_main.py:207 root - INFO - Using collection: infoverve_helper_docs_hybrid
[ 2025-08-10 11:37:33,614 ] test_main.py:210 root - INFO - Sparse embeddings initialized.
[ 2025-08-10 11:37:33,662 ] _client.py:1025 httpx - INFO - HTTP Request: GET http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid "HTTP/1.1 200 OK"
[ 2025-08-10 11:37:35,483 ] _client.py:1025 httpx - INFO - HTTP Request: GET http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid "HTTP/1.1 200 OK"
[ 2025-08-10 11:37:35,485 ] test_main.py:222 root - INFO - QdrantVectorStore initialized.
[ 2025-08-10 11:37:35,520 ] test_main.py:228 root - INFO - LLM initialized.
[ 2025-08-10 11:37:36,514 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points/query "HTTP/1.1 200 OK"
[ 2025-08-10 11:37:37,088 ] test_main.py:250 root - INFO - Original query embedding generated.
[ 2025-08-10 11:37:37,113 ] test_main.py:65 root - INFO - Building context with metadata from documents...
[ 2025-08-10 11:37:37,113 ] test_main.py:67 root - INFO - (Document(metadata={'_id': '2a6c9297-ff5a-4139-bb0d-e87f53ace134', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content="Upload transformed file to destination database\nSetup the 'Oracle' connection, specify tables, and map columns\nSetup automated workflow summary notification\nEnable 'Send Workflow Summary' for email notifications on automated workflow execution\nSchedule and monitor  workflows Schedule or setup 'Webhooks' and 'Emails' to trigger workflows\nDone"), 0.5)
[ 2025-08-10 11:37:37,199 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-10 11:37:37,200 ] test_main.py:75 root - INFO - [Record(id='2a6c9297-ff5a-4139-bb0d-e87f53ace134', payload={'url': 'https://infoveave-help.pages.dev/journey/automate-workflows/', 'title': 'automate-workflows', 'section': 'automation', 'terminologies': ['Connections', 'Data Transformation', 'Infoveave', 'Workflows'], 'char_count': 978, 'word_count': 139, 'page_content': "Upload transformed file to destination database\nSetup the 'Oracle' connection, specify tables, and map columns\nSetup automated workflow summary notification\nEnable 'Send Workflow Summary' for email notifications on automated workflow execution\nSchedule and monitor  workflows Schedule or setup 'Webhooks' and 'Emails' to trigger workflows\nDone", 'chunk_index': 2}, vector=None, shard_key=None, order_value=None)]
[ 2025-08-10 11:37:37,200 ] test_main.py:76 root - INFO - Retrieved result for point ID: 2a6c9297-ff5a-4139-bb0d-e87f53ace134
[ 2025-08-10 11:37:37,200 ] test_main.py:67 root - INFO - (Document(metadata={'_id': 'df9d15c4-2094-450f-95e6-162e03d5828a', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='Creating Infoboard Using A Query\nCreate Infoboard Using A Query\nCreating Infoboard Using API\nCreate Infoboard Using API\nCreating Workflow in Infoveave\nCreating Workflows\nWorkflow Execution Status\nWorkflow Execution Status'), 0.33333334)
[ 2025-08-10 11:37:37,264 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-10 11:37:37,265 ] test_main.py:75 root - INFO - [Record(id='df9d15c4-2094-450f-95e6-162e03d5828a', payload={'url': 'https://infoveave-help.pages.dev/videos/', 'title': 'videos', 'section': 'videos', 'terminologies': ['Automation', 'Catalogues', 'Conditional Expressions', 'Custom Calendar', 'Datasources', 'Dimensions', 'Infoboards', 'Infoveave', 'Insights', 'Lists', 'Measures', 'My Organization', 'My Workspace', 'Query', 'Reports', 'SciPyR', 'What-If Analysis', 'What-If Formulae', 'Workflows', 'Workflow Execution Status'], 'char_count': 2430, 'word_count': 338, 'page_content': 'Creating Infoboard Using A Query\nCreate Infoboard Using A Query\nCreating Infoboard Using API\nCreate Infoboard Using API\nCreating Workflow in Infoveave\nCreating Workflows\nWorkflow Execution Status\nWorkflow Execution Status', 'chunk_index': 3}, vector=None, shard_key=None, order_value=None)]
[ 2025-08-10 11:37:37,265 ] test_main.py:76 root - INFO - Retrieved result for point ID: df9d15c4-2094-450f-95e6-162e03d5828a
[ 2025-08-10 11:37:37,265 ] test_main.py:67 root - INFO - (Document(metadata={'_id': '323c1ea3-b288-44b0-8825-475a23907e9f', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='Workflow Designer\ncanvas.\nTo add alerts that send email notifications during the workflow, go to the\nAlerts\ntab in the\nWorkflow Setup panel\n.\nToggle\nEnable\nto turn the alert on or off. Select recipient email addresses from the user list. You can choose multiple recipients.\nWrite a custom alert message that is sent when the condition is met.\nWhen setting an execution time alert, toggle\nUse Absolute Time'), 0.25)
[ 2025-08-10 11:37:37,371 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-10 11:37:37,372 ] test_main.py:75 root - INFO - [Record(id='323c1ea3-b288-44b0-8825-475a23907e9f', payload={'url': 'https://infoveave-help.pages.dev/automation-v8/jobs-v8/create-new-job/', 'title': 'create-new-job', 'section': 'automation', 'terminologies': ['Alerts', 'Automation', 'Infoveave', 'Measures', 'Query', 'Query Report', 'Value', 'Variables', 'View', 'View', 'Workflows'], 'char_count': 4476, 'word_count': 722, 'page_content': 'Workflow Designer\ncanvas.\nTo add alerts that send email notifications during the workflow, go to the\nAlerts\ntab in the\nWorkflow Setup panel\n.\nToggle\nEnable\nto turn the alert on or off. Select recipient email addresses from the user list. You can choose multiple recipients.\nWrite a custom alert message that is sent when the condition is met.\nWhen setting an execution time alert, toggle\nUse Absolute Time', 'chunk_index': 4}, vector=None, shard_key=None, order_value=None)]
[ 2025-08-10 11:37:37,372 ] test_main.py:76 root - INFO - Retrieved result for point ID: 323c1ea3-b288-44b0-8825-475a23907e9f
[ 2025-08-10 11:37:37,372 ] test_main.py:67 root - INFO - (Document(metadata={'_id': '65e3aa33-13d7-4688-98fd-7b6a24cbf91e', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='Workflow Designer\ncanvas.\nTo add alerts that send email notifications during the workflow, go to the\nAlerts\ntab in the\nWorkflow Setup panel\n.\nToggle\nEnable\nto turn the alert on or off. Select recipient email addresses from the user list. You can choose multiple recipients.\nWrite a custom alert message that is sent when the condition is met.\nWhen setting an execution time alert, toggle\nUse Absolute Time'), 0.2)
[ 2025-08-10 11:37:37,446 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-10 11:37:37,448 ] test_main.py:75 root - INFO - [Record(id='65e3aa33-13d7-4688-98fd-7b6a24cbf91e', payload={'url': 'https://infoveave-help.pages.dev/automation-v8/workflows/define-workflow/', 'title': 'define-workflow', 'section': 'automation', 'terminologies': ['Alerts', 'Automation', 'Infoveave', 'Measures', 'Query', 'Query Report', 'Value', 'Variables', 'View', 'View', 'Workflows'], 'char_count': 4476, 'word_count': 722, 'page_content': 'Workflow Designer\ncanvas.\nTo add alerts that send email notifications during the workflow, go to the\nAlerts\ntab in the\nWorkflow Setup panel\n.\nToggle\nEnable\nto turn the alert on or off. Select recipient email addresses from the user list. You can choose multiple recipients.\nWrite a custom alert message that is sent when the condition is met.\nWhen setting an execution time alert, toggle\nUse Absolute Time', 'chunk_index': 4}, vector=None, shard_key=None, order_value=None)]
[ 2025-08-10 11:37:37,448 ] test_main.py:76 root - INFO - Retrieved result for point ID: 65e3aa33-13d7-4688-98fd-7b6a24cbf91e
[ 2025-08-10 11:37:37,448 ] test_main.py:67 root - INFO - (Document(metadata={'_id': '2027003d-7c4e-4b6d-acd3-b391a775ae9a', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='Workflow Alerts | Infoveave Help\nSkip to content\nWorkflow Alerts'), 0.16666667)
[ 2025-08-10 11:37:37,519 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-10 11:37:37,521 ] test_main.py:75 root - INFO - [Record(id='2027003d-7c4e-4b6d-acd3-b391a775ae9a', payload={'url': 'https://infoveave-help.pages.dev/automation-v8/workflows/define-workflow/workflow-alerts-2/', 'title': 'workflow-alerts-2', 'section': 'automation', 'terminologies': ['Alerts', 'Infoveave', 'Workflows', 'Workflow Alerts'], 'char_count': 3832, 'word_count': 620, 'page_content': 'Workflow Alerts | Infoveave Help\nSkip to content\nWorkflow Alerts', 'chunk_index': 0}, vector=None, shard_key=None, order_value=None)]
[ 2025-08-10 11:37:37,521 ] test_main.py:76 root - INFO - Retrieved result for point ID: 2027003d-7c4e-4b6d-acd3-b391a775ae9a
[ 2025-08-10 11:37:37,521 ] test_main.py:67 root - INFO - (Document(metadata={'_id': '81a7ef81-eb12-4bcd-ad2e-403f547e7e50', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='Choose the days on which you want to execute the Workflow. By default, Infoveave sets it to every day. You can select specific days of the week, days of the month, or months.\nClick on the\nAdd'), 0.14285715)
[ 2025-08-10 11:37:37,577 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-10 11:37:37,579 ] test_main.py:75 root - INFO - [Record(id='81a7ef81-eb12-4bcd-ad2e-403f547e7e50', payload={'url': 'https://infoveave-help.pages.dev/automation-v8/jobs-v8/schedule-job/', 'title': 'schedule-job', 'section': 'automation', 'terminologies': ['Automation', 'Cron trigger', 'Emailhook trigger', 'Infoveave', 'Lists', 'Reports', 'Value', 'View', 'View', 'Webhook trigger', 'Workflows', 'Workflow Start trigger'], 'char_count': 5699, 'word_count': 937, 'page_content': 'Choose the days on which you want to execute the Workflow. By default, Infoveave sets it to every day. You can select specific days of the week, days of the month, or months.\nClick on the\nAdd', 'chunk_index': 5}, vector=None, shard_key=None, order_value=None)]
[ 2025-08-10 11:37:37,579 ] test_main.py:76 root - INFO - Retrieved result for point ID: 81a7ef81-eb12-4bcd-ad2e-403f547e7e50
[ 2025-08-10 11:37:37,579 ] test_main.py:67 root - INFO - (Document(metadata={'_id': '3989b1ef-a79d-4b1d-bce6-79cb5969aa26', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='Choose the days on which you want to execute the Workflow. By default, Infoveave sets it to every day. You can select specific days of the week, days of the month, or months.\nClick on the\nAdd'), 0.125)
[ 2025-08-10 11:37:37,632 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-10 11:37:37,634 ] test_main.py:75 root - INFO - [Record(id='3989b1ef-a79d-4b1d-bce6-79cb5969aa26', payload={'url': 'https://infoveave-help.pages.dev/automation-v8/workflows/define-workflow/workflow-start/', 'title': 'workflow-start', 'section': 'automation', 'terminologies': ['Automation', 'Cron trigger', 'Emailhook trigger', 'Infoveave', 'Lists', 'Reports', 'Value', 'View', 'View', 'Webhook trigger', 'Workflows', 'Workflow Start trigger'], 'char_count': 5699, 'word_count': 937, 'page_content': 'Choose the days on which you want to execute the Workflow. By default, Infoveave sets it to every day. You can select specific days of the week, days of the month, or months.\nClick on the\nAdd', 'chunk_index': 5}, vector=None, shard_key=None, order_value=None)]
[ 2025-08-10 11:37:37,634 ] test_main.py:76 root - INFO - Retrieved result for point ID: 3989b1ef-a79d-4b1d-bce6-79cb5969aa26
[ 2025-08-10 11:37:37,634 ] test_main.py:67 root - INFO - (Document(metadata={'_id': '3fd7ab5c-2d29-41ea-9ed7-0684f87b08e1', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='Add FTP Download Activity\n0:21\nConfigure FTP Download Activity\n0:31\nAdd Read Excel Files Activity\n0:35\nAdd Transform Activity using Javascript\n0:40\nAdd Round Numbers Activity\n0:46 Add Remove Duplicate Rows Activity\n0:52\nAdd Drop Columns Activity\n0:56\nAdd Rename Columns Activity\n1:01\nAdd Upload to Datasource Activity\n1:08\nExecute the Workflow and View Instance History'), 0.11111111)
[ 2025-08-10 11:37:37,699 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-10 11:37:37,700 ] test_main.py:75 root - INFO - [Record(id='3fd7ab5c-2d29-41ea-9ed7-0684f87b08e1', payload={'url': 'https://infoveave-help.pages.dev/automation-v8/jobs-v8/create-new-job/', 'title': 'create-new-job', 'section': 'automation', 'terminologies': ['Alerts', 'Automation', 'Infoveave', 'Measures', 'Query', 'Query Report', 'Value', 'Variables', 'View', 'View', 'Workflows'], 'char_count': 4476, 'word_count': 722, 'page_content': 'Add FTP Download Activity\n0:21\nConfigure FTP Download Activity\n0:31\nAdd Read Excel Files Activity\n0:35\nAdd Transform Activity using Javascript\n0:40\nAdd Round Numbers Activity\n0:46 Add Remove Duplicate Rows Activity\n0:52\nAdd Drop Columns Activity\n0:56\nAdd Rename Columns Activity\n1:01\nAdd Upload to Datasource Activity\n1:08\nExecute the Workflow and View Instance History', 'chunk_index': 1}, vector=None, shard_key=None, order_value=None)]
[ 2025-08-10 11:37:37,701 ] test_main.py:76 root - INFO - Retrieved result for point ID: 3fd7ab5c-2d29-41ea-9ed7-0684f87b08e1
[ 2025-08-10 11:37:37,701 ] test_main.py:67 root - INFO - (Document(metadata={'_id': '2adcd9bd-c3f6-41e9-8c27-26f07adfbe4c', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='Add FTP Download Activity\n0:21\nConfigure FTP Download Activity\n0:31\nAdd Read Excel Files Activity\n0:35\nAdd Transform Activity using Javascript\n0:40\nAdd Round Numbers Activity\n0:46 Add Remove Duplicate Rows Activity\n0:52\nAdd Drop Columns Activity\n0:56\nAdd Rename Columns Activity\n1:01\nAdd Upload to Datasource Activity\n1:08\nExecute the Workflow and View Instance History'), 0.1)
[ 2025-08-10 11:37:37,758 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-10 11:37:37,760 ] test_main.py:75 root - INFO - [Record(id='2adcd9bd-c3f6-41e9-8c27-26f07adfbe4c', payload={'url': 'https://infoveave-help.pages.dev/automation-v8/workflows/define-workflow/', 'title': 'define-workflow', 'section': 'automation', 'terminologies': ['Alerts', 'Automation', 'Infoveave', 'Measures', 'Query', 'Query Report', 'Value', 'Variables', 'View', 'View', 'Workflows'], 'char_count': 4476, 'word_count': 722, 'page_content': 'Add FTP Download Activity\n0:21\nConfigure FTP Download Activity\n0:31\nAdd Read Excel Files Activity\n0:35\nAdd Transform Activity using Javascript\n0:40\nAdd Round Numbers Activity\n0:46 Add Remove Duplicate Rows Activity\n0:52\nAdd Drop Columns Activity\n0:56\nAdd Rename Columns Activity\n1:01\nAdd Upload to Datasource Activity\n1:08\nExecute the Workflow and View Instance History', 'chunk_index': 1}, vector=None, shard_key=None, order_value=None)]
[ 2025-08-10 11:37:37,760 ] test_main.py:76 root - INFO - Retrieved result for point ID: 2adcd9bd-c3f6-41e9-8c27-26f07adfbe4c
[ 2025-08-10 11:37:37,760 ] test_main.py:67 root - INFO - (Document(metadata={'_id': 'bfe3c285-ffc2-4551-a19c-a5900bdd0aa3', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='E\nEmailhook trigger The Emailhook trigger initiates a Workflow based on incoming emails. You can set up specific email addresses that serve as Emailhooks. This allows for  automated processing of email-based activities or notifications . This trigger is useful for Workflows that involve email notifications or processing of data received via email.'), 0.09090909)
[ 2025-08-10 11:37:37,817 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-10 11:37:37,865 ] test_main.py:75 root - INFO - [Record(id='bfe3c285-ffc2-4551-a19c-a5900bdd0aa3', payload={'url': 'https://infoveave-help.pages.dev/introduction-to-infoveave/infoveave-terminologies/', 'title': 'infoveave-terminologies', 'section': 'introduction-to-infoveave', 'terminologies': ['Address Book', 'Alerts', 'Audit Log', 'Automation', 'Business Analysis', 'Calculated Columns', 'Calculated Measures', 'Catalogues', 'Client', 'Color Palette', 'Common Dimension filters', 'Component Panel', 'Component', 'Conditional Expressions', 'Connections', 'Control Centre', 'Creator', 'Cron trigger', 'Cube Designer', 'Custom Calendar', 'Custom Email', 'Database Connections', 'Datasources', 'Data Governance', 'Data Ingestion', 'Data Transformation', 'Data Visualization', 'Date Range Filter', 'Designer Canvas', 'Designer Layout', 'Dimensions', 'Domains', 'Emailhook trigger', 'Expression', 'Fixed Filters', 'Grid Layout', 'Hierarchies', 'Holiday Calendar', 'Infoboards', 'Infoboard Setup', 'Infoboard statistics', 'Infoveave', 'Infoveave menu', 'Insights', 'Lists', 'Linked Reports', 'Login statistics', 'Measures', 'ML Analysis', 'ML Model', 'My Organization', 'My Workspace', 'NGuage Forms', 'Query', 'Query Builder', 'Query Report', 'Reports', 'Retention Settings', 'Roles', 'SciPyR', 'Server Statistics', 'SMTP Settings', 'Statistical Analysis', 'Tags', 'Targets and Thresholds', 'Template Reports', 'Tenant', 'Tiers', 'Trash', 'Value', 'Variables', 'Version history', 'View', 'View', 'Viewer', 'Webhook trigger', 'What-If Analysis', 'What-If Formulae', 'Widget Configuration', 'Widget Customization', 'Widget statistics', 'Workflows', 'Workflow Alerts', 'Workflow Execution Status', 'Workflow Start trigger', 'Workflow Variables'], 'char_count': 25220, 'word_count': 3773, 'page_content': 'E\nEmailhook trigger The Emailhook trigger initiates a Workflow based on incoming emails. You can set up specific email addresses that serve as Emailhooks. This allows for  automated processing of email-based activities or notifications . This trigger is useful for Workflows that involve email notifications or processing of data received via email.', 'chunk_index': 13}, vector=None, shard_key=None, order_value=None)]
[ 2025-08-10 11:37:37,865 ] test_main.py:76 root - INFO - Retrieved result for point ID: bfe3c285-ffc2-4551-a19c-a5900bdd0aa3
[ 2025-08-10 11:37:37,865 ] test_main.py:89 root - INFO - ['page_content', 'url', 'title', 'section', 'terminologies', 'char_count', 'word_count', 'chunk_index', 'page_content', 'url', 'title', 'section', 'terminologies', 'char_count', 'word_count', 'chunk_index', 'page_content', 'url', 'title', 'section', 'terminologies', 'char_count', 'word_count', 'chunk_index', 'page_content', 'url', 'title', 'section', 'terminologies', 'char_count', 'word_count', 'chunk_index', 'page_content', 'url', 'title', 'section', 'terminologies', 'char_count', 'word_count', 'chunk_index', 'page_content', 'url', 'title', 'section', 'terminologies', 'char_count', 'word_count', 'chunk_index', 'page_content', 'url', 'title', 'section', 'terminologies', 'char_count', 'word_count', 'chunk_index', 'page_content', 'url', 'title', 'section', 'terminologies', 'char_count', 'word_count', 'chunk_index', 'page_content', 'url', 'title', 'section', 'terminologies', 'char_count', 'word_count', 'chunk_index', 'page_content', 'url', 'title', 'section', 'terminologies', 'char_count', 'word_count', 'chunk_index']
[ 2025-08-10 11:37:37,867 ] test_main.py:102 root - INFO - Loaded rewritten query system prompt.
[ 2025-08-10 11:37:37,867 ] test_main.py:114 root - INFO - Loaded rewritten query user prompt.
[ 2025-08-10 11:37:38,993 ] _client.py:1025 httpx - INFO - HTTP Request: POST https://api.groq.com/openai/v1/chat/completions "HTTP/1.1 200 OK"
[ 2025-08-10 11:37:38,999 ] test_main.py:255 root - INFO - Rewritten query: Execute Query|Send Email
[ 2025-08-10 11:37:38,999 ] test_main.py:262 root - INFO - Rewritten query parts: ['Execute Query', 'Send Email']
[ 2025-08-10 11:37:38,999 ] test_main.py:271 root - INFO - Rewritten Query 1: Execute Query
[ 2025-08-10 11:37:39,437 ] test_main.py:274 root - INFO - Embedding generated for query 1.
[ 2025-08-10 11:37:40,679 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points/query "HTTP/1.1 200 OK"
[ 2025-08-10 11:37:40,725 ] test_main.py:286 root - INFO - Processing query part 1: Execute Query
[ 2025-08-10 11:37:40,756 ] test_main.py:65 root - INFO - Building context with metadata from documents...
[ 2025-08-10 11:37:40,756 ] test_main.py:67 root - INFO - (Document(metadata={'_id': '4bf7f9a7-fc4e-49bc-9caf-4fd89d8160ab', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='Execute Query | Infoveave Help\nSkip to content\nExecute Query\nDescription\nThe\nExecute Query'), 0.5)
[ 2025-08-10 11:37:40,817 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-10 11:37:40,821 ] test_main.py:75 root - INFO - [Record(id='4bf7f9a7-fc4e-49bc-9caf-4fd89d8160ab', payload={'url': 'https://infoveave-help.pages.dev/automation-v8/activities/execute-query/', 'title': 'execute-query', 'section': 'automation', 'terminologies': ['Infoveave', 'Query', 'Reports', 'Value'], 'char_count': 2330, 'word_count': 363, 'page_content': 'Execute Query | Infoveave Help\nSkip to content\nExecute Query\nDescription\nThe\nExecute Query', 'chunk_index': 0}, vector=None, shard_key=None, order_value=None)]
[ 2025-08-10 11:37:40,821 ] test_main.py:76 root - INFO - Retrieved result for point ID: 4bf7f9a7-fc4e-49bc-9caf-4fd89d8160ab
[ 2025-08-10 11:37:40,821 ] test_main.py:67 root - INFO - (Document(metadata={'_id': 'c4316ab6-9c63-42af-b504-74f8cdbc37df', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='This activity connects to your Google Cloud project, runs the specified query, and returns the results in tabular format. It is ideal for pulling real-time analytics, data transformations, or integrating cloud data into your workflow pipelines.\nUse case\n: Fetch customer order data by region for the last quarter directly from BigQuery to feed a dashboard or analytics engine.\nInput\nNot Applicable\nOutput\nOutput Type\nFormat\nDescription\nData\nTable Output of the executed BigQuery SQL query.\nConfiguration Fields\nField Name\nDescription\nConnection\nGoogle BigQuery connection (OAuth or service account). Required for access.\nProject\nGoogle Cloud Project ID containing the BigQuery datasets.\nQuery The SQL query string to be executed. Supports standard SQL syntax.\nSample Input\nNot Applicable\nSample Configuration\nField\nValue\nConnection\nGoogle BigQuery OAuth\nProject\ncustomer-data-analytics\nQuery'), 0.33333334)
[ 2025-08-10 11:37:40,889 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-10 11:37:40,890 ] test_main.py:75 root - INFO - [Record(id='c4316ab6-9c63-42af-b504-74f8cdbc37df', payload={'url': 'https://infoveave-help.pages.dev/automation-v8/activities/fetch-from-bigquery/', 'title': 'fetch-from-bigquery', 'section': 'automation', 'terminologies': ['Infoveave', 'Query', 'Value'], 'char_count': 1338, 'word_count': 194, 'page_content': 'This activity connects to your Google Cloud project, runs the specified query, and returns the results in tabular format. It is ideal for pulling real-time analytics, data transformations, or integrating cloud data into your workflow pipelines.\nUse case\n: Fetch customer order data by region for the last quarter directly from BigQuery to feed a dashboard or analytics engine.\nInput\nNot Applicable\nOutput\nOutput Type\nFormat\nDescription\nData\nTable Output of the executed BigQuery SQL query.\nConfiguration Fields\nField Name\nDescription\nConnection\nGoogle BigQuery connection (OAuth or service account). Required for access.\nProject\nGoogle Cloud Project ID containing the BigQuery datasets.\nQuery The SQL query string to be executed. Supports standard SQL syntax.\nSample Input\nNot Applicable\nSample Configuration\nField\nValue\nConnection\nGoogle BigQuery OAuth\nProject\ncustomer-data-analytics\nQuery', 'chunk_index': 1}, vector=None, shard_key=None, order_value=None)]
[ 2025-08-10 11:37:40,890 ] test_main.py:76 root - INFO - Retrieved result for point ID: c4316ab6-9c63-42af-b504-74f8cdbc37df
[ 2025-08-10 11:37:40,891 ] test_main.py:67 root - INFO - (Document(metadata={'_id': '21c3607e-54d8-44a9-b1b6-12646396ca58', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='activity executes a structured query (e.g., SQL) against a configured data source such as a relational database, data warehouse, or cloud storage engine . You can retrieve the results directly as tabular output or optionally save them to a file using configurable export settings. This activity is especially useful for dynamically pulling data into a workflow, generating reports, or integrating external data systems. When saving results to a file, it also supports advanced formatting using templates, encryption, and partitioning logic. Use this activity to:\nQuery databases and bring live data into workflows\nExport query results as Excel or CSV files\nApply formatting using templates and control sheet/row structure\nSecure output files with encryption and filename customization\nUse case\n: A data analyst can use this activity to run a sales report query on a PostgreSQL database. The output can be formatted using a template Excel file, encrypted using a secret key, and saved with a filename pattern that includes a timestamp.\nInput Type\nDescription\nData\nOptional incoming data used to influence the query or filenames (if dynamic).\nOutput\nOutput Type\nFormat\nDescription\nData\nTable or File Query results, either in-memory (as table) or written to file(s).\nConfiguration Fields\nField Name\nDescription\nDatasource Id Select the connection representing the data source (e.g., MySQL, SQL Server, Snowflake) where the query will run.\nQuery The query string (SQL or supported query language) to be executed on the selected data source. Supports variables if dynamic queries are needed.\nSave As File Enable this option to save the query result to a file instead of returning it as in-memory table data.\nSecret Key\nRequired only when “Save As File” is enabled. This encryption key secures the generated file’s content.'), 0.25)
[ 2025-08-10 11:37:40,965 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-10 11:37:41,014 ] test_main.py:75 root - INFO - [Record(id='21c3607e-54d8-44a9-b1b6-12646396ca58', payload={'url': 'https://infoveave-help.pages.dev/automation-v8/activities/query-datasource/', 'title': 'query-datasource', 'section': 'automation', 'terminologies': ['Infoveave', 'Query', 'Reports', 'Value', 'Variables', 'Workflows'], 'char_count': 3756, 'word_count': 590, 'page_content': 'activity executes a structured query (e.g., SQL) against a configured data source such as a relational database, data warehouse, or cloud storage engine . You can retrieve the results directly as tabular output or optionally save them to a file using configurable export settings. This activity is especially useful for dynamically pulling data into a workflow, generating reports, or integrating external data systems. When saving results to a file, it also supports advanced formatting using templates, encryption, and partitioning logic. Use this activity to:\nQuery databases and bring live data into workflows\nExport query results as Excel or CSV files\nApply formatting using templates and control sheet/row structure\nSecure output files with encryption and filename customization\nUse case\n: A data analyst can use this activity to run a sales report query on a PostgreSQL database. The output can be formatted using a template Excel file, encrypted using a secret key, and saved with a filename pattern that includes a timestamp.\nInput Type\nDescription\nData\nOptional incoming data used to influence the query or filenames (if dynamic).\nOutput\nOutput Type\nFormat\nDescription\nData\nTable or File Query results, either in-memory (as table) or written to file(s).\nConfiguration Fields\nField Name\nDescription\nDatasource Id Select the connection representing the data source (e.g., MySQL, SQL Server, Snowflake) where the query will run.\nQuery The query string (SQL or supported query language) to be executed on the selected data source. Supports variables if dynamic queries are needed.\nSave As File Enable this option to save the query result to a file instead of returning it as in-memory table data.\nSecret Key\nRequired only when “Save As File” is enabled. This encryption key secures the generated file’s content.', 'chunk_index': 1}, vector=None, shard_key=None, order_value=None)]
[ 2025-08-10 11:37:41,015 ] test_main.py:76 root - INFO - Retrieved result for point ID: 21c3607e-54d8-44a9-b1b6-12646396ca58
[ 2025-08-10 11:37:41,015 ] test_main.py:67 root - INFO - (Document(metadata={'_id': '65f1fed2-a4bd-4a52-aa8a-cc0e2c0490f2', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content="activity allows users to execute SQL queries on files or data stored in a connected data source (e.g., database, storage, or file-based system). This activity supports dynamic queries, and optionally allows saving the results to files with encryption, formatting, and custom output configuration.\nUse this activity to:\nExecute ad hoc or parameterized SQL queries on uploaded or connected data Retrieve transformed or filtered data for further processing\nGenerate reports or structured data files from query results\nUse Case\n: Useful in scenarios where data needs to be filtered, joined, aggregated, or reshaped before it’s used in reporting, validation, or export.\nInput\nType\nDescription\nFiles\nFiles/data available in the connection\nOutput\nType Format\nDescription\nData / File\nTable / File\nQuery result as a table or downloadable file\nConfiguration Fields\nField Name\nRequired\nDescription\nConnection\nYes\nConnection to the data source where the query should be executed.\nQuery Yes\nSQL query to be executed on the connected data source.\nSave As File\nNo\nIf enabled, the query result will be saved as a file.\nSecret Key\nConditional Encryption key used to secure the generated output file (enabled only if Save As File is true).\nFile Pattern\nConditional\nPattern for naming the generated files.\nSheet Name\nConditional Sheet name to use in the generated file (for Excel formats).\nFile\nConditional\nTemplate file to structure the output.\nSplit by Column\nConditional\nColumn name used to split the query result into multiple output files.\nStarting Row Conditional\nRow index in the template file from where data insertion begins.\nStarting Column\nConditional\nColumn index in the template file from where data insertion begins.\nSample Input\nNot applicable\n— data is pulled from the connected data source. Sample Configuration\nField\nValue\nConnection\nAzureBlobConnection\nQuery\nSELECT * FROM SalesData WHERE Region = 'East'\nSave As File\ntrue\nSecret Key\nEncrypt@123\nFile Pattern\nSales_Report_[Region]"), 0.2)
[ 2025-08-10 11:37:41,079 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-10 11:37:41,080 ] test_main.py:75 root - INFO - [Record(id='65f1fed2-a4bd-4a52-aa8a-cc0e2c0490f2', payload={'url': 'https://infoveave-help.pages.dev/automation-v8/activities/execute-query/', 'title': 'execute-query', 'section': 'automation', 'terminologies': ['Infoveave', 'Query', 'Reports', 'Value'], 'char_count': 2330, 'word_count': 363, 'page_content': "activity allows users to execute SQL queries on files or data stored in a connected data source (e.g., database, storage, or file-based system). This activity supports dynamic queries, and optionally allows saving the results to files with encryption, formatting, and custom output configuration.\nUse this activity to:\nExecute ad hoc or parameterized SQL queries on uploaded or connected data Retrieve transformed or filtered data for further processing\nGenerate reports or structured data files from query results\nUse Case\n: Useful in scenarios where data needs to be filtered, joined, aggregated, or reshaped before it’s used in reporting, validation, or export.\nInput\nType\nDescription\nFiles\nFiles/data available in the connection\nOutput\nType Format\nDescription\nData / File\nTable / File\nQuery result as a table or downloadable file\nConfiguration Fields\nField Name\nRequired\nDescription\nConnection\nYes\nConnection to the data source where the query should be executed.\nQuery Yes\nSQL query to be executed on the connected data source.\nSave As File\nNo\nIf enabled, the query result will be saved as a file.\nSecret Key\nConditional Encryption key used to secure the generated output file (enabled only if Save As File is true).\nFile Pattern\nConditional\nPattern for naming the generated files.\nSheet Name\nConditional Sheet name to use in the generated file (for Excel formats).\nFile\nConditional\nTemplate file to structure the output.\nSplit by Column\nConditional\nColumn name used to split the query result into multiple output files.\nStarting Row Conditional\nRow index in the template file from where data insertion begins.\nStarting Column\nConditional\nColumn index in the template file from where data insertion begins.\nSample Input\nNot applicable\n— data is pulled from the connected data source. Sample Configuration\nField\nValue\nConnection\nAzureBlobConnection\nQuery\nSELECT * FROM SalesData WHERE Region = 'East'\nSave As File\ntrue\nSecret Key\nEncrypt@123\nFile Pattern\nSales_Report_[Region]", 'chunk_index': 1}, vector=None, shard_key=None, order_value=None)]
[ 2025-08-10 11:37:41,081 ] test_main.py:76 root - INFO - Retrieved result for point ID: 65f1fed2-a4bd-4a52-aa8a-cc0e2c0490f2
[ 2025-08-10 11:37:41,081 ] test_main.py:67 root - INFO - (Document(metadata={'_id': '16772a9b-c89a-4370-ae9b-911286a37769', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content=').\nQuery Column Name\nColumn name to store the query string (portion after\n?\n) without parsing key-value pairs.\nFragment Column Name\nColumn name to store the fragment identifier (portion after\n#\n, if any). Note\n: This activity does not split the query string into key-value pairs — use the\nSplit HTTP Query\nactivity if you need that level of detail.\nSample Input\nemployee_id\nname\nurl\nE001\nJohn Doe'), 0.16666667)
[ 2025-08-10 11:37:41,146 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-10 11:37:41,147 ] test_main.py:75 root - INFO - [Record(id='16772a9b-c89a-4370-ae9b-911286a37769', payload={'url': 'https://infoveave-help.pages.dev/automation-v8/activities/split-url/', 'title': 'split-url', 'section': 'automation', 'terminologies': ['Infoveave', 'Query', 'Reports', 'Value'], 'char_count': 3191, 'word_count': 408, 'page_content': ').\nQuery Column Name\nColumn name to store the query string (portion after\n?\n) without parsing key-value pairs.\nFragment Column Name\nColumn name to store the fragment identifier (portion after\n#\n, if any). Note\n: This activity does not split the query string into key-value pairs — use the\nSplit HTTP Query\nactivity if you need that level of detail.\nSample Input\nemployee_id\nname\nurl\nE001\nJohn Doe', 'chunk_index': 2}, vector=None, shard_key=None, order_value=None)]
[ 2025-08-10 11:37:41,148 ] test_main.py:76 root - INFO - Retrieved result for point ID: 16772a9b-c89a-4370-ae9b-911286a37769
[ 2025-08-10 11:37:41,148 ] test_main.py:89 root - INFO - ['page_content', 'url', 'title', 'section', 'terminologies', 'char_count', 'word_count', 'chunk_index', 'page_content', 'url', 'title', 'section', 'terminologies', 'char_count', 'word_count', 'chunk_index', 'page_content', 'url', 'title', 'section', 'terminologies', 'char_count', 'word_count', 'chunk_index', 'page_content', 'url', 'title', 'section', 'terminologies', 'char_count', 'word_count', 'chunk_index', 'page_content', 'url', 'title', 'section', 'terminologies', 'char_count', 'word_count', 'chunk_index']
[ 2025-08-10 11:37:41,148 ] test_main.py:141 root - INFO - Loaded rewritten query user prompt.
[ 2025-08-10 11:37:41,979 ] _client.py:1025 httpx - INFO - HTTP Request: POST https://api.groq.com/openai/v1/chat/completions "HTTP/1.1 200 OK"
[ 2025-08-10 11:37:41,984 ] test_main.py:289 root - INFO - Response for query part 1: The `Execute Query` activity allows you to run SQL queries against a connected database. 

You can use it to retrieve, update, or delete data from your database. 

Here's a breakdown of how to use it:

1. **Connect to your database:** Before you can execute a query, you need to connect to the database you want to query. This can be done by providing the database connection details, such as the server name, database name, username, and password.

2. **Write your SQL query:** Once you're connected to the database, you can write your SQL query in the query editor. 

3. **Execute the query:** After writing your query, click the "Execute" button to run it against the database.

4. **View the results:** The results of your query will be displayed in a table format. You can then use these results to further process your data or display them to users.

For more detailed information on the `Execute Query` activity, please refer to the official documentation: [https://docs.infoveave.com/](https://docs.infoveave.com/)
[ 2025-08-10 11:37:41,985 ] test_main.py:292 root - INFO - [(Document(metadata={'_id': '4bf7f9a7-fc4e-49bc-9caf-4fd89d8160ab', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='Execute Query | Infoveave Help\nSkip to content\nExecute Query\nDescription\nThe\nExecute Query'), 0.5), (Document(metadata={'_id': 'c4316ab6-9c63-42af-b504-74f8cdbc37df', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='This activity connects to your Google Cloud project, runs the specified query, and returns the results in tabular format. It is ideal for pulling real-time analytics, data transformations, or integrating cloud data into your workflow pipelines.\nUse case\n: Fetch customer order data by region for the last quarter directly from BigQuery to feed a dashboard or analytics engine.\nInput\nNot Applicable\nOutput\nOutput Type\nFormat\nDescription\nData\nTable Output of the executed BigQuery SQL query.\nConfiguration Fields\nField Name\nDescription\nConnection\nGoogle BigQuery connection (OAuth or service account). Required for access.\nProject\nGoogle Cloud Project ID containing the BigQuery datasets.\nQuery The SQL query string to be executed. Supports standard SQL syntax.\nSample Input\nNot Applicable\nSample Configuration\nField\nValue\nConnection\nGoogle BigQuery OAuth\nProject\ncustomer-data-analytics\nQuery'), 0.33333334), (Document(metadata={'_id': '21c3607e-54d8-44a9-b1b6-12646396ca58', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='activity executes a structured query (e.g., SQL) against a configured data source such as a relational database, data warehouse, or cloud storage engine . You can retrieve the results directly as tabular output or optionally save them to a file using configurable export settings. This activity is especially useful for dynamically pulling data into a workflow, generating reports, or integrating external data systems. When saving results to a file, it also supports advanced formatting using templates, encryption, and partitioning logic. Use this activity to:\nQuery databases and bring live data into workflows\nExport query results as Excel or CSV files\nApply formatting using templates and control sheet/row structure\nSecure output files with encryption and filename customization\nUse case\n: A data analyst can use this activity to run a sales report query on a PostgreSQL database. The output can be formatted using a template Excel file, encrypted using a secret key, and saved with a filename pattern that includes a timestamp.\nInput Type\nDescription\nData\nOptional incoming data used to influence the query or filenames (if dynamic).\nOutput\nOutput Type\nFormat\nDescription\nData\nTable or File Query results, either in-memory (as table) or written to file(s).\nConfiguration Fields\nField Name\nDescription\nDatasource Id Select the connection representing the data source (e.g., MySQL, SQL Server, Snowflake) where the query will run.\nQuery The query string (SQL or supported query language) to be executed on the selected data source. Supports variables if dynamic queries are needed.\nSave As File Enable this option to save the query result to a file instead of returning it as in-memory table data.\nSecret Key\nRequired only when “Save As File” is enabled. This encryption key secures the generated file’s content.'), 0.25), (Document(metadata={'_id': '65f1fed2-a4bd-4a52-aa8a-cc0e2c0490f2', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content="activity allows users to execute SQL queries on files or data stored in a connected data source (e.g., database, storage, or file-based system). This activity supports dynamic queries, and optionally allows saving the results to files with encryption, formatting, and custom output configuration.\nUse this activity to:\nExecute ad hoc or parameterized SQL queries on uploaded or connected data Retrieve transformed or filtered data for further processing\nGenerate reports or structured data files from query results\nUse Case\n: Useful in scenarios where data needs to be filtered, joined, aggregated, or reshaped before it’s used in reporting, validation, or export.\nInput\nType\nDescription\nFiles\nFiles/data available in the connection\nOutput\nType Format\nDescription\nData / File\nTable / File\nQuery result as a table or downloadable file\nConfiguration Fields\nField Name\nRequired\nDescription\nConnection\nYes\nConnection to the data source where the query should be executed.\nQuery Yes\nSQL query to be executed on the connected data source.\nSave As File\nNo\nIf enabled, the query result will be saved as a file.\nSecret Key\nConditional Encryption key used to secure the generated output file (enabled only if Save As File is true).\nFile Pattern\nConditional\nPattern for naming the generated files.\nSheet Name\nConditional Sheet name to use in the generated file (for Excel formats).\nFile\nConditional\nTemplate file to structure the output.\nSplit by Column\nConditional\nColumn name used to split the query result into multiple output files.\nStarting Row Conditional\nRow index in the template file from where data insertion begins.\nStarting Column\nConditional\nColumn index in the template file from where data insertion begins.\nSample Input\nNot applicable\n— data is pulled from the connected data source. Sample Configuration\nField\nValue\nConnection\nAzureBlobConnection\nQuery\nSELECT * FROM SalesData WHERE Region = 'East'\nSave As File\ntrue\nSecret Key\nEncrypt@123\nFile Pattern\nSales_Report_[Region]"), 0.2), (Document(metadata={'_id': '16772a9b-c89a-4370-ae9b-911286a37769', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content=').\nQuery Column Name\nColumn name to store the query string (portion after\n?\n) without parsing key-value pairs.\nFragment Column Name\nColumn name to store the fragment identifier (portion after\n#\n, if any). Note\n: This activity does not split the query string into key-value pairs — use the\nSplit HTTP Query\nactivity if you need that level of detail.\nSample Input\nemployee_id\nname\nurl\nE001\nJohn Doe'), 0.16666667)]
[ 2025-08-10 11:37:42,009 ] test_main.py:65 root - INFO - Building context with metadata from documents...
[ 2025-08-10 11:37:42,009 ] test_main.py:67 root - INFO - (Document(metadata={'_id': '4bf7f9a7-fc4e-49bc-9caf-4fd89d8160ab', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='Execute Query | Infoveave Help\nSkip to content\nExecute Query\nDescription\nThe\nExecute Query'), 0.5)
[ 2025-08-10 11:37:42,073 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-10 11:37:42,073 ] test_main.py:75 root - INFO - [Record(id='4bf7f9a7-fc4e-49bc-9caf-4fd89d8160ab', payload={'url': 'https://infoveave-help.pages.dev/automation-v8/activities/execute-query/', 'title': 'execute-query', 'section': 'automation', 'terminologies': ['Infoveave', 'Query', 'Reports', 'Value'], 'char_count': 2330, 'word_count': 363, 'page_content': 'Execute Query | Infoveave Help\nSkip to content\nExecute Query\nDescription\nThe\nExecute Query', 'chunk_index': 0}, vector=None, shard_key=None, order_value=None)]
[ 2025-08-10 11:37:42,073 ] test_main.py:76 root - INFO - Retrieved result for point ID: 4bf7f9a7-fc4e-49bc-9caf-4fd89d8160ab
[ 2025-08-10 11:37:42,074 ] test_main.py:67 root - INFO - (Document(metadata={'_id': 'c4316ab6-9c63-42af-b504-74f8cdbc37df', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='This activity connects to your Google Cloud project, runs the specified query, and returns the results in tabular format. It is ideal for pulling real-time analytics, data transformations, or integrating cloud data into your workflow pipelines.\nUse case\n: Fetch customer order data by region for the last quarter directly from BigQuery to feed a dashboard or analytics engine.\nInput\nNot Applicable\nOutput\nOutput Type\nFormat\nDescription\nData\nTable Output of the executed BigQuery SQL query.\nConfiguration Fields\nField Name\nDescription\nConnection\nGoogle BigQuery connection (OAuth or service account). Required for access.\nProject\nGoogle Cloud Project ID containing the BigQuery datasets.\nQuery The SQL query string to be executed. Supports standard SQL syntax.\nSample Input\nNot Applicable\nSample Configuration\nField\nValue\nConnection\nGoogle BigQuery OAuth\nProject\ncustomer-data-analytics\nQuery'), 0.33333334)
[ 2025-08-10 11:37:42,127 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-10 11:37:42,127 ] test_main.py:75 root - INFO - [Record(id='c4316ab6-9c63-42af-b504-74f8cdbc37df', payload={'url': 'https://infoveave-help.pages.dev/automation-v8/activities/fetch-from-bigquery/', 'title': 'fetch-from-bigquery', 'section': 'automation', 'terminologies': ['Infoveave', 'Query', 'Value'], 'char_count': 1338, 'word_count': 194, 'page_content': 'This activity connects to your Google Cloud project, runs the specified query, and returns the results in tabular format. It is ideal for pulling real-time analytics, data transformations, or integrating cloud data into your workflow pipelines.\nUse case\n: Fetch customer order data by region for the last quarter directly from BigQuery to feed a dashboard or analytics engine.\nInput\nNot Applicable\nOutput\nOutput Type\nFormat\nDescription\nData\nTable Output of the executed BigQuery SQL query.\nConfiguration Fields\nField Name\nDescription\nConnection\nGoogle BigQuery connection (OAuth or service account). Required for access.\nProject\nGoogle Cloud Project ID containing the BigQuery datasets.\nQuery The SQL query string to be executed. Supports standard SQL syntax.\nSample Input\nNot Applicable\nSample Configuration\nField\nValue\nConnection\nGoogle BigQuery OAuth\nProject\ncustomer-data-analytics\nQuery', 'chunk_index': 1}, vector=None, shard_key=None, order_value=None)]
[ 2025-08-10 11:37:42,128 ] test_main.py:76 root - INFO - Retrieved result for point ID: c4316ab6-9c63-42af-b504-74f8cdbc37df
[ 2025-08-10 11:37:42,128 ] test_main.py:67 root - INFO - (Document(metadata={'_id': '21c3607e-54d8-44a9-b1b6-12646396ca58', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='activity executes a structured query (e.g., SQL) against a configured data source such as a relational database, data warehouse, or cloud storage engine . You can retrieve the results directly as tabular output or optionally save them to a file using configurable export settings. This activity is especially useful for dynamically pulling data into a workflow, generating reports, or integrating external data systems. When saving results to a file, it also supports advanced formatting using templates, encryption, and partitioning logic. Use this activity to:\nQuery databases and bring live data into workflows\nExport query results as Excel or CSV files\nApply formatting using templates and control sheet/row structure\nSecure output files with encryption and filename customization\nUse case\n: A data analyst can use this activity to run a sales report query on a PostgreSQL database. The output can be formatted using a template Excel file, encrypted using a secret key, and saved with a filename pattern that includes a timestamp.\nInput Type\nDescription\nData\nOptional incoming data used to influence the query or filenames (if dynamic).\nOutput\nOutput Type\nFormat\nDescription\nData\nTable or File Query results, either in-memory (as table) or written to file(s).\nConfiguration Fields\nField Name\nDescription\nDatasource Id Select the connection representing the data source (e.g., MySQL, SQL Server, Snowflake) where the query will run.\nQuery The query string (SQL or supported query language) to be executed on the selected data source. Supports variables if dynamic queries are needed.\nSave As File Enable this option to save the query result to a file instead of returning it as in-memory table data.\nSecret Key\nRequired only when “Save As File” is enabled. This encryption key secures the generated file’s content.'), 0.25)
[ 2025-08-10 11:37:42,191 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-10 11:37:42,192 ] test_main.py:75 root - INFO - [Record(id='21c3607e-54d8-44a9-b1b6-12646396ca58', payload={'url': 'https://infoveave-help.pages.dev/automation-v8/activities/query-datasource/', 'title': 'query-datasource', 'section': 'automation', 'terminologies': ['Infoveave', 'Query', 'Reports', 'Value', 'Variables', 'Workflows'], 'char_count': 3756, 'word_count': 590, 'page_content': 'activity executes a structured query (e.g., SQL) against a configured data source such as a relational database, data warehouse, or cloud storage engine . You can retrieve the results directly as tabular output or optionally save them to a file using configurable export settings. This activity is especially useful for dynamically pulling data into a workflow, generating reports, or integrating external data systems. When saving results to a file, it also supports advanced formatting using templates, encryption, and partitioning logic. Use this activity to:\nQuery databases and bring live data into workflows\nExport query results as Excel or CSV files\nApply formatting using templates and control sheet/row structure\nSecure output files with encryption and filename customization\nUse case\n: A data analyst can use this activity to run a sales report query on a PostgreSQL database. The output can be formatted using a template Excel file, encrypted using a secret key, and saved with a filename pattern that includes a timestamp.\nInput Type\nDescription\nData\nOptional incoming data used to influence the query or filenames (if dynamic).\nOutput\nOutput Type\nFormat\nDescription\nData\nTable or File Query results, either in-memory (as table) or written to file(s).\nConfiguration Fields\nField Name\nDescription\nDatasource Id Select the connection representing the data source (e.g., MySQL, SQL Server, Snowflake) where the query will run.\nQuery The query string (SQL or supported query language) to be executed on the selected data source. Supports variables if dynamic queries are needed.\nSave As File Enable this option to save the query result to a file instead of returning it as in-memory table data.\nSecret Key\nRequired only when “Save As File” is enabled. This encryption key secures the generated file’s content.', 'chunk_index': 1}, vector=None, shard_key=None, order_value=None)]
[ 2025-08-10 11:37:42,192 ] test_main.py:76 root - INFO - Retrieved result for point ID: 21c3607e-54d8-44a9-b1b6-12646396ca58
[ 2025-08-10 11:37:42,192 ] test_main.py:67 root - INFO - (Document(metadata={'_id': '65f1fed2-a4bd-4a52-aa8a-cc0e2c0490f2', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content="activity allows users to execute SQL queries on files or data stored in a connected data source (e.g., database, storage, or file-based system). This activity supports dynamic queries, and optionally allows saving the results to files with encryption, formatting, and custom output configuration.\nUse this activity to:\nExecute ad hoc or parameterized SQL queries on uploaded or connected data Retrieve transformed or filtered data for further processing\nGenerate reports or structured data files from query results\nUse Case\n: Useful in scenarios where data needs to be filtered, joined, aggregated, or reshaped before it’s used in reporting, validation, or export.\nInput\nType\nDescription\nFiles\nFiles/data available in the connection\nOutput\nType Format\nDescription\nData / File\nTable / File\nQuery result as a table or downloadable file\nConfiguration Fields\nField Name\nRequired\nDescription\nConnection\nYes\nConnection to the data source where the query should be executed.\nQuery Yes\nSQL query to be executed on the connected data source.\nSave As File\nNo\nIf enabled, the query result will be saved as a file.\nSecret Key\nConditional Encryption key used to secure the generated output file (enabled only if Save As File is true).\nFile Pattern\nConditional\nPattern for naming the generated files.\nSheet Name\nConditional Sheet name to use in the generated file (for Excel formats).\nFile\nConditional\nTemplate file to structure the output.\nSplit by Column\nConditional\nColumn name used to split the query result into multiple output files.\nStarting Row Conditional\nRow index in the template file from where data insertion begins.\nStarting Column\nConditional\nColumn index in the template file from where data insertion begins.\nSample Input\nNot applicable\n— data is pulled from the connected data source. Sample Configuration\nField\nValue\nConnection\nAzureBlobConnection\nQuery\nSELECT * FROM SalesData WHERE Region = 'East'\nSave As File\ntrue\nSecret Key\nEncrypt@123\nFile Pattern\nSales_Report_[Region]"), 0.2)
[ 2025-08-10 11:37:42,277 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-10 11:37:42,278 ] test_main.py:75 root - INFO - [Record(id='65f1fed2-a4bd-4a52-aa8a-cc0e2c0490f2', payload={'url': 'https://infoveave-help.pages.dev/automation-v8/activities/execute-query/', 'title': 'execute-query', 'section': 'automation', 'terminologies': ['Infoveave', 'Query', 'Reports', 'Value'], 'char_count': 2330, 'word_count': 363, 'page_content': "activity allows users to execute SQL queries on files or data stored in a connected data source (e.g., database, storage, or file-based system). This activity supports dynamic queries, and optionally allows saving the results to files with encryption, formatting, and custom output configuration.\nUse this activity to:\nExecute ad hoc or parameterized SQL queries on uploaded or connected data Retrieve transformed or filtered data for further processing\nGenerate reports or structured data files from query results\nUse Case\n: Useful in scenarios where data needs to be filtered, joined, aggregated, or reshaped before it’s used in reporting, validation, or export.\nInput\nType\nDescription\nFiles\nFiles/data available in the connection\nOutput\nType Format\nDescription\nData / File\nTable / File\nQuery result as a table or downloadable file\nConfiguration Fields\nField Name\nRequired\nDescription\nConnection\nYes\nConnection to the data source where the query should be executed.\nQuery Yes\nSQL query to be executed on the connected data source.\nSave As File\nNo\nIf enabled, the query result will be saved as a file.\nSecret Key\nConditional Encryption key used to secure the generated output file (enabled only if Save As File is true).\nFile Pattern\nConditional\nPattern for naming the generated files.\nSheet Name\nConditional Sheet name to use in the generated file (for Excel formats).\nFile\nConditional\nTemplate file to structure the output.\nSplit by Column\nConditional\nColumn name used to split the query result into multiple output files.\nStarting Row Conditional\nRow index in the template file from where data insertion begins.\nStarting Column\nConditional\nColumn index in the template file from where data insertion begins.\nSample Input\nNot applicable\n— data is pulled from the connected data source. Sample Configuration\nField\nValue\nConnection\nAzureBlobConnection\nQuery\nSELECT * FROM SalesData WHERE Region = 'East'\nSave As File\ntrue\nSecret Key\nEncrypt@123\nFile Pattern\nSales_Report_[Region]", 'chunk_index': 1}, vector=None, shard_key=None, order_value=None)]
[ 2025-08-10 11:37:42,278 ] test_main.py:76 root - INFO - Retrieved result for point ID: 65f1fed2-a4bd-4a52-aa8a-cc0e2c0490f2
[ 2025-08-10 11:37:42,278 ] test_main.py:67 root - INFO - (Document(metadata={'_id': '16772a9b-c89a-4370-ae9b-911286a37769', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content=').\nQuery Column Name\nColumn name to store the query string (portion after\n?\n) without parsing key-value pairs.\nFragment Column Name\nColumn name to store the fragment identifier (portion after\n#\n, if any). Note\n: This activity does not split the query string into key-value pairs — use the\nSplit HTTP Query\nactivity if you need that level of detail.\nSample Input\nemployee_id\nname\nurl\nE001\nJohn Doe'), 0.16666667)
[ 2025-08-10 11:37:42,339 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-10 11:37:42,340 ] test_main.py:75 root - INFO - [Record(id='16772a9b-c89a-4370-ae9b-911286a37769', payload={'url': 'https://infoveave-help.pages.dev/automation-v8/activities/split-url/', 'title': 'split-url', 'section': 'automation', 'terminologies': ['Infoveave', 'Query', 'Reports', 'Value'], 'char_count': 3191, 'word_count': 408, 'page_content': ').\nQuery Column Name\nColumn name to store the query string (portion after\n?\n) without parsing key-value pairs.\nFragment Column Name\nColumn name to store the fragment identifier (portion after\n#\n, if any). Note\n: This activity does not split the query string into key-value pairs — use the\nSplit HTTP Query\nactivity if you need that level of detail.\nSample Input\nemployee_id\nname\nurl\nE001\nJohn Doe', 'chunk_index': 2}, vector=None, shard_key=None, order_value=None)]
[ 2025-08-10 11:37:42,341 ] test_main.py:76 root - INFO - Retrieved result for point ID: 16772a9b-c89a-4370-ae9b-911286a37769
[ 2025-08-10 11:37:42,341 ] test_main.py:89 root - INFO - ['page_content', 'url', 'title', 'section', 'terminologies', 'char_count', 'word_count', 'chunk_index', 'page_content', 'url', 'title', 'section', 'terminologies', 'char_count', 'word_count', 'chunk_index', 'page_content', 'url', 'title', 'section', 'terminologies', 'char_count', 'word_count', 'chunk_index', 'page_content', 'url', 'title', 'section', 'terminologies', 'char_count', 'word_count', 'chunk_index', 'page_content', 'url', 'title', 'section', 'terminologies', 'char_count', 'word_count', 'chunk_index']
[ 2025-08-10 11:37:42,341 ] test_main.py:271 root - INFO - Rewritten Query 2: Send Email
[ 2025-08-10 11:37:43,094 ] test_main.py:274 root - INFO - Embedding generated for query 2.
[ 2025-08-10 11:37:44,136 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points/query "HTTP/1.1 200 OK"
[ 2025-08-10 11:37:44,138 ] test_main.py:286 root - INFO - Processing query part 2: Send Email
[ 2025-08-10 11:37:44,161 ] test_main.py:65 root - INFO - Building context with metadata from documents...
[ 2025-08-10 11:37:44,161 ] test_main.py:67 root - INFO - (Document(metadata={'_id': 'b0c2000b-2a94-480e-8ade-5ccb489ed9ea', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='Send Email | Infoveave Help\nSkip to content\nSend Email\nDescription\nThe\nSend Email'), 0.5)
[ 2025-08-10 11:37:44,224 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-10 11:37:44,225 ] test_main.py:75 root - INFO - [Record(id='b0c2000b-2a94-480e-8ade-5ccb489ed9ea', payload={'url': 'https://infoveave-help.pages.dev/automation-v8/activities/send-email/', 'title': 'send-email', 'section': 'automation', 'terminologies': ['Infoveave', 'Value'], 'char_count': 3312, 'word_count': 495, 'page_content': 'Send Email | Infoveave Help\nSkip to content\nSend Email\nDescription\nThe\nSend Email', 'chunk_index': 0}, vector=None, shard_key=None, order_value=None)]
[ 2025-08-10 11:37:44,225 ] test_main.py:76 root - INFO - Retrieved result for point ID: b0c2000b-2a94-480e-8ade-5ccb489ed9ea
[ 2025-08-10 11:37:44,225 ] test_main.py:67 root - INFO - (Document(metadata={'_id': 'de5e3b97-dd0f-4d05-8da9-ae3c750c78cc', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='activity allows you to compose and send emails as part of a workflow. You can configure recipient addresses, subject, body content, and attachments . The activity also supports dynamic emailing using fields from input data, and allows the use of pre-designed Infoveave templates for styling and formatting consistency. Use this activity to:\nSend individual or bulk emails based on incoming data\nAttach files generated in the workflow\nFormat emails using templates for consistency\nEmbed processed data directly into the email body\nUse case\n: A workflow generates a monthly sales report and automatically sends personalized emails to each regional manager with their region’s data attached and included in the body.\nInput\nType\nDescription\nData'), 0.33333334)
[ 2025-08-10 11:37:44,291 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-10 11:37:44,292 ] test_main.py:75 root - INFO - [Record(id='de5e3b97-dd0f-4d05-8da9-ae3c750c78cc', payload={'url': 'https://infoveave-help.pages.dev/automation-v8/activities/send-email/', 'title': 'send-email', 'section': 'automation', 'terminologies': ['Infoveave', 'Value'], 'char_count': 3312, 'word_count': 495, 'page_content': 'activity allows you to compose and send emails as part of a workflow. You can configure recipient addresses, subject, body content, and attachments . The activity also supports dynamic emailing using fields from input data, and allows the use of pre-designed Infoveave templates for styling and formatting consistency. Use this activity to:\nSend individual or bulk emails based on incoming data\nAttach files generated in the workflow\nFormat emails using templates for consistency\nEmbed processed data directly into the email body\nUse case\n: A workflow generates a monthly sales report and automatically sends personalized emails to each regional manager with their region’s data attached and included in the body.\nInput\nType\nDescription\nData', 'chunk_index': 1}, vector=None, shard_key=None, order_value=None)]
[ 2025-08-10 11:37:44,292 ] test_main.py:76 root - INFO - Retrieved result for point ID: de5e3b97-dd0f-4d05-8da9-ae3c750c78cc
[ 2025-08-10 11:37:44,292 ] test_main.py:67 root - INFO - (Document(metadata={'_id': '79fddbc7-ebeb-4a13-9afb-02e3c3ec7774', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='(Optional) Tabular data used to populate dynamic fields like email addresses, template content, or attachment grouping.\nOutput\nOutput Type\nFormat\nDescription\nEmail Info\nTable Status of sent emails including recipient, success, and any errors encountered.\nConfiguration Fields\nField Name\nDescription\nConnection\nMail server connection to send emails (OAuth or SMTP supported).\nUse Default Credentials If enabled, uses Infoveave’s default email credentials. Disable to use custom authentication.\nUse Email Address From Data\nIf enabled, pulls recipient addresses from a specified column in the input data.\nEmail Column The column in the data containing the recipient’s email address (required if using email from data).\nEmail To Address\nStatic recipient(s) for the “To” field (comma-separated).\nEmail CC Address Email addresses for the “CC” field (comma-separated).\nEmail BCC Address\nEmail addresses for the “BCC” field.\nSubject\nSubject line of the email. Can be static or mapped from input data.\nContent The main body content of the email. Supports plain text or HTML.\nUse Infoveave Template\nWhen enabled, applies an Infoveave-designed template to the email layout.\nRerun Template Ensures template consistency across multiple emails in the same run.\nAttachment Name\nName of the attachment file (e.g.,\nSalesReport_May2025.xlsx\n).\nSplit By Column Splits data into separate attachments based on values in this column (used in bulk personalization).\nSheet Name\nThe name of the worksheet in the template used for formatting the attachment content.\nSend Data In Email Body If enabled, includes input data as a formatted table within the body of the email.\nAttachment File Pattern\nPattern to identify which files to attach from prior activities (e.g.,\n"*.pdf"\n).\nCombine\nSplit By Column with\nEmail Column\nto send a unique email with corresponding data and attachment per recipient.\nSample Input\nNot applicable\n(used only if sending emails dynamically per row or attaching generated data).\nSample Configuration\nField\nValue'), 0.25)
[ 2025-08-10 11:37:44,349 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-10 11:37:44,354 ] test_main.py:75 root - INFO - [Record(id='79fddbc7-ebeb-4a13-9afb-02e3c3ec7774', payload={'url': 'https://infoveave-help.pages.dev/automation-v8/activities/send-email/', 'title': 'send-email', 'section': 'automation', 'terminologies': ['Infoveave', 'Value'], 'char_count': 3312, 'word_count': 495, 'page_content': '(Optional) Tabular data used to populate dynamic fields like email addresses, template content, or attachment grouping.\nOutput\nOutput Type\nFormat\nDescription\nEmail Info\nTable Status of sent emails including recipient, success, and any errors encountered.\nConfiguration Fields\nField Name\nDescription\nConnection\nMail server connection to send emails (OAuth or SMTP supported).\nUse Default Credentials If enabled, uses Infoveave’s default email credentials. Disable to use custom authentication.\nUse Email Address From Data\nIf enabled, pulls recipient addresses from a specified column in the input data.\nEmail Column The column in the data containing the recipient’s email address (required if using email from data).\nEmail To Address\nStatic recipient(s) for the “To” field (comma-separated).\nEmail CC Address Email addresses for the “CC” field (comma-separated).\nEmail BCC Address\nEmail addresses for the “BCC” field.\nSubject\nSubject line of the email. Can be static or mapped from input data.\nContent The main body content of the email. Supports plain text or HTML.\nUse Infoveave Template\nWhen enabled, applies an Infoveave-designed template to the email layout.\nRerun Template Ensures template consistency across multiple emails in the same run.\nAttachment Name\nName of the attachment file (e.g.,\nSalesReport_May2025.xlsx\n).\nSplit By Column Splits data into separate attachments based on values in this column (used in bulk personalization).\nSheet Name\nThe name of the worksheet in the template used for formatting the attachment content.\nSend Data In Email Body If enabled, includes input data as a formatted table within the body of the email.\nAttachment File Pattern\nPattern to identify which files to attach from prior activities (e.g.,\n"*.pdf"\n).\nCombine\nSplit By Column with\nEmail Column\nto send a unique email with corresponding data and attachment per recipient.\nSample Input\nNot applicable\n(used only if sending emails dynamically per row or attaching generated data).\nSample Configuration\nField\nValue', 'chunk_index': 2}, vector=None, shard_key=None, order_value=None)]
[ 2025-08-10 11:37:44,354 ] test_main.py:76 root - INFO - Retrieved result for point ID: 79fddbc7-ebeb-4a13-9afb-02e3c3ec7774
[ 2025-08-10 11:37:44,354 ] test_main.py:67 root - INFO - (Document(metadata={'_id': 'ea0e4e86-0f23-462b-a182-48cedad8fdd9', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='2025-07-01T10:05:00Z\njohn@example.com\nWelcome Email\n18KB\nonboarding\nev1235\nopened\n2025-07-01T10:08:00Z jane@example.com\nPromo Offer\n22KB\npromotions\nFor\nMessages\nEntity (JSON):\n{\n"headers"\n: {\n"message-id"\n:\n"\n<abc@mailgun.org>'), 0.2)
[ 2025-08-10 11:37:44,406 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-10 11:37:44,407 ] test_main.py:75 root - INFO - [Record(id='ea0e4e86-0f23-462b-a182-48cedad8fdd9', payload={'url': 'https://infoveave-help.pages.dev/automation-v8/activities/mailgun/', 'title': 'mailgun', 'section': 'automation', 'terminologies': ['Infoveave', 'Tags', 'Value', 'Workflows'], 'char_count': 3213, 'word_count': 485, 'page_content': '2025-07-01T10:05:00Z\njohn@example.com\nWelcome Email\n18KB\nonboarding\nev1235\nopened\n2025-07-01T10:08:00Z jane@example.com\nPromo Offer\n22KB\npromotions\nFor\nMessages\nEntity (JSON):\n{\n"headers"\n: {\n"message-id"\n:\n"\n<abc@mailgun.org>', 'chunk_index': 3}, vector=None, shard_key=None, order_value=None)]
[ 2025-08-10 11:37:44,407 ] test_main.py:76 root - INFO - Retrieved result for point ID: ea0e4e86-0f23-462b-a182-48cedad8fdd9
[ 2025-08-10 11:37:44,407 ] test_main.py:67 root - INFO - (Document(metadata={'_id': 'b6d38099-c9de-471f-973c-0f9d734b02ec', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='Activity Step\nReplaced Values\nSendEmail_12345\nStep 1\nCustomerName: John Doe\nSendEmail_67890\nStep 2\nCustomerName: Jane Smith'), 0.16666667)
[ 2025-08-10 11:37:44,467 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-10 11:37:44,468 ] test_main.py:75 root - INFO - [Record(id='b6d38099-c9de-471f-973c-0f9d734b02ec', payload={'url': 'https://infoveave-help.pages.dev/automation-v8/activities/start-iteration/', 'title': 'start-iteration', 'section': 'automation', 'terminologies': ['Infoveave', 'Value'], 'char_count': 2180, 'word_count': 314, 'page_content': 'Activity Step\nReplaced Values\nSendEmail_12345\nStep 1\nCustomerName: John Doe\nSendEmail_67890\nStep 2\nCustomerName: Jane Smith', 'chunk_index': 2}, vector=None, shard_key=None, order_value=None)]
[ 2025-08-10 11:37:44,468 ] test_main.py:76 root - INFO - Retrieved result for point ID: b6d38099-c9de-471f-973c-0f9d734b02ec
[ 2025-08-10 11:37:44,468 ] test_main.py:89 root - INFO - ['page_content', 'url', 'title', 'section', 'terminologies', 'char_count', 'word_count', 'chunk_index', 'page_content', 'url', 'title', 'section', 'terminologies', 'char_count', 'word_count', 'chunk_index', 'page_content', 'url', 'title', 'section', 'terminologies', 'char_count', 'word_count', 'chunk_index', 'page_content', 'url', 'title', 'section', 'terminologies', 'char_count', 'word_count', 'chunk_index', 'page_content', 'url', 'title', 'section', 'terminologies', 'char_count', 'word_count', 'chunk_index']
[ 2025-08-10 11:37:44,469 ] test_main.py:141 root - INFO - Loaded rewritten query user prompt.
[ 2025-08-10 11:37:44,939 ] _client.py:1025 httpx - INFO - HTTP Request: POST https://api.groq.com/openai/v1/chat/completions "HTTP/1.1 200 OK"
[ 2025-08-10 11:37:44,946 ] test_main.py:289 root - INFO - Response for query part 2: The provided context does not contain information about the "Send Email" activity. 

To learn more about the "Send Email" activity, you can refer to the Infoveave documentation or contact Infoveave support.
[ 2025-08-10 11:37:44,946 ] test_main.py:292 root - INFO - [(Document(metadata={'_id': 'b0c2000b-2a94-480e-8ade-5ccb489ed9ea', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='Send Email | Infoveave Help\nSkip to content\nSend Email\nDescription\nThe\nSend Email'), 0.5), (Document(metadata={'_id': 'de5e3b97-dd0f-4d05-8da9-ae3c750c78cc', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='activity allows you to compose and send emails as part of a workflow. You can configure recipient addresses, subject, body content, and attachments . The activity also supports dynamic emailing using fields from input data, and allows the use of pre-designed Infoveave templates for styling and formatting consistency. Use this activity to:\nSend individual or bulk emails based on incoming data\nAttach files generated in the workflow\nFormat emails using templates for consistency\nEmbed processed data directly into the email body\nUse case\n: A workflow generates a monthly sales report and automatically sends personalized emails to each regional manager with their region’s data attached and included in the body.\nInput\nType\nDescription\nData'), 0.33333334), (Document(metadata={'_id': '79fddbc7-ebeb-4a13-9afb-02e3c3ec7774', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='(Optional) Tabular data used to populate dynamic fields like email addresses, template content, or attachment grouping.\nOutput\nOutput Type\nFormat\nDescription\nEmail Info\nTable Status of sent emails including recipient, success, and any errors encountered.\nConfiguration Fields\nField Name\nDescription\nConnection\nMail server connection to send emails (OAuth or SMTP supported).\nUse Default Credentials If enabled, uses Infoveave’s default email credentials. Disable to use custom authentication.\nUse Email Address From Data\nIf enabled, pulls recipient addresses from a specified column in the input data.\nEmail Column The column in the data containing the recipient’s email address (required if using email from data).\nEmail To Address\nStatic recipient(s) for the “To” field (comma-separated).\nEmail CC Address Email addresses for the “CC” field (comma-separated).\nEmail BCC Address\nEmail addresses for the “BCC” field.\nSubject\nSubject line of the email. Can be static or mapped from input data.\nContent The main body content of the email. Supports plain text or HTML.\nUse Infoveave Template\nWhen enabled, applies an Infoveave-designed template to the email layout.\nRerun Template Ensures template consistency across multiple emails in the same run.\nAttachment Name\nName of the attachment file (e.g.,\nSalesReport_May2025.xlsx\n).\nSplit By Column Splits data into separate attachments based on values in this column (used in bulk personalization).\nSheet Name\nThe name of the worksheet in the template used for formatting the attachment content.\nSend Data In Email Body If enabled, includes input data as a formatted table within the body of the email.\nAttachment File Pattern\nPattern to identify which files to attach from prior activities (e.g.,\n"*.pdf"\n).\nCombine\nSplit By Column with\nEmail Column\nto send a unique email with corresponding data and attachment per recipient.\nSample Input\nNot applicable\n(used only if sending emails dynamically per row or attaching generated data).\nSample Configuration\nField\nValue'), 0.25), (Document(metadata={'_id': 'ea0e4e86-0f23-462b-a182-48cedad8fdd9', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='2025-07-01T10:05:00Z\njohn@example.com\nWelcome Email\n18KB\nonboarding\nev1235\nopened\n2025-07-01T10:08:00Z jane@example.com\nPromo Offer\n22KB\npromotions\nFor\nMessages\nEntity (JSON):\n{\n"headers"\n: {\n"message-id"\n:\n"\n<abc@mailgun.org>'), 0.2), (Document(metadata={'_id': 'b6d38099-c9de-471f-973c-0f9d734b02ec', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='Activity Step\nReplaced Values\nSendEmail_12345\nStep 1\nCustomerName: John Doe\nSendEmail_67890\nStep 2\nCustomerName: Jane Smith'), 0.16666667)]
[ 2025-08-10 11:37:44,975 ] test_main.py:65 root - INFO - Building context with metadata from documents...
[ 2025-08-10 11:37:44,975 ] test_main.py:67 root - INFO - (Document(metadata={'_id': 'b0c2000b-2a94-480e-8ade-5ccb489ed9ea', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='Send Email | Infoveave Help\nSkip to content\nSend Email\nDescription\nThe\nSend Email'), 0.5)
[ 2025-08-10 11:37:45,038 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-10 11:37:45,039 ] test_main.py:75 root - INFO - [Record(id='b0c2000b-2a94-480e-8ade-5ccb489ed9ea', payload={'url': 'https://infoveave-help.pages.dev/automation-v8/activities/send-email/', 'title': 'send-email', 'section': 'automation', 'terminologies': ['Infoveave', 'Value'], 'char_count': 3312, 'word_count': 495, 'page_content': 'Send Email | Infoveave Help\nSkip to content\nSend Email\nDescription\nThe\nSend Email', 'chunk_index': 0}, vector=None, shard_key=None, order_value=None)]
[ 2025-08-10 11:37:45,039 ] test_main.py:76 root - INFO - Retrieved result for point ID: b0c2000b-2a94-480e-8ade-5ccb489ed9ea
[ 2025-08-10 11:37:45,039 ] test_main.py:67 root - INFO - (Document(metadata={'_id': 'de5e3b97-dd0f-4d05-8da9-ae3c750c78cc', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='activity allows you to compose and send emails as part of a workflow. You can configure recipient addresses, subject, body content, and attachments . The activity also supports dynamic emailing using fields from input data, and allows the use of pre-designed Infoveave templates for styling and formatting consistency. Use this activity to:\nSend individual or bulk emails based on incoming data\nAttach files generated in the workflow\nFormat emails using templates for consistency\nEmbed processed data directly into the email body\nUse case\n: A workflow generates a monthly sales report and automatically sends personalized emails to each regional manager with their region’s data attached and included in the body.\nInput\nType\nDescription\nData'), 0.33333334)
[ 2025-08-10 11:37:45,099 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-10 11:37:45,100 ] test_main.py:75 root - INFO - [Record(id='de5e3b97-dd0f-4d05-8da9-ae3c750c78cc', payload={'url': 'https://infoveave-help.pages.dev/automation-v8/activities/send-email/', 'title': 'send-email', 'section': 'automation', 'terminologies': ['Infoveave', 'Value'], 'char_count': 3312, 'word_count': 495, 'page_content': 'activity allows you to compose and send emails as part of a workflow. You can configure recipient addresses, subject, body content, and attachments . The activity also supports dynamic emailing using fields from input data, and allows the use of pre-designed Infoveave templates for styling and formatting consistency. Use this activity to:\nSend individual or bulk emails based on incoming data\nAttach files generated in the workflow\nFormat emails using templates for consistency\nEmbed processed data directly into the email body\nUse case\n: A workflow generates a monthly sales report and automatically sends personalized emails to each regional manager with their region’s data attached and included in the body.\nInput\nType\nDescription\nData', 'chunk_index': 1}, vector=None, shard_key=None, order_value=None)]
[ 2025-08-10 11:37:45,100 ] test_main.py:76 root - INFO - Retrieved result for point ID: de5e3b97-dd0f-4d05-8da9-ae3c750c78cc
[ 2025-08-10 11:37:45,100 ] test_main.py:67 root - INFO - (Document(metadata={'_id': '79fddbc7-ebeb-4a13-9afb-02e3c3ec7774', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='(Optional) Tabular data used to populate dynamic fields like email addresses, template content, or attachment grouping.\nOutput\nOutput Type\nFormat\nDescription\nEmail Info\nTable Status of sent emails including recipient, success, and any errors encountered.\nConfiguration Fields\nField Name\nDescription\nConnection\nMail server connection to send emails (OAuth or SMTP supported).\nUse Default Credentials If enabled, uses Infoveave’s default email credentials. Disable to use custom authentication.\nUse Email Address From Data\nIf enabled, pulls recipient addresses from a specified column in the input data.\nEmail Column The column in the data containing the recipient’s email address (required if using email from data).\nEmail To Address\nStatic recipient(s) for the “To” field (comma-separated).\nEmail CC Address Email addresses for the “CC” field (comma-separated).\nEmail BCC Address\nEmail addresses for the “BCC” field.\nSubject\nSubject line of the email. Can be static or mapped from input data.\nContent The main body content of the email. Supports plain text or HTML.\nUse Infoveave Template\nWhen enabled, applies an Infoveave-designed template to the email layout.\nRerun Template Ensures template consistency across multiple emails in the same run.\nAttachment Name\nName of the attachment file (e.g.,\nSalesReport_May2025.xlsx\n).\nSplit By Column Splits data into separate attachments based on values in this column (used in bulk personalization).\nSheet Name\nThe name of the worksheet in the template used for formatting the attachment content.\nSend Data In Email Body If enabled, includes input data as a formatted table within the body of the email.\nAttachment File Pattern\nPattern to identify which files to attach from prior activities (e.g.,\n"*.pdf"\n).\nCombine\nSplit By Column with\nEmail Column\nto send a unique email with corresponding data and attachment per recipient.\nSample Input\nNot applicable\n(used only if sending emails dynamically per row or attaching generated data).\nSample Configuration\nField\nValue'), 0.25)
[ 2025-08-10 11:37:45,164 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-10 11:37:45,165 ] test_main.py:75 root - INFO - [Record(id='79fddbc7-ebeb-4a13-9afb-02e3c3ec7774', payload={'url': 'https://infoveave-help.pages.dev/automation-v8/activities/send-email/', 'title': 'send-email', 'section': 'automation', 'terminologies': ['Infoveave', 'Value'], 'char_count': 3312, 'word_count': 495, 'page_content': '(Optional) Tabular data used to populate dynamic fields like email addresses, template content, or attachment grouping.\nOutput\nOutput Type\nFormat\nDescription\nEmail Info\nTable Status of sent emails including recipient, success, and any errors encountered.\nConfiguration Fields\nField Name\nDescription\nConnection\nMail server connection to send emails (OAuth or SMTP supported).\nUse Default Credentials If enabled, uses Infoveave’s default email credentials. Disable to use custom authentication.\nUse Email Address From Data\nIf enabled, pulls recipient addresses from a specified column in the input data.\nEmail Column The column in the data containing the recipient’s email address (required if using email from data).\nEmail To Address\nStatic recipient(s) for the “To” field (comma-separated).\nEmail CC Address Email addresses for the “CC” field (comma-separated).\nEmail BCC Address\nEmail addresses for the “BCC” field.\nSubject\nSubject line of the email. Can be static or mapped from input data.\nContent The main body content of the email. Supports plain text or HTML.\nUse Infoveave Template\nWhen enabled, applies an Infoveave-designed template to the email layout.\nRerun Template Ensures template consistency across multiple emails in the same run.\nAttachment Name\nName of the attachment file (e.g.,\nSalesReport_May2025.xlsx\n).\nSplit By Column Splits data into separate attachments based on values in this column (used in bulk personalization).\nSheet Name\nThe name of the worksheet in the template used for formatting the attachment content.\nSend Data In Email Body If enabled, includes input data as a formatted table within the body of the email.\nAttachment File Pattern\nPattern to identify which files to attach from prior activities (e.g.,\n"*.pdf"\n).\nCombine\nSplit By Column with\nEmail Column\nto send a unique email with corresponding data and attachment per recipient.\nSample Input\nNot applicable\n(used only if sending emails dynamically per row or attaching generated data).\nSample Configuration\nField\nValue', 'chunk_index': 2}, vector=None, shard_key=None, order_value=None)]
[ 2025-08-10 11:37:45,165 ] test_main.py:76 root - INFO - Retrieved result for point ID: 79fddbc7-ebeb-4a13-9afb-02e3c3ec7774
[ 2025-08-10 11:37:45,165 ] test_main.py:67 root - INFO - (Document(metadata={'_id': 'ea0e4e86-0f23-462b-a182-48cedad8fdd9', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='2025-07-01T10:05:00Z\njohn@example.com\nWelcome Email\n18KB\nonboarding\nev1235\nopened\n2025-07-01T10:08:00Z jane@example.com\nPromo Offer\n22KB\npromotions\nFor\nMessages\nEntity (JSON):\n{\n"headers"\n: {\n"message-id"\n:\n"\n<abc@mailgun.org>'), 0.2)
[ 2025-08-10 11:37:45,215 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-10 11:37:45,216 ] test_main.py:75 root - INFO - [Record(id='ea0e4e86-0f23-462b-a182-48cedad8fdd9', payload={'url': 'https://infoveave-help.pages.dev/automation-v8/activities/mailgun/', 'title': 'mailgun', 'section': 'automation', 'terminologies': ['Infoveave', 'Tags', 'Value', 'Workflows'], 'char_count': 3213, 'word_count': 485, 'page_content': '2025-07-01T10:05:00Z\njohn@example.com\nWelcome Email\n18KB\nonboarding\nev1235\nopened\n2025-07-01T10:08:00Z jane@example.com\nPromo Offer\n22KB\npromotions\nFor\nMessages\nEntity (JSON):\n{\n"headers"\n: {\n"message-id"\n:\n"\n<abc@mailgun.org>', 'chunk_index': 3}, vector=None, shard_key=None, order_value=None)]
[ 2025-08-10 11:37:45,217 ] test_main.py:76 root - INFO - Retrieved result for point ID: ea0e4e86-0f23-462b-a182-48cedad8fdd9
[ 2025-08-10 11:37:45,217 ] test_main.py:67 root - INFO - (Document(metadata={'_id': 'b6d38099-c9de-471f-973c-0f9d734b02ec', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='Activity Step\nReplaced Values\nSendEmail_12345\nStep 1\nCustomerName: John Doe\nSendEmail_67890\nStep 2\nCustomerName: Jane Smith'), 0.16666667)
[ 2025-08-10 11:37:45,274 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-10 11:37:45,275 ] test_main.py:75 root - INFO - [Record(id='b6d38099-c9de-471f-973c-0f9d734b02ec', payload={'url': 'https://infoveave-help.pages.dev/automation-v8/activities/start-iteration/', 'title': 'start-iteration', 'section': 'automation', 'terminologies': ['Infoveave', 'Value'], 'char_count': 2180, 'word_count': 314, 'page_content': 'Activity Step\nReplaced Values\nSendEmail_12345\nStep 1\nCustomerName: John Doe\nSendEmail_67890\nStep 2\nCustomerName: Jane Smith', 'chunk_index': 2}, vector=None, shard_key=None, order_value=None)]
[ 2025-08-10 11:37:45,275 ] test_main.py:76 root - INFO - Retrieved result for point ID: b6d38099-c9de-471f-973c-0f9d734b02ec
[ 2025-08-10 11:37:45,275 ] test_main.py:89 root - INFO - ['page_content', 'url', 'title', 'section', 'terminologies', 'char_count', 'word_count', 'chunk_index', 'page_content', 'url', 'title', 'section', 'terminologies', 'char_count', 'word_count', 'chunk_index', 'page_content', 'url', 'title', 'section', 'terminologies', 'char_count', 'word_count', 'chunk_index', 'page_content', 'url', 'title', 'section', 'terminologies', 'char_count', 'word_count', 'chunk_index', 'page_content', 'url', 'title', 'section', 'terminologies', 'char_count', 'word_count', 'chunk_index']
[ 2025-08-10 11:37:45,275 ] test_main.py:328 root - INFO - Found 2 final documents.
[ 2025-08-10 11:37:45,275 ] test_main.py:375 root - INFO - Context prepared for LLM response.
[ 2025-08-10 11:37:45,294 ] test_main.py:403 root - INFO - Generating final answer using LLM...
[ 2025-08-10 11:37:46,611 ] _client.py:1025 httpx - INFO - HTTP Request: POST https://api.groq.com/openai/v1/chat/completions "HTTP/1.1 200 OK"
[ 2025-08-10 11:37:46,620 ] test_main.py:405 root - INFO - Final LLM Response:

[ 2025-08-10 11:37:46,620 ] test_main.py:406 root - INFO - To create a workflow that runs a query from an Oracle DB and sends the results as an email report, you'll need to use two activities: `Execute Query` and `Send Email`. 

Here's a breakdown of how to use each activity:

**1. Execute Query:**

The `Execute Query` activity allows you to run SQL queries against a connected database. You can use it to retrieve, update, or delete data from your database. 

Here's how to use it:

* **Connect to your database:** Before you can execute a query, you need to connect to the Oracle database you want to query. This can be done by providing the database connection details, such as the server name (e.g., `myoracle.example.com`), database name (e.g., `mydatabase`), username (e.g., `myuser`), and password (e.g., `mypassword`).

* **Write your SQL query:** Once you're connected to the database, you can write your SQL query in the query editor. For example, to retrieve all customers from a table named `customers`:

```sql
SELECT * FROM customers;
```

* **Execute the query:** After writing your query, click the "Execute" button to run it against the database.

* **View the results:** The results of your query will be displayed in a table format. You can then use these results to further process your data or display them to users.

**2. Send Email:**

The provided context does not contain information about the "Send Email" activity. To learn more about the "Send Email" activity, you can refer to the Infoveave documentation or contact Infoveave support.

**Workflow Example:**

1. **Connect to Oracle DB:** Configure the `Execute Query` activity to connect to your Oracle database using the necessary credentials.

2. **Execute Query:** Write your SQL query to retrieve the desired data from the Oracle database.

3. **Format Results:**  Use Infoveave's data transformation capabilities to format the query results into a presentable report. You can use features like pivoting, grouping, and formatting to structure the data effectively.

4. **Send Email:** Configure the `Send Email` activity to send the formatted report as an email attachment. Specify the recipient email address, subject line, and any other necessary email details.




[ 2025-08-10 11:37:46,621 ] test_main.py:413 root - INFO - LLM response saved to ./data/results/infoverve_helper_response.md
[ 2025-08-10 11:39:23,075 ] test_main.py:152 root - INFO - .........................Starting Infoverve Helper Application.........................
[ 2025-08-10 11:39:23,077 ] test_main.py:168 root - INFO - GROQ_API_KEY loaded.
[ 2025-08-10 11:39:23,094 ] test_main.py:192 root - INFO - Embedding model initialized.
[ 2025-08-10 11:39:23,292 ] _client.py:1025 httpx - INFO - HTTP Request: GET http://ai.infoveave.cloud:6333 "HTTP/1.1 200 OK"
[ 2025-08-10 11:39:23,294 ] test_main.py:196 root - INFO - Connected to Qdrant.
[ 2025-08-10 11:39:23,441 ] _client.py:1025 httpx - INFO - HTTP Request: GET http://ai.infoveave.cloud:6333/collections "HTTP/1.1 200 OK"
[ 2025-08-10 11:39:23,442 ] test_main.py:200 root - INFO - Qdrant collections retrieved.
[ 2025-08-10 11:39:23,442 ] test_main.py:207 root - INFO - Using collection: infoverve_helper_docs_hybrid
[ 2025-08-10 11:39:24,616 ] test_main.py:210 root - INFO - Sparse embeddings initialized.
[ 2025-08-10 11:39:24,677 ] _client.py:1025 httpx - INFO - HTTP Request: GET http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid "HTTP/1.1 200 OK"
[ 2025-08-10 11:39:26,091 ] _client.py:1025 httpx - INFO - HTTP Request: GET http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid "HTTP/1.1 200 OK"
[ 2025-08-10 11:39:26,093 ] test_main.py:222 root - INFO - QdrantVectorStore initialized.
[ 2025-08-10 11:39:26,126 ] test_main.py:228 root - INFO - LLM initialized.
[ 2025-08-10 11:39:27,075 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points/query "HTTP/1.1 200 OK"
[ 2025-08-10 11:39:27,851 ] test_main.py:250 root - INFO - Original query embedding generated.
[ 2025-08-10 11:39:27,874 ] test_main.py:65 root - INFO - Building context with metadata from documents...
[ 2025-08-10 11:39:27,874 ] test_main.py:67 root - INFO - (Document(metadata={'_id': '2a6c9297-ff5a-4139-bb0d-e87f53ace134', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content="Upload transformed file to destination database\nSetup the 'Oracle' connection, specify tables, and map columns\nSetup automated workflow summary notification\nEnable 'Send Workflow Summary' for email notifications on automated workflow execution\nSchedule and monitor  workflows Schedule or setup 'Webhooks' and 'Emails' to trigger workflows\nDone"), 0.5)
[ 2025-08-10 11:39:27,941 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-10 11:39:27,942 ] test_main.py:75 root - INFO - [Record(id='2a6c9297-ff5a-4139-bb0d-e87f53ace134', payload={'url': 'https://infoveave-help.pages.dev/journey/automate-workflows/', 'title': 'automate-workflows', 'section': 'automation', 'terminologies': ['Connections', 'Data Transformation', 'Infoveave', 'Workflows'], 'char_count': 978, 'word_count': 139, 'page_content': "Upload transformed file to destination database\nSetup the 'Oracle' connection, specify tables, and map columns\nSetup automated workflow summary notification\nEnable 'Send Workflow Summary' for email notifications on automated workflow execution\nSchedule and monitor  workflows Schedule or setup 'Webhooks' and 'Emails' to trigger workflows\nDone", 'chunk_index': 2}, vector=None, shard_key=None, order_value=None)]
[ 2025-08-10 11:39:27,942 ] test_main.py:76 root - INFO - Retrieved result for point ID: 2a6c9297-ff5a-4139-bb0d-e87f53ace134
[ 2025-08-10 11:39:27,942 ] test_main.py:67 root - INFO - (Document(metadata={'_id': 'df9d15c4-2094-450f-95e6-162e03d5828a', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='Creating Infoboard Using A Query\nCreate Infoboard Using A Query\nCreating Infoboard Using API\nCreate Infoboard Using API\nCreating Workflow in Infoveave\nCreating Workflows\nWorkflow Execution Status\nWorkflow Execution Status'), 0.33333334)
[ 2025-08-10 11:39:28,005 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-10 11:39:28,010 ] test_main.py:75 root - INFO - [Record(id='df9d15c4-2094-450f-95e6-162e03d5828a', payload={'url': 'https://infoveave-help.pages.dev/videos/', 'title': 'videos', 'section': 'videos', 'terminologies': ['Automation', 'Catalogues', 'Conditional Expressions', 'Custom Calendar', 'Datasources', 'Dimensions', 'Infoboards', 'Infoveave', 'Insights', 'Lists', 'Measures', 'My Organization', 'My Workspace', 'Query', 'Reports', 'SciPyR', 'What-If Analysis', 'What-If Formulae', 'Workflows', 'Workflow Execution Status'], 'char_count': 2430, 'word_count': 338, 'page_content': 'Creating Infoboard Using A Query\nCreate Infoboard Using A Query\nCreating Infoboard Using API\nCreate Infoboard Using API\nCreating Workflow in Infoveave\nCreating Workflows\nWorkflow Execution Status\nWorkflow Execution Status', 'chunk_index': 3}, vector=None, shard_key=None, order_value=None)]
[ 2025-08-10 11:39:28,010 ] test_main.py:76 root - INFO - Retrieved result for point ID: df9d15c4-2094-450f-95e6-162e03d5828a
[ 2025-08-10 11:39:28,010 ] test_main.py:67 root - INFO - (Document(metadata={'_id': '323c1ea3-b288-44b0-8825-475a23907e9f', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='Workflow Designer\ncanvas.\nTo add alerts that send email notifications during the workflow, go to the\nAlerts\ntab in the\nWorkflow Setup panel\n.\nToggle\nEnable\nto turn the alert on or off. Select recipient email addresses from the user list. You can choose multiple recipients.\nWrite a custom alert message that is sent when the condition is met.\nWhen setting an execution time alert, toggle\nUse Absolute Time'), 0.25)
[ 2025-08-10 11:39:28,075 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-10 11:39:28,076 ] test_main.py:75 root - INFO - [Record(id='323c1ea3-b288-44b0-8825-475a23907e9f', payload={'url': 'https://infoveave-help.pages.dev/automation-v8/jobs-v8/create-new-job/', 'title': 'create-new-job', 'section': 'automation', 'terminologies': ['Alerts', 'Automation', 'Infoveave', 'Measures', 'Query', 'Query Report', 'Value', 'Variables', 'View', 'View', 'Workflows'], 'char_count': 4476, 'word_count': 722, 'page_content': 'Workflow Designer\ncanvas.\nTo add alerts that send email notifications during the workflow, go to the\nAlerts\ntab in the\nWorkflow Setup panel\n.\nToggle\nEnable\nto turn the alert on or off. Select recipient email addresses from the user list. You can choose multiple recipients.\nWrite a custom alert message that is sent when the condition is met.\nWhen setting an execution time alert, toggle\nUse Absolute Time', 'chunk_index': 4}, vector=None, shard_key=None, order_value=None)]
[ 2025-08-10 11:39:28,076 ] test_main.py:76 root - INFO - Retrieved result for point ID: 323c1ea3-b288-44b0-8825-475a23907e9f
[ 2025-08-10 11:39:28,077 ] test_main.py:67 root - INFO - (Document(metadata={'_id': '65e3aa33-13d7-4688-98fd-7b6a24cbf91e', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='Workflow Designer\ncanvas.\nTo add alerts that send email notifications during the workflow, go to the\nAlerts\ntab in the\nWorkflow Setup panel\n.\nToggle\nEnable\nto turn the alert on or off. Select recipient email addresses from the user list. You can choose multiple recipients.\nWrite a custom alert message that is sent when the condition is met.\nWhen setting an execution time alert, toggle\nUse Absolute Time'), 0.2)
[ 2025-08-10 11:39:28,137 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-10 11:39:28,138 ] test_main.py:75 root - INFO - [Record(id='65e3aa33-13d7-4688-98fd-7b6a24cbf91e', payload={'url': 'https://infoveave-help.pages.dev/automation-v8/workflows/define-workflow/', 'title': 'define-workflow', 'section': 'automation', 'terminologies': ['Alerts', 'Automation', 'Infoveave', 'Measures', 'Query', 'Query Report', 'Value', 'Variables', 'View', 'View', 'Workflows'], 'char_count': 4476, 'word_count': 722, 'page_content': 'Workflow Designer\ncanvas.\nTo add alerts that send email notifications during the workflow, go to the\nAlerts\ntab in the\nWorkflow Setup panel\n.\nToggle\nEnable\nto turn the alert on or off. Select recipient email addresses from the user list. You can choose multiple recipients.\nWrite a custom alert message that is sent when the condition is met.\nWhen setting an execution time alert, toggle\nUse Absolute Time', 'chunk_index': 4}, vector=None, shard_key=None, order_value=None)]
[ 2025-08-10 11:39:28,139 ] test_main.py:76 root - INFO - Retrieved result for point ID: 65e3aa33-13d7-4688-98fd-7b6a24cbf91e
[ 2025-08-10 11:39:28,139 ] test_main.py:67 root - INFO - (Document(metadata={'_id': '2027003d-7c4e-4b6d-acd3-b391a775ae9a', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='Workflow Alerts | Infoveave Help\nSkip to content\nWorkflow Alerts'), 0.16666667)
[ 2025-08-10 11:39:28,199 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-10 11:39:28,200 ] test_main.py:75 root - INFO - [Record(id='2027003d-7c4e-4b6d-acd3-b391a775ae9a', payload={'url': 'https://infoveave-help.pages.dev/automation-v8/workflows/define-workflow/workflow-alerts-2/', 'title': 'workflow-alerts-2', 'section': 'automation', 'terminologies': ['Alerts', 'Infoveave', 'Workflows', 'Workflow Alerts'], 'char_count': 3832, 'word_count': 620, 'page_content': 'Workflow Alerts | Infoveave Help\nSkip to content\nWorkflow Alerts', 'chunk_index': 0}, vector=None, shard_key=None, order_value=None)]
[ 2025-08-10 11:39:28,200 ] test_main.py:76 root - INFO - Retrieved result for point ID: 2027003d-7c4e-4b6d-acd3-b391a775ae9a
[ 2025-08-10 11:39:28,200 ] test_main.py:67 root - INFO - (Document(metadata={'_id': '81a7ef81-eb12-4bcd-ad2e-403f547e7e50', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='Choose the days on which you want to execute the Workflow. By default, Infoveave sets it to every day. You can select specific days of the week, days of the month, or months.\nClick on the\nAdd'), 0.14285715)
[ 2025-08-10 11:39:28,261 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-10 11:39:28,262 ] test_main.py:75 root - INFO - [Record(id='81a7ef81-eb12-4bcd-ad2e-403f547e7e50', payload={'url': 'https://infoveave-help.pages.dev/automation-v8/jobs-v8/schedule-job/', 'title': 'schedule-job', 'section': 'automation', 'terminologies': ['Automation', 'Cron trigger', 'Emailhook trigger', 'Infoveave', 'Lists', 'Reports', 'Value', 'View', 'View', 'Webhook trigger', 'Workflows', 'Workflow Start trigger'], 'char_count': 5699, 'word_count': 937, 'page_content': 'Choose the days on which you want to execute the Workflow. By default, Infoveave sets it to every day. You can select specific days of the week, days of the month, or months.\nClick on the\nAdd', 'chunk_index': 5}, vector=None, shard_key=None, order_value=None)]
[ 2025-08-10 11:39:28,262 ] test_main.py:76 root - INFO - Retrieved result for point ID: 81a7ef81-eb12-4bcd-ad2e-403f547e7e50
[ 2025-08-10 11:39:28,262 ] test_main.py:67 root - INFO - (Document(metadata={'_id': '3989b1ef-a79d-4b1d-bce6-79cb5969aa26', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='Choose the days on which you want to execute the Workflow. By default, Infoveave sets it to every day. You can select specific days of the week, days of the month, or months.\nClick on the\nAdd'), 0.125)
[ 2025-08-10 11:39:28,335 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-10 11:39:28,336 ] test_main.py:75 root - INFO - [Record(id='3989b1ef-a79d-4b1d-bce6-79cb5969aa26', payload={'url': 'https://infoveave-help.pages.dev/automation-v8/workflows/define-workflow/workflow-start/', 'title': 'workflow-start', 'section': 'automation', 'terminologies': ['Automation', 'Cron trigger', 'Emailhook trigger', 'Infoveave', 'Lists', 'Reports', 'Value', 'View', 'View', 'Webhook trigger', 'Workflows', 'Workflow Start trigger'], 'char_count': 5699, 'word_count': 937, 'page_content': 'Choose the days on which you want to execute the Workflow. By default, Infoveave sets it to every day. You can select specific days of the week, days of the month, or months.\nClick on the\nAdd', 'chunk_index': 5}, vector=None, shard_key=None, order_value=None)]
[ 2025-08-10 11:39:28,336 ] test_main.py:76 root - INFO - Retrieved result for point ID: 3989b1ef-a79d-4b1d-bce6-79cb5969aa26
[ 2025-08-10 11:39:28,336 ] test_main.py:67 root - INFO - (Document(metadata={'_id': '3fd7ab5c-2d29-41ea-9ed7-0684f87b08e1', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='Add FTP Download Activity\n0:21\nConfigure FTP Download Activity\n0:31\nAdd Read Excel Files Activity\n0:35\nAdd Transform Activity using Javascript\n0:40\nAdd Round Numbers Activity\n0:46 Add Remove Duplicate Rows Activity\n0:52\nAdd Drop Columns Activity\n0:56\nAdd Rename Columns Activity\n1:01\nAdd Upload to Datasource Activity\n1:08\nExecute the Workflow and View Instance History'), 0.11111111)
[ 2025-08-10 11:39:28,405 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-10 11:39:28,406 ] test_main.py:75 root - INFO - [Record(id='3fd7ab5c-2d29-41ea-9ed7-0684f87b08e1', payload={'url': 'https://infoveave-help.pages.dev/automation-v8/jobs-v8/create-new-job/', 'title': 'create-new-job', 'section': 'automation', 'terminologies': ['Alerts', 'Automation', 'Infoveave', 'Measures', 'Query', 'Query Report', 'Value', 'Variables', 'View', 'View', 'Workflows'], 'char_count': 4476, 'word_count': 722, 'page_content': 'Add FTP Download Activity\n0:21\nConfigure FTP Download Activity\n0:31\nAdd Read Excel Files Activity\n0:35\nAdd Transform Activity using Javascript\n0:40\nAdd Round Numbers Activity\n0:46 Add Remove Duplicate Rows Activity\n0:52\nAdd Drop Columns Activity\n0:56\nAdd Rename Columns Activity\n1:01\nAdd Upload to Datasource Activity\n1:08\nExecute the Workflow and View Instance History', 'chunk_index': 1}, vector=None, shard_key=None, order_value=None)]
[ 2025-08-10 11:39:28,407 ] test_main.py:76 root - INFO - Retrieved result for point ID: 3fd7ab5c-2d29-41ea-9ed7-0684f87b08e1
[ 2025-08-10 11:39:28,407 ] test_main.py:67 root - INFO - (Document(metadata={'_id': '2adcd9bd-c3f6-41e9-8c27-26f07adfbe4c', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='Add FTP Download Activity\n0:21\nConfigure FTP Download Activity\n0:31\nAdd Read Excel Files Activity\n0:35\nAdd Transform Activity using Javascript\n0:40\nAdd Round Numbers Activity\n0:46 Add Remove Duplicate Rows Activity\n0:52\nAdd Drop Columns Activity\n0:56\nAdd Rename Columns Activity\n1:01\nAdd Upload to Datasource Activity\n1:08\nExecute the Workflow and View Instance History'), 0.1)
[ 2025-08-10 11:39:28,474 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-10 11:39:28,475 ] test_main.py:75 root - INFO - [Record(id='2adcd9bd-c3f6-41e9-8c27-26f07adfbe4c', payload={'url': 'https://infoveave-help.pages.dev/automation-v8/workflows/define-workflow/', 'title': 'define-workflow', 'section': 'automation', 'terminologies': ['Alerts', 'Automation', 'Infoveave', 'Measures', 'Query', 'Query Report', 'Value', 'Variables', 'View', 'View', 'Workflows'], 'char_count': 4476, 'word_count': 722, 'page_content': 'Add FTP Download Activity\n0:21\nConfigure FTP Download Activity\n0:31\nAdd Read Excel Files Activity\n0:35\nAdd Transform Activity using Javascript\n0:40\nAdd Round Numbers Activity\n0:46 Add Remove Duplicate Rows Activity\n0:52\nAdd Drop Columns Activity\n0:56\nAdd Rename Columns Activity\n1:01\nAdd Upload to Datasource Activity\n1:08\nExecute the Workflow and View Instance History', 'chunk_index': 1}, vector=None, shard_key=None, order_value=None)]
[ 2025-08-10 11:39:28,476 ] test_main.py:76 root - INFO - Retrieved result for point ID: 2adcd9bd-c3f6-41e9-8c27-26f07adfbe4c
[ 2025-08-10 11:39:28,476 ] test_main.py:67 root - INFO - (Document(metadata={'_id': 'bfe3c285-ffc2-4551-a19c-a5900bdd0aa3', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='E\nEmailhook trigger The Emailhook trigger initiates a Workflow based on incoming emails. You can set up specific email addresses that serve as Emailhooks. This allows for  automated processing of email-based activities or notifications . This trigger is useful for Workflows that involve email notifications or processing of data received via email.'), 0.09090909)
[ 2025-08-10 11:39:28,546 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-10 11:39:28,594 ] test_main.py:75 root - INFO - [Record(id='bfe3c285-ffc2-4551-a19c-a5900bdd0aa3', payload={'url': 'https://infoveave-help.pages.dev/introduction-to-infoveave/infoveave-terminologies/', 'title': 'infoveave-terminologies', 'section': 'introduction-to-infoveave', 'terminologies': ['Address Book', 'Alerts', 'Audit Log', 'Automation', 'Business Analysis', 'Calculated Columns', 'Calculated Measures', 'Catalogues', 'Client', 'Color Palette', 'Common Dimension filters', 'Component Panel', 'Component', 'Conditional Expressions', 'Connections', 'Control Centre', 'Creator', 'Cron trigger', 'Cube Designer', 'Custom Calendar', 'Custom Email', 'Database Connections', 'Datasources', 'Data Governance', 'Data Ingestion', 'Data Transformation', 'Data Visualization', 'Date Range Filter', 'Designer Canvas', 'Designer Layout', 'Dimensions', 'Domains', 'Emailhook trigger', 'Expression', 'Fixed Filters', 'Grid Layout', 'Hierarchies', 'Holiday Calendar', 'Infoboards', 'Infoboard Setup', 'Infoboard statistics', 'Infoveave', 'Infoveave menu', 'Insights', 'Lists', 'Linked Reports', 'Login statistics', 'Measures', 'ML Analysis', 'ML Model', 'My Organization', 'My Workspace', 'NGuage Forms', 'Query', 'Query Builder', 'Query Report', 'Reports', 'Retention Settings', 'Roles', 'SciPyR', 'Server Statistics', 'SMTP Settings', 'Statistical Analysis', 'Tags', 'Targets and Thresholds', 'Template Reports', 'Tenant', 'Tiers', 'Trash', 'Value', 'Variables', 'Version history', 'View', 'View', 'Viewer', 'Webhook trigger', 'What-If Analysis', 'What-If Formulae', 'Widget Configuration', 'Widget Customization', 'Widget statistics', 'Workflows', 'Workflow Alerts', 'Workflow Execution Status', 'Workflow Start trigger', 'Workflow Variables'], 'char_count': 25220, 'word_count': 3773, 'page_content': 'E\nEmailhook trigger The Emailhook trigger initiates a Workflow based on incoming emails. You can set up specific email addresses that serve as Emailhooks. This allows for  automated processing of email-based activities or notifications . This trigger is useful for Workflows that involve email notifications or processing of data received via email.', 'chunk_index': 13}, vector=None, shard_key=None, order_value=None)]
[ 2025-08-10 11:39:28,594 ] test_main.py:76 root - INFO - Retrieved result for point ID: bfe3c285-ffc2-4551-a19c-a5900bdd0aa3
[ 2025-08-10 11:39:28,595 ] test_main.py:89 root - INFO - [{'page_content': "Upload transformed file to destination database\nSetup the 'Oracle' connection, specify tables, and map columns\nSetup automated workflow summary notification\nEnable 'Send Workflow Summary' for email notifications on automated workflow execution\nSchedule and monitor  workflows Schedule or setup 'Webhooks' and 'Emails' to trigger workflows\nDone", 'url': 'https://infoveave-help.pages.dev/journey/automate-workflows/', 'title': 'automate-workflows', 'section': 'automation', 'terminologies': ['Connections', 'Data Transformation', 'Infoveave', 'Workflows'], 'char_count': 978, 'word_count': 139, 'chunk_index': 2}, {'page_content': 'Creating Infoboard Using A Query\nCreate Infoboard Using A Query\nCreating Infoboard Using API\nCreate Infoboard Using API\nCreating Workflow in Infoveave\nCreating Workflows\nWorkflow Execution Status\nWorkflow Execution Status', 'url': 'https://infoveave-help.pages.dev/videos/', 'title': 'videos', 'section': 'videos', 'terminologies': ['Automation', 'Catalogues', 'Conditional Expressions', 'Custom Calendar', 'Datasources', 'Dimensions', 'Infoboards', 'Infoveave', 'Insights', 'Lists', 'Measures', 'My Organization', 'My Workspace', 'Query', 'Reports', 'SciPyR', 'What-If Analysis', 'What-If Formulae', 'Workflows', 'Workflow Execution Status'], 'char_count': 2430, 'word_count': 338, 'chunk_index': 3}, {'page_content': 'Workflow Designer\ncanvas.\nTo add alerts that send email notifications during the workflow, go to the\nAlerts\ntab in the\nWorkflow Setup panel\n.\nToggle\nEnable\nto turn the alert on or off. Select recipient email addresses from the user list. You can choose multiple recipients.\nWrite a custom alert message that is sent when the condition is met.\nWhen setting an execution time alert, toggle\nUse Absolute Time', 'url': 'https://infoveave-help.pages.dev/automation-v8/jobs-v8/create-new-job/', 'title': 'create-new-job', 'section': 'automation', 'terminologies': ['Alerts', 'Automation', 'Infoveave', 'Measures', 'Query', 'Query Report', 'Value', 'Variables', 'View', 'View', 'Workflows'], 'char_count': 4476, 'word_count': 722, 'chunk_index': 4}, {'page_content': 'Workflow Designer\ncanvas.\nTo add alerts that send email notifications during the workflow, go to the\nAlerts\ntab in the\nWorkflow Setup panel\n.\nToggle\nEnable\nto turn the alert on or off. Select recipient email addresses from the user list. You can choose multiple recipients.\nWrite a custom alert message that is sent when the condition is met.\nWhen setting an execution time alert, toggle\nUse Absolute Time', 'url': 'https://infoveave-help.pages.dev/automation-v8/workflows/define-workflow/', 'title': 'define-workflow', 'section': 'automation', 'terminologies': ['Alerts', 'Automation', 'Infoveave', 'Measures', 'Query', 'Query Report', 'Value', 'Variables', 'View', 'View', 'Workflows'], 'char_count': 4476, 'word_count': 722, 'chunk_index': 4}, {'page_content': 'Workflow Alerts | Infoveave Help\nSkip to content\nWorkflow Alerts', 'url': 'https://infoveave-help.pages.dev/automation-v8/workflows/define-workflow/workflow-alerts-2/', 'title': 'workflow-alerts-2', 'section': 'automation', 'terminologies': ['Alerts', 'Infoveave', 'Workflows', 'Workflow Alerts'], 'char_count': 3832, 'word_count': 620, 'chunk_index': 0}, {'page_content': 'Choose the days on which you want to execute the Workflow. By default, Infoveave sets it to every day. You can select specific days of the week, days of the month, or months.\nClick on the\nAdd', 'url': 'https://infoveave-help.pages.dev/automation-v8/jobs-v8/schedule-job/', 'title': 'schedule-job', 'section': 'automation', 'terminologies': ['Automation', 'Cron trigger', 'Emailhook trigger', 'Infoveave', 'Lists', 'Reports', 'Value', 'View', 'View', 'Webhook trigger', 'Workflows', 'Workflow Start trigger'], 'char_count': 5699, 'word_count': 937, 'chunk_index': 5}, {'page_content': 'Choose the days on which you want to execute the Workflow. By default, Infoveave sets it to every day. You can select specific days of the week, days of the month, or months.\nClick on the\nAdd', 'url': 'https://infoveave-help.pages.dev/automation-v8/workflows/define-workflow/workflow-start/', 'title': 'workflow-start', 'section': 'automation', 'terminologies': ['Automation', 'Cron trigger', 'Emailhook trigger', 'Infoveave', 'Lists', 'Reports', 'Value', 'View', 'View', 'Webhook trigger', 'Workflows', 'Workflow Start trigger'], 'char_count': 5699, 'word_count': 937, 'chunk_index': 5}, {'page_content': 'Add FTP Download Activity\n0:21\nConfigure FTP Download Activity\n0:31\nAdd Read Excel Files Activity\n0:35\nAdd Transform Activity using Javascript\n0:40\nAdd Round Numbers Activity\n0:46 Add Remove Duplicate Rows Activity\n0:52\nAdd Drop Columns Activity\n0:56\nAdd Rename Columns Activity\n1:01\nAdd Upload to Datasource Activity\n1:08\nExecute the Workflow and View Instance History', 'url': 'https://infoveave-help.pages.dev/automation-v8/jobs-v8/create-new-job/', 'title': 'create-new-job', 'section': 'automation', 'terminologies': ['Alerts', 'Automation', 'Infoveave', 'Measures', 'Query', 'Query Report', 'Value', 'Variables', 'View', 'View', 'Workflows'], 'char_count': 4476, 'word_count': 722, 'chunk_index': 1}, {'page_content': 'Add FTP Download Activity\n0:21\nConfigure FTP Download Activity\n0:31\nAdd Read Excel Files Activity\n0:35\nAdd Transform Activity using Javascript\n0:40\nAdd Round Numbers Activity\n0:46 Add Remove Duplicate Rows Activity\n0:52\nAdd Drop Columns Activity\n0:56\nAdd Rename Columns Activity\n1:01\nAdd Upload to Datasource Activity\n1:08\nExecute the Workflow and View Instance History', 'url': 'https://infoveave-help.pages.dev/automation-v8/workflows/define-workflow/', 'title': 'define-workflow', 'section': 'automation', 'terminologies': ['Alerts', 'Automation', 'Infoveave', 'Measures', 'Query', 'Query Report', 'Value', 'Variables', 'View', 'View', 'Workflows'], 'char_count': 4476, 'word_count': 722, 'chunk_index': 1}, {'page_content': 'E\nEmailhook trigger The Emailhook trigger initiates a Workflow based on incoming emails. You can set up specific email addresses that serve as Emailhooks. This allows for  automated processing of email-based activities or notifications . This trigger is useful for Workflows that involve email notifications or processing of data received via email.', 'url': 'https://infoveave-help.pages.dev/introduction-to-infoveave/infoveave-terminologies/', 'title': 'infoveave-terminologies', 'section': 'introduction-to-infoveave', 'terminologies': ['Address Book', 'Alerts', 'Audit Log', 'Automation', 'Business Analysis', 'Calculated Columns', 'Calculated Measures', 'Catalogues', 'Client', 'Color Palette', 'Common Dimension filters', 'Component Panel', 'Component', 'Conditional Expressions', 'Connections', 'Control Centre', 'Creator', 'Cron trigger', 'Cube Designer', 'Custom Calendar', 'Custom Email', 'Database Connections', 'Datasources', 'Data Governance', 'Data Ingestion', 'Data Transformation', 'Data Visualization', 'Date Range Filter', 'Designer Canvas', 'Designer Layout', 'Dimensions', 'Domains', 'Emailhook trigger', 'Expression', 'Fixed Filters', 'Grid Layout', 'Hierarchies', 'Holiday Calendar', 'Infoboards', 'Infoboard Setup', 'Infoboard statistics', 'Infoveave', 'Infoveave menu', 'Insights', 'Lists', 'Linked Reports', 'Login statistics', 'Measures', 'ML Analysis', 'ML Model', 'My Organization', 'My Workspace', 'NGuage Forms', 'Query', 'Query Builder', 'Query Report', 'Reports', 'Retention Settings', 'Roles', 'SciPyR', 'Server Statistics', 'SMTP Settings', 'Statistical Analysis', 'Tags', 'Targets and Thresholds', 'Template Reports', 'Tenant', 'Tiers', 'Trash', 'Value', 'Variables', 'Version history', 'View', 'View', 'Viewer', 'Webhook trigger', 'What-If Analysis', 'What-If Formulae', 'Widget Configuration', 'Widget Customization', 'Widget statistics', 'Workflows', 'Workflow Alerts', 'Workflow Execution Status', 'Workflow Start trigger', 'Workflow Variables'], 'char_count': 25220, 'word_count': 3773, 'chunk_index': 13}]
[ 2025-08-10 11:39:28,596 ] test_main.py:102 root - INFO - Loaded rewritten query system prompt.
[ 2025-08-10 11:39:28,596 ] test_main.py:114 root - INFO - Loaded rewritten query user prompt.
[ 2025-08-10 11:39:29,244 ] _client.py:1025 httpx - INFO - HTTP Request: POST https://api.groq.com/openai/v1/chat/completions "HTTP/1.1 200 OK"
[ 2025-08-10 11:39:29,251 ] test_main.py:255 root - INFO - Rewritten query: Execute Query| Send Email
[ 2025-08-10 11:39:29,251 ] test_main.py:262 root - INFO - Rewritten query parts: ['Execute Query', 'Send Email']
[ 2025-08-10 11:39:29,251 ] test_main.py:271 root - INFO - Rewritten Query 1: Execute Query
[ 2025-08-10 11:39:29,705 ] test_main.py:274 root - INFO - Embedding generated for query 1.
[ 2025-08-10 11:39:31,005 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points/query "HTTP/1.1 200 OK"
[ 2025-08-10 11:39:31,007 ] test_main.py:286 root - INFO - Processing query part 1: Execute Query
[ 2025-08-10 11:39:31,030 ] test_main.py:65 root - INFO - Building context with metadata from documents...
[ 2025-08-10 11:39:31,030 ] test_main.py:67 root - INFO - (Document(metadata={'_id': '4bf7f9a7-fc4e-49bc-9caf-4fd89d8160ab', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='Execute Query | Infoveave Help\nSkip to content\nExecute Query\nDescription\nThe\nExecute Query'), 0.5)
[ 2025-08-10 11:39:31,096 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-10 11:39:31,097 ] test_main.py:75 root - INFO - [Record(id='4bf7f9a7-fc4e-49bc-9caf-4fd89d8160ab', payload={'url': 'https://infoveave-help.pages.dev/automation-v8/activities/execute-query/', 'title': 'execute-query', 'section': 'automation', 'terminologies': ['Infoveave', 'Query', 'Reports', 'Value'], 'char_count': 2330, 'word_count': 363, 'page_content': 'Execute Query | Infoveave Help\nSkip to content\nExecute Query\nDescription\nThe\nExecute Query', 'chunk_index': 0}, vector=None, shard_key=None, order_value=None)]
[ 2025-08-10 11:39:31,097 ] test_main.py:76 root - INFO - Retrieved result for point ID: 4bf7f9a7-fc4e-49bc-9caf-4fd89d8160ab
[ 2025-08-10 11:39:31,097 ] test_main.py:67 root - INFO - (Document(metadata={'_id': 'c4316ab6-9c63-42af-b504-74f8cdbc37df', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='This activity connects to your Google Cloud project, runs the specified query, and returns the results in tabular format. It is ideal for pulling real-time analytics, data transformations, or integrating cloud data into your workflow pipelines.\nUse case\n: Fetch customer order data by region for the last quarter directly from BigQuery to feed a dashboard or analytics engine.\nInput\nNot Applicable\nOutput\nOutput Type\nFormat\nDescription\nData\nTable Output of the executed BigQuery SQL query.\nConfiguration Fields\nField Name\nDescription\nConnection\nGoogle BigQuery connection (OAuth or service account). Required for access.\nProject\nGoogle Cloud Project ID containing the BigQuery datasets.\nQuery The SQL query string to be executed. Supports standard SQL syntax.\nSample Input\nNot Applicable\nSample Configuration\nField\nValue\nConnection\nGoogle BigQuery OAuth\nProject\ncustomer-data-analytics\nQuery'), 0.33333334)
[ 2025-08-10 11:39:31,156 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-10 11:39:31,157 ] test_main.py:75 root - INFO - [Record(id='c4316ab6-9c63-42af-b504-74f8cdbc37df', payload={'url': 'https://infoveave-help.pages.dev/automation-v8/activities/fetch-from-bigquery/', 'title': 'fetch-from-bigquery', 'section': 'automation', 'terminologies': ['Infoveave', 'Query', 'Value'], 'char_count': 1338, 'word_count': 194, 'page_content': 'This activity connects to your Google Cloud project, runs the specified query, and returns the results in tabular format. It is ideal for pulling real-time analytics, data transformations, or integrating cloud data into your workflow pipelines.\nUse case\n: Fetch customer order data by region for the last quarter directly from BigQuery to feed a dashboard or analytics engine.\nInput\nNot Applicable\nOutput\nOutput Type\nFormat\nDescription\nData\nTable Output of the executed BigQuery SQL query.\nConfiguration Fields\nField Name\nDescription\nConnection\nGoogle BigQuery connection (OAuth or service account). Required for access.\nProject\nGoogle Cloud Project ID containing the BigQuery datasets.\nQuery The SQL query string to be executed. Supports standard SQL syntax.\nSample Input\nNot Applicable\nSample Configuration\nField\nValue\nConnection\nGoogle BigQuery OAuth\nProject\ncustomer-data-analytics\nQuery', 'chunk_index': 1}, vector=None, shard_key=None, order_value=None)]
[ 2025-08-10 11:39:31,157 ] test_main.py:76 root - INFO - Retrieved result for point ID: c4316ab6-9c63-42af-b504-74f8cdbc37df
[ 2025-08-10 11:39:31,157 ] test_main.py:67 root - INFO - (Document(metadata={'_id': '21c3607e-54d8-44a9-b1b6-12646396ca58', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='activity executes a structured query (e.g., SQL) against a configured data source such as a relational database, data warehouse, or cloud storage engine . You can retrieve the results directly as tabular output or optionally save them to a file using configurable export settings. This activity is especially useful for dynamically pulling data into a workflow, generating reports, or integrating external data systems. When saving results to a file, it also supports advanced formatting using templates, encryption, and partitioning logic. Use this activity to:\nQuery databases and bring live data into workflows\nExport query results as Excel or CSV files\nApply formatting using templates and control sheet/row structure\nSecure output files with encryption and filename customization\nUse case\n: A data analyst can use this activity to run a sales report query on a PostgreSQL database. The output can be formatted using a template Excel file, encrypted using a secret key, and saved with a filename pattern that includes a timestamp.\nInput Type\nDescription\nData\nOptional incoming data used to influence the query or filenames (if dynamic).\nOutput\nOutput Type\nFormat\nDescription\nData\nTable or File Query results, either in-memory (as table) or written to file(s).\nConfiguration Fields\nField Name\nDescription\nDatasource Id Select the connection representing the data source (e.g., MySQL, SQL Server, Snowflake) where the query will run.\nQuery The query string (SQL or supported query language) to be executed on the selected data source. Supports variables if dynamic queries are needed.\nSave As File Enable this option to save the query result to a file instead of returning it as in-memory table data.\nSecret Key\nRequired only when “Save As File” is enabled. This encryption key secures the generated file’s content.'), 0.25)
[ 2025-08-10 11:39:31,225 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-10 11:39:31,228 ] test_main.py:75 root - INFO - [Record(id='21c3607e-54d8-44a9-b1b6-12646396ca58', payload={'url': 'https://infoveave-help.pages.dev/automation-v8/activities/query-datasource/', 'title': 'query-datasource', 'section': 'automation', 'terminologies': ['Infoveave', 'Query', 'Reports', 'Value', 'Variables', 'Workflows'], 'char_count': 3756, 'word_count': 590, 'page_content': 'activity executes a structured query (e.g., SQL) against a configured data source such as a relational database, data warehouse, or cloud storage engine . You can retrieve the results directly as tabular output or optionally save them to a file using configurable export settings. This activity is especially useful for dynamically pulling data into a workflow, generating reports, or integrating external data systems. When saving results to a file, it also supports advanced formatting using templates, encryption, and partitioning logic. Use this activity to:\nQuery databases and bring live data into workflows\nExport query results as Excel or CSV files\nApply formatting using templates and control sheet/row structure\nSecure output files with encryption and filename customization\nUse case\n: A data analyst can use this activity to run a sales report query on a PostgreSQL database. The output can be formatted using a template Excel file, encrypted using a secret key, and saved with a filename pattern that includes a timestamp.\nInput Type\nDescription\nData\nOptional incoming data used to influence the query or filenames (if dynamic).\nOutput\nOutput Type\nFormat\nDescription\nData\nTable or File Query results, either in-memory (as table) or written to file(s).\nConfiguration Fields\nField Name\nDescription\nDatasource Id Select the connection representing the data source (e.g., MySQL, SQL Server, Snowflake) where the query will run.\nQuery The query string (SQL or supported query language) to be executed on the selected data source. Supports variables if dynamic queries are needed.\nSave As File Enable this option to save the query result to a file instead of returning it as in-memory table data.\nSecret Key\nRequired only when “Save As File” is enabled. This encryption key secures the generated file’s content.', 'chunk_index': 1}, vector=None, shard_key=None, order_value=None)]
[ 2025-08-10 11:39:31,228 ] test_main.py:76 root - INFO - Retrieved result for point ID: 21c3607e-54d8-44a9-b1b6-12646396ca58
[ 2025-08-10 11:39:31,228 ] test_main.py:67 root - INFO - (Document(metadata={'_id': '65f1fed2-a4bd-4a52-aa8a-cc0e2c0490f2', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content="activity allows users to execute SQL queries on files or data stored in a connected data source (e.g., database, storage, or file-based system). This activity supports dynamic queries, and optionally allows saving the results to files with encryption, formatting, and custom output configuration.\nUse this activity to:\nExecute ad hoc or parameterized SQL queries on uploaded or connected data Retrieve transformed or filtered data for further processing\nGenerate reports or structured data files from query results\nUse Case\n: Useful in scenarios where data needs to be filtered, joined, aggregated, or reshaped before it’s used in reporting, validation, or export.\nInput\nType\nDescription\nFiles\nFiles/data available in the connection\nOutput\nType Format\nDescription\nData / File\nTable / File\nQuery result as a table or downloadable file\nConfiguration Fields\nField Name\nRequired\nDescription\nConnection\nYes\nConnection to the data source where the query should be executed.\nQuery Yes\nSQL query to be executed on the connected data source.\nSave As File\nNo\nIf enabled, the query result will be saved as a file.\nSecret Key\nConditional Encryption key used to secure the generated output file (enabled only if Save As File is true).\nFile Pattern\nConditional\nPattern for naming the generated files.\nSheet Name\nConditional Sheet name to use in the generated file (for Excel formats).\nFile\nConditional\nTemplate file to structure the output.\nSplit by Column\nConditional\nColumn name used to split the query result into multiple output files.\nStarting Row Conditional\nRow index in the template file from where data insertion begins.\nStarting Column\nConditional\nColumn index in the template file from where data insertion begins.\nSample Input\nNot applicable\n— data is pulled from the connected data source. Sample Configuration\nField\nValue\nConnection\nAzureBlobConnection\nQuery\nSELECT * FROM SalesData WHERE Region = 'East'\nSave As File\ntrue\nSecret Key\nEncrypt@123\nFile Pattern\nSales_Report_[Region]"), 0.2)
[ 2025-08-10 11:39:31,289 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-10 11:39:31,290 ] test_main.py:75 root - INFO - [Record(id='65f1fed2-a4bd-4a52-aa8a-cc0e2c0490f2', payload={'url': 'https://infoveave-help.pages.dev/automation-v8/activities/execute-query/', 'title': 'execute-query', 'section': 'automation', 'terminologies': ['Infoveave', 'Query', 'Reports', 'Value'], 'char_count': 2330, 'word_count': 363, 'page_content': "activity allows users to execute SQL queries on files or data stored in a connected data source (e.g., database, storage, or file-based system). This activity supports dynamic queries, and optionally allows saving the results to files with encryption, formatting, and custom output configuration.\nUse this activity to:\nExecute ad hoc or parameterized SQL queries on uploaded or connected data Retrieve transformed or filtered data for further processing\nGenerate reports or structured data files from query results\nUse Case\n: Useful in scenarios where data needs to be filtered, joined, aggregated, or reshaped before it’s used in reporting, validation, or export.\nInput\nType\nDescription\nFiles\nFiles/data available in the connection\nOutput\nType Format\nDescription\nData / File\nTable / File\nQuery result as a table or downloadable file\nConfiguration Fields\nField Name\nRequired\nDescription\nConnection\nYes\nConnection to the data source where the query should be executed.\nQuery Yes\nSQL query to be executed on the connected data source.\nSave As File\nNo\nIf enabled, the query result will be saved as a file.\nSecret Key\nConditional Encryption key used to secure the generated output file (enabled only if Save As File is true).\nFile Pattern\nConditional\nPattern for naming the generated files.\nSheet Name\nConditional Sheet name to use in the generated file (for Excel formats).\nFile\nConditional\nTemplate file to structure the output.\nSplit by Column\nConditional\nColumn name used to split the query result into multiple output files.\nStarting Row Conditional\nRow index in the template file from where data insertion begins.\nStarting Column\nConditional\nColumn index in the template file from where data insertion begins.\nSample Input\nNot applicable\n— data is pulled from the connected data source. Sample Configuration\nField\nValue\nConnection\nAzureBlobConnection\nQuery\nSELECT * FROM SalesData WHERE Region = 'East'\nSave As File\ntrue\nSecret Key\nEncrypt@123\nFile Pattern\nSales_Report_[Region]", 'chunk_index': 1}, vector=None, shard_key=None, order_value=None)]
[ 2025-08-10 11:39:31,290 ] test_main.py:76 root - INFO - Retrieved result for point ID: 65f1fed2-a4bd-4a52-aa8a-cc0e2c0490f2
[ 2025-08-10 11:39:31,290 ] test_main.py:67 root - INFO - (Document(metadata={'_id': '16772a9b-c89a-4370-ae9b-911286a37769', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content=').\nQuery Column Name\nColumn name to store the query string (portion after\n?\n) without parsing key-value pairs.\nFragment Column Name\nColumn name to store the fragment identifier (portion after\n#\n, if any). Note\n: This activity does not split the query string into key-value pairs — use the\nSplit HTTP Query\nactivity if you need that level of detail.\nSample Input\nemployee_id\nname\nurl\nE001\nJohn Doe'), 0.16666667)
[ 2025-08-10 11:39:31,345 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-10 11:39:31,346 ] test_main.py:75 root - INFO - [Record(id='16772a9b-c89a-4370-ae9b-911286a37769', payload={'url': 'https://infoveave-help.pages.dev/automation-v8/activities/split-url/', 'title': 'split-url', 'section': 'automation', 'terminologies': ['Infoveave', 'Query', 'Reports', 'Value'], 'char_count': 3191, 'word_count': 408, 'page_content': ').\nQuery Column Name\nColumn name to store the query string (portion after\n?\n) without parsing key-value pairs.\nFragment Column Name\nColumn name to store the fragment identifier (portion after\n#\n, if any). Note\n: This activity does not split the query string into key-value pairs — use the\nSplit HTTP Query\nactivity if you need that level of detail.\nSample Input\nemployee_id\nname\nurl\nE001\nJohn Doe', 'chunk_index': 2}, vector=None, shard_key=None, order_value=None)]
[ 2025-08-10 11:39:31,346 ] test_main.py:76 root - INFO - Retrieved result for point ID: 16772a9b-c89a-4370-ae9b-911286a37769
[ 2025-08-10 11:39:31,346 ] test_main.py:89 root - INFO - [{'page_content': 'Execute Query | Infoveave Help\nSkip to content\nExecute Query\nDescription\nThe\nExecute Query', 'url': 'https://infoveave-help.pages.dev/automation-v8/activities/execute-query/', 'title': 'execute-query', 'section': 'automation', 'terminologies': ['Infoveave', 'Query', 'Reports', 'Value'], 'char_count': 2330, 'word_count': 363, 'chunk_index': 0}, {'page_content': 'This activity connects to your Google Cloud project, runs the specified query, and returns the results in tabular format. It is ideal for pulling real-time analytics, data transformations, or integrating cloud data into your workflow pipelines.\nUse case\n: Fetch customer order data by region for the last quarter directly from BigQuery to feed a dashboard or analytics engine.\nInput\nNot Applicable\nOutput\nOutput Type\nFormat\nDescription\nData\nTable Output of the executed BigQuery SQL query.\nConfiguration Fields\nField Name\nDescription\nConnection\nGoogle BigQuery connection (OAuth or service account). Required for access.\nProject\nGoogle Cloud Project ID containing the BigQuery datasets.\nQuery The SQL query string to be executed. Supports standard SQL syntax.\nSample Input\nNot Applicable\nSample Configuration\nField\nValue\nConnection\nGoogle BigQuery OAuth\nProject\ncustomer-data-analytics\nQuery', 'url': 'https://infoveave-help.pages.dev/automation-v8/activities/fetch-from-bigquery/', 'title': 'fetch-from-bigquery', 'section': 'automation', 'terminologies': ['Infoveave', 'Query', 'Value'], 'char_count': 1338, 'word_count': 194, 'chunk_index': 1}, {'page_content': 'activity executes a structured query (e.g., SQL) against a configured data source such as a relational database, data warehouse, or cloud storage engine . You can retrieve the results directly as tabular output or optionally save them to a file using configurable export settings. This activity is especially useful for dynamically pulling data into a workflow, generating reports, or integrating external data systems. When saving results to a file, it also supports advanced formatting using templates, encryption, and partitioning logic. Use this activity to:\nQuery databases and bring live data into workflows\nExport query results as Excel or CSV files\nApply formatting using templates and control sheet/row structure\nSecure output files with encryption and filename customization\nUse case\n: A data analyst can use this activity to run a sales report query on a PostgreSQL database. The output can be formatted using a template Excel file, encrypted using a secret key, and saved with a filename pattern that includes a timestamp.\nInput Type\nDescription\nData\nOptional incoming data used to influence the query or filenames (if dynamic).\nOutput\nOutput Type\nFormat\nDescription\nData\nTable or File Query results, either in-memory (as table) or written to file(s).\nConfiguration Fields\nField Name\nDescription\nDatasource Id Select the connection representing the data source (e.g., MySQL, SQL Server, Snowflake) where the query will run.\nQuery The query string (SQL or supported query language) to be executed on the selected data source. Supports variables if dynamic queries are needed.\nSave As File Enable this option to save the query result to a file instead of returning it as in-memory table data.\nSecret Key\nRequired only when “Save As File” is enabled. This encryption key secures the generated file’s content.', 'url': 'https://infoveave-help.pages.dev/automation-v8/activities/query-datasource/', 'title': 'query-datasource', 'section': 'automation', 'terminologies': ['Infoveave', 'Query', 'Reports', 'Value', 'Variables', 'Workflows'], 'char_count': 3756, 'word_count': 590, 'chunk_index': 1}, {'page_content': "activity allows users to execute SQL queries on files or data stored in a connected data source (e.g., database, storage, or file-based system). This activity supports dynamic queries, and optionally allows saving the results to files with encryption, formatting, and custom output configuration.\nUse this activity to:\nExecute ad hoc or parameterized SQL queries on uploaded or connected data Retrieve transformed or filtered data for further processing\nGenerate reports or structured data files from query results\nUse Case\n: Useful in scenarios where data needs to be filtered, joined, aggregated, or reshaped before it’s used in reporting, validation, or export.\nInput\nType\nDescription\nFiles\nFiles/data available in the connection\nOutput\nType Format\nDescription\nData / File\nTable / File\nQuery result as a table or downloadable file\nConfiguration Fields\nField Name\nRequired\nDescription\nConnection\nYes\nConnection to the data source where the query should be executed.\nQuery Yes\nSQL query to be executed on the connected data source.\nSave As File\nNo\nIf enabled, the query result will be saved as a file.\nSecret Key\nConditional Encryption key used to secure the generated output file (enabled only if Save As File is true).\nFile Pattern\nConditional\nPattern for naming the generated files.\nSheet Name\nConditional Sheet name to use in the generated file (for Excel formats).\nFile\nConditional\nTemplate file to structure the output.\nSplit by Column\nConditional\nColumn name used to split the query result into multiple output files.\nStarting Row Conditional\nRow index in the template file from where data insertion begins.\nStarting Column\nConditional\nColumn index in the template file from where data insertion begins.\nSample Input\nNot applicable\n— data is pulled from the connected data source. Sample Configuration\nField\nValue\nConnection\nAzureBlobConnection\nQuery\nSELECT * FROM SalesData WHERE Region = 'East'\nSave As File\ntrue\nSecret Key\nEncrypt@123\nFile Pattern\nSales_Report_[Region]", 'url': 'https://infoveave-help.pages.dev/automation-v8/activities/execute-query/', 'title': 'execute-query', 'section': 'automation', 'terminologies': ['Infoveave', 'Query', 'Reports', 'Value'], 'char_count': 2330, 'word_count': 363, 'chunk_index': 1}, {'page_content': ').\nQuery Column Name\nColumn name to store the query string (portion after\n?\n) without parsing key-value pairs.\nFragment Column Name\nColumn name to store the fragment identifier (portion after\n#\n, if any). Note\n: This activity does not split the query string into key-value pairs — use the\nSplit HTTP Query\nactivity if you need that level of detail.\nSample Input\nemployee_id\nname\nurl\nE001\nJohn Doe', 'url': 'https://infoveave-help.pages.dev/automation-v8/activities/split-url/', 'title': 'split-url', 'section': 'automation', 'terminologies': ['Infoveave', 'Query', 'Reports', 'Value'], 'char_count': 3191, 'word_count': 408, 'chunk_index': 2}]
[ 2025-08-10 11:39:31,346 ] test_main.py:141 root - INFO - Loaded rewritten query user prompt.
[ 2025-08-10 11:39:32,447 ] _client.py:1025 httpx - INFO - HTTP Request: POST https://api.groq.com/openai/v1/chat/completions "HTTP/1.1 200 OK"
[ 2025-08-10 11:39:32,452 ] test_main.py:289 root - INFO - Response for query part 1: The **Execute Query** activity in Infoveave allows you to run SQL queries against your connected data sources.  

Here's a breakdown:

* **Purpose:** This activity is designed to fetch data directly from your databases or data warehouses. You can use it to pull real-time analytics, transform data, or integrate cloud data into your workflows.

* **How it Works:** You specify the connection to your data source (e.g., Google BigQuery, MySQL, PostgreSQL), the SQL query you want to execute, and any optional parameters. The activity then runs the query and returns the results as a table.

* **Use Cases:**

    * **Real-time Analytics:** Pull live customer data, sales figures, or other metrics directly from your database to display on dashboards or generate reports.
    * **Data Transformation:** Use SQL to filter, aggregate, or reshape data before it's used in other parts of your workflow.
    * **Cloud Data Integration:** Integrate data from cloud storage services like Google BigQuery or Amazon Redshift into your Infoveave workflows.

* **Key Features:**

    * **Dynamic Queries:** You can use variables in your SQL queries to make them more flexible and adaptable to different inputs.
    * **File Output:** Optionally save the query results to a file in various formats (e.g., CSV, Excel) for offline analysis or reporting.
    * **Encryption:** Secure your output files with encryption to protect sensitive data.

* **Learn More:** For detailed information and examples, refer to the official Infoveave documentation: [https://infoveave-help.pages.dev/automation-v8/activities/execute-query/](https://infoveave-help.pages.dev/automation-v8/activities/execute-query/)
[ 2025-08-10 11:39:32,452 ] test_main.py:292 root - INFO - [(Document(metadata={'_id': '4bf7f9a7-fc4e-49bc-9caf-4fd89d8160ab', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='Execute Query | Infoveave Help\nSkip to content\nExecute Query\nDescription\nThe\nExecute Query'), 0.5), (Document(metadata={'_id': 'c4316ab6-9c63-42af-b504-74f8cdbc37df', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='This activity connects to your Google Cloud project, runs the specified query, and returns the results in tabular format. It is ideal for pulling real-time analytics, data transformations, or integrating cloud data into your workflow pipelines.\nUse case\n: Fetch customer order data by region for the last quarter directly from BigQuery to feed a dashboard or analytics engine.\nInput\nNot Applicable\nOutput\nOutput Type\nFormat\nDescription\nData\nTable Output of the executed BigQuery SQL query.\nConfiguration Fields\nField Name\nDescription\nConnection\nGoogle BigQuery connection (OAuth or service account). Required for access.\nProject\nGoogle Cloud Project ID containing the BigQuery datasets.\nQuery The SQL query string to be executed. Supports standard SQL syntax.\nSample Input\nNot Applicable\nSample Configuration\nField\nValue\nConnection\nGoogle BigQuery OAuth\nProject\ncustomer-data-analytics\nQuery'), 0.33333334), (Document(metadata={'_id': '21c3607e-54d8-44a9-b1b6-12646396ca58', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='activity executes a structured query (e.g., SQL) against a configured data source such as a relational database, data warehouse, or cloud storage engine . You can retrieve the results directly as tabular output or optionally save them to a file using configurable export settings. This activity is especially useful for dynamically pulling data into a workflow, generating reports, or integrating external data systems. When saving results to a file, it also supports advanced formatting using templates, encryption, and partitioning logic. Use this activity to:\nQuery databases and bring live data into workflows\nExport query results as Excel or CSV files\nApply formatting using templates and control sheet/row structure\nSecure output files with encryption and filename customization\nUse case\n: A data analyst can use this activity to run a sales report query on a PostgreSQL database. The output can be formatted using a template Excel file, encrypted using a secret key, and saved with a filename pattern that includes a timestamp.\nInput Type\nDescription\nData\nOptional incoming data used to influence the query or filenames (if dynamic).\nOutput\nOutput Type\nFormat\nDescription\nData\nTable or File Query results, either in-memory (as table) or written to file(s).\nConfiguration Fields\nField Name\nDescription\nDatasource Id Select the connection representing the data source (e.g., MySQL, SQL Server, Snowflake) where the query will run.\nQuery The query string (SQL or supported query language) to be executed on the selected data source. Supports variables if dynamic queries are needed.\nSave As File Enable this option to save the query result to a file instead of returning it as in-memory table data.\nSecret Key\nRequired only when “Save As File” is enabled. This encryption key secures the generated file’s content.'), 0.25), (Document(metadata={'_id': '65f1fed2-a4bd-4a52-aa8a-cc0e2c0490f2', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content="activity allows users to execute SQL queries on files or data stored in a connected data source (e.g., database, storage, or file-based system). This activity supports dynamic queries, and optionally allows saving the results to files with encryption, formatting, and custom output configuration.\nUse this activity to:\nExecute ad hoc or parameterized SQL queries on uploaded or connected data Retrieve transformed or filtered data for further processing\nGenerate reports or structured data files from query results\nUse Case\n: Useful in scenarios where data needs to be filtered, joined, aggregated, or reshaped before it’s used in reporting, validation, or export.\nInput\nType\nDescription\nFiles\nFiles/data available in the connection\nOutput\nType Format\nDescription\nData / File\nTable / File\nQuery result as a table or downloadable file\nConfiguration Fields\nField Name\nRequired\nDescription\nConnection\nYes\nConnection to the data source where the query should be executed.\nQuery Yes\nSQL query to be executed on the connected data source.\nSave As File\nNo\nIf enabled, the query result will be saved as a file.\nSecret Key\nConditional Encryption key used to secure the generated output file (enabled only if Save As File is true).\nFile Pattern\nConditional\nPattern for naming the generated files.\nSheet Name\nConditional Sheet name to use in the generated file (for Excel formats).\nFile\nConditional\nTemplate file to structure the output.\nSplit by Column\nConditional\nColumn name used to split the query result into multiple output files.\nStarting Row Conditional\nRow index in the template file from where data insertion begins.\nStarting Column\nConditional\nColumn index in the template file from where data insertion begins.\nSample Input\nNot applicable\n— data is pulled from the connected data source. Sample Configuration\nField\nValue\nConnection\nAzureBlobConnection\nQuery\nSELECT * FROM SalesData WHERE Region = 'East'\nSave As File\ntrue\nSecret Key\nEncrypt@123\nFile Pattern\nSales_Report_[Region]"), 0.2), (Document(metadata={'_id': '16772a9b-c89a-4370-ae9b-911286a37769', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content=').\nQuery Column Name\nColumn name to store the query string (portion after\n?\n) without parsing key-value pairs.\nFragment Column Name\nColumn name to store the fragment identifier (portion after\n#\n, if any). Note\n: This activity does not split the query string into key-value pairs — use the\nSplit HTTP Query\nactivity if you need that level of detail.\nSample Input\nemployee_id\nname\nurl\nE001\nJohn Doe'), 0.16666667)]
[ 2025-08-10 11:39:32,473 ] test_main.py:65 root - INFO - Building context with metadata from documents...
[ 2025-08-10 11:39:32,473 ] test_main.py:67 root - INFO - (Document(metadata={'_id': '4bf7f9a7-fc4e-49bc-9caf-4fd89d8160ab', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='Execute Query | Infoveave Help\nSkip to content\nExecute Query\nDescription\nThe\nExecute Query'), 0.5)
[ 2025-08-10 11:39:32,526 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-10 11:39:32,527 ] test_main.py:75 root - INFO - [Record(id='4bf7f9a7-fc4e-49bc-9caf-4fd89d8160ab', payload={'url': 'https://infoveave-help.pages.dev/automation-v8/activities/execute-query/', 'title': 'execute-query', 'section': 'automation', 'terminologies': ['Infoveave', 'Query', 'Reports', 'Value'], 'char_count': 2330, 'word_count': 363, 'page_content': 'Execute Query | Infoveave Help\nSkip to content\nExecute Query\nDescription\nThe\nExecute Query', 'chunk_index': 0}, vector=None, shard_key=None, order_value=None)]
[ 2025-08-10 11:39:32,528 ] test_main.py:76 root - INFO - Retrieved result for point ID: 4bf7f9a7-fc4e-49bc-9caf-4fd89d8160ab
[ 2025-08-10 11:39:32,528 ] test_main.py:67 root - INFO - (Document(metadata={'_id': 'c4316ab6-9c63-42af-b504-74f8cdbc37df', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='This activity connects to your Google Cloud project, runs the specified query, and returns the results in tabular format. It is ideal for pulling real-time analytics, data transformations, or integrating cloud data into your workflow pipelines.\nUse case\n: Fetch customer order data by region for the last quarter directly from BigQuery to feed a dashboard or analytics engine.\nInput\nNot Applicable\nOutput\nOutput Type\nFormat\nDescription\nData\nTable Output of the executed BigQuery SQL query.\nConfiguration Fields\nField Name\nDescription\nConnection\nGoogle BigQuery connection (OAuth or service account). Required for access.\nProject\nGoogle Cloud Project ID containing the BigQuery datasets.\nQuery The SQL query string to be executed. Supports standard SQL syntax.\nSample Input\nNot Applicable\nSample Configuration\nField\nValue\nConnection\nGoogle BigQuery OAuth\nProject\ncustomer-data-analytics\nQuery'), 0.33333334)
[ 2025-08-10 11:39:32,582 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-10 11:39:32,583 ] test_main.py:75 root - INFO - [Record(id='c4316ab6-9c63-42af-b504-74f8cdbc37df', payload={'url': 'https://infoveave-help.pages.dev/automation-v8/activities/fetch-from-bigquery/', 'title': 'fetch-from-bigquery', 'section': 'automation', 'terminologies': ['Infoveave', 'Query', 'Value'], 'char_count': 1338, 'word_count': 194, 'page_content': 'This activity connects to your Google Cloud project, runs the specified query, and returns the results in tabular format. It is ideal for pulling real-time analytics, data transformations, or integrating cloud data into your workflow pipelines.\nUse case\n: Fetch customer order data by region for the last quarter directly from BigQuery to feed a dashboard or analytics engine.\nInput\nNot Applicable\nOutput\nOutput Type\nFormat\nDescription\nData\nTable Output of the executed BigQuery SQL query.\nConfiguration Fields\nField Name\nDescription\nConnection\nGoogle BigQuery connection (OAuth or service account). Required for access.\nProject\nGoogle Cloud Project ID containing the BigQuery datasets.\nQuery The SQL query string to be executed. Supports standard SQL syntax.\nSample Input\nNot Applicable\nSample Configuration\nField\nValue\nConnection\nGoogle BigQuery OAuth\nProject\ncustomer-data-analytics\nQuery', 'chunk_index': 1}, vector=None, shard_key=None, order_value=None)]
[ 2025-08-10 11:39:32,583 ] test_main.py:76 root - INFO - Retrieved result for point ID: c4316ab6-9c63-42af-b504-74f8cdbc37df
[ 2025-08-10 11:39:32,583 ] test_main.py:67 root - INFO - (Document(metadata={'_id': '21c3607e-54d8-44a9-b1b6-12646396ca58', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='activity executes a structured query (e.g., SQL) against a configured data source such as a relational database, data warehouse, or cloud storage engine . You can retrieve the results directly as tabular output or optionally save them to a file using configurable export settings. This activity is especially useful for dynamically pulling data into a workflow, generating reports, or integrating external data systems. When saving results to a file, it also supports advanced formatting using templates, encryption, and partitioning logic. Use this activity to:\nQuery databases and bring live data into workflows\nExport query results as Excel or CSV files\nApply formatting using templates and control sheet/row structure\nSecure output files with encryption and filename customization\nUse case\n: A data analyst can use this activity to run a sales report query on a PostgreSQL database. The output can be formatted using a template Excel file, encrypted using a secret key, and saved with a filename pattern that includes a timestamp.\nInput Type\nDescription\nData\nOptional incoming data used to influence the query or filenames (if dynamic).\nOutput\nOutput Type\nFormat\nDescription\nData\nTable or File Query results, either in-memory (as table) or written to file(s).\nConfiguration Fields\nField Name\nDescription\nDatasource Id Select the connection representing the data source (e.g., MySQL, SQL Server, Snowflake) where the query will run.\nQuery The query string (SQL or supported query language) to be executed on the selected data source. Supports variables if dynamic queries are needed.\nSave As File Enable this option to save the query result to a file instead of returning it as in-memory table data.\nSecret Key\nRequired only when “Save As File” is enabled. This encryption key secures the generated file’s content.'), 0.25)
[ 2025-08-10 11:39:32,641 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-10 11:39:32,641 ] test_main.py:75 root - INFO - [Record(id='21c3607e-54d8-44a9-b1b6-12646396ca58', payload={'url': 'https://infoveave-help.pages.dev/automation-v8/activities/query-datasource/', 'title': 'query-datasource', 'section': 'automation', 'terminologies': ['Infoveave', 'Query', 'Reports', 'Value', 'Variables', 'Workflows'], 'char_count': 3756, 'word_count': 590, 'page_content': 'activity executes a structured query (e.g., SQL) against a configured data source such as a relational database, data warehouse, or cloud storage engine . You can retrieve the results directly as tabular output or optionally save them to a file using configurable export settings. This activity is especially useful for dynamically pulling data into a workflow, generating reports, or integrating external data systems. When saving results to a file, it also supports advanced formatting using templates, encryption, and partitioning logic. Use this activity to:\nQuery databases and bring live data into workflows\nExport query results as Excel or CSV files\nApply formatting using templates and control sheet/row structure\nSecure output files with encryption and filename customization\nUse case\n: A data analyst can use this activity to run a sales report query on a PostgreSQL database. The output can be formatted using a template Excel file, encrypted using a secret key, and saved with a filename pattern that includes a timestamp.\nInput Type\nDescription\nData\nOptional incoming data used to influence the query or filenames (if dynamic).\nOutput\nOutput Type\nFormat\nDescription\nData\nTable or File Query results, either in-memory (as table) or written to file(s).\nConfiguration Fields\nField Name\nDescription\nDatasource Id Select the connection representing the data source (e.g., MySQL, SQL Server, Snowflake) where the query will run.\nQuery The query string (SQL or supported query language) to be executed on the selected data source. Supports variables if dynamic queries are needed.\nSave As File Enable this option to save the query result to a file instead of returning it as in-memory table data.\nSecret Key\nRequired only when “Save As File” is enabled. This encryption key secures the generated file’s content.', 'chunk_index': 1}, vector=None, shard_key=None, order_value=None)]
[ 2025-08-10 11:39:32,642 ] test_main.py:76 root - INFO - Retrieved result for point ID: 21c3607e-54d8-44a9-b1b6-12646396ca58
[ 2025-08-10 11:39:32,642 ] test_main.py:67 root - INFO - (Document(metadata={'_id': '65f1fed2-a4bd-4a52-aa8a-cc0e2c0490f2', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content="activity allows users to execute SQL queries on files or data stored in a connected data source (e.g., database, storage, or file-based system). This activity supports dynamic queries, and optionally allows saving the results to files with encryption, formatting, and custom output configuration.\nUse this activity to:\nExecute ad hoc or parameterized SQL queries on uploaded or connected data Retrieve transformed or filtered data for further processing\nGenerate reports or structured data files from query results\nUse Case\n: Useful in scenarios where data needs to be filtered, joined, aggregated, or reshaped before it’s used in reporting, validation, or export.\nInput\nType\nDescription\nFiles\nFiles/data available in the connection\nOutput\nType Format\nDescription\nData / File\nTable / File\nQuery result as a table or downloadable file\nConfiguration Fields\nField Name\nRequired\nDescription\nConnection\nYes\nConnection to the data source where the query should be executed.\nQuery Yes\nSQL query to be executed on the connected data source.\nSave As File\nNo\nIf enabled, the query result will be saved as a file.\nSecret Key\nConditional Encryption key used to secure the generated output file (enabled only if Save As File is true).\nFile Pattern\nConditional\nPattern for naming the generated files.\nSheet Name\nConditional Sheet name to use in the generated file (for Excel formats).\nFile\nConditional\nTemplate file to structure the output.\nSplit by Column\nConditional\nColumn name used to split the query result into multiple output files.\nStarting Row Conditional\nRow index in the template file from where data insertion begins.\nStarting Column\nConditional\nColumn index in the template file from where data insertion begins.\nSample Input\nNot applicable\n— data is pulled from the connected data source. Sample Configuration\nField\nValue\nConnection\nAzureBlobConnection\nQuery\nSELECT * FROM SalesData WHERE Region = 'East'\nSave As File\ntrue\nSecret Key\nEncrypt@123\nFile Pattern\nSales_Report_[Region]"), 0.2)
[ 2025-08-10 11:39:32,705 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-10 11:39:32,705 ] test_main.py:75 root - INFO - [Record(id='65f1fed2-a4bd-4a52-aa8a-cc0e2c0490f2', payload={'url': 'https://infoveave-help.pages.dev/automation-v8/activities/execute-query/', 'title': 'execute-query', 'section': 'automation', 'terminologies': ['Infoveave', 'Query', 'Reports', 'Value'], 'char_count': 2330, 'word_count': 363, 'page_content': "activity allows users to execute SQL queries on files or data stored in a connected data source (e.g., database, storage, or file-based system). This activity supports dynamic queries, and optionally allows saving the results to files with encryption, formatting, and custom output configuration.\nUse this activity to:\nExecute ad hoc or parameterized SQL queries on uploaded or connected data Retrieve transformed or filtered data for further processing\nGenerate reports or structured data files from query results\nUse Case\n: Useful in scenarios where data needs to be filtered, joined, aggregated, or reshaped before it’s used in reporting, validation, or export.\nInput\nType\nDescription\nFiles\nFiles/data available in the connection\nOutput\nType Format\nDescription\nData / File\nTable / File\nQuery result as a table or downloadable file\nConfiguration Fields\nField Name\nRequired\nDescription\nConnection\nYes\nConnection to the data source where the query should be executed.\nQuery Yes\nSQL query to be executed on the connected data source.\nSave As File\nNo\nIf enabled, the query result will be saved as a file.\nSecret Key\nConditional Encryption key used to secure the generated output file (enabled only if Save As File is true).\nFile Pattern\nConditional\nPattern for naming the generated files.\nSheet Name\nConditional Sheet name to use in the generated file (for Excel formats).\nFile\nConditional\nTemplate file to structure the output.\nSplit by Column\nConditional\nColumn name used to split the query result into multiple output files.\nStarting Row Conditional\nRow index in the template file from where data insertion begins.\nStarting Column\nConditional\nColumn index in the template file from where data insertion begins.\nSample Input\nNot applicable\n— data is pulled from the connected data source. Sample Configuration\nField\nValue\nConnection\nAzureBlobConnection\nQuery\nSELECT * FROM SalesData WHERE Region = 'East'\nSave As File\ntrue\nSecret Key\nEncrypt@123\nFile Pattern\nSales_Report_[Region]", 'chunk_index': 1}, vector=None, shard_key=None, order_value=None)]
[ 2025-08-10 11:39:32,706 ] test_main.py:76 root - INFO - Retrieved result for point ID: 65f1fed2-a4bd-4a52-aa8a-cc0e2c0490f2
[ 2025-08-10 11:39:32,706 ] test_main.py:67 root - INFO - (Document(metadata={'_id': '16772a9b-c89a-4370-ae9b-911286a37769', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content=').\nQuery Column Name\nColumn name to store the query string (portion after\n?\n) without parsing key-value pairs.\nFragment Column Name\nColumn name to store the fragment identifier (portion after\n#\n, if any). Note\n: This activity does not split the query string into key-value pairs — use the\nSplit HTTP Query\nactivity if you need that level of detail.\nSample Input\nemployee_id\nname\nurl\nE001\nJohn Doe'), 0.16666667)
[ 2025-08-10 11:39:32,763 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-10 11:39:32,764 ] test_main.py:75 root - INFO - [Record(id='16772a9b-c89a-4370-ae9b-911286a37769', payload={'url': 'https://infoveave-help.pages.dev/automation-v8/activities/split-url/', 'title': 'split-url', 'section': 'automation', 'terminologies': ['Infoveave', 'Query', 'Reports', 'Value'], 'char_count': 3191, 'word_count': 408, 'page_content': ').\nQuery Column Name\nColumn name to store the query string (portion after\n?\n) without parsing key-value pairs.\nFragment Column Name\nColumn name to store the fragment identifier (portion after\n#\n, if any). Note\n: This activity does not split the query string into key-value pairs — use the\nSplit HTTP Query\nactivity if you need that level of detail.\nSample Input\nemployee_id\nname\nurl\nE001\nJohn Doe', 'chunk_index': 2}, vector=None, shard_key=None, order_value=None)]
[ 2025-08-10 11:39:32,764 ] test_main.py:76 root - INFO - Retrieved result for point ID: 16772a9b-c89a-4370-ae9b-911286a37769
[ 2025-08-10 11:39:32,764 ] test_main.py:89 root - INFO - [{'page_content': 'Execute Query | Infoveave Help\nSkip to content\nExecute Query\nDescription\nThe\nExecute Query', 'url': 'https://infoveave-help.pages.dev/automation-v8/activities/execute-query/', 'title': 'execute-query', 'section': 'automation', 'terminologies': ['Infoveave', 'Query', 'Reports', 'Value'], 'char_count': 2330, 'word_count': 363, 'chunk_index': 0}, {'page_content': 'This activity connects to your Google Cloud project, runs the specified query, and returns the results in tabular format. It is ideal for pulling real-time analytics, data transformations, or integrating cloud data into your workflow pipelines.\nUse case\n: Fetch customer order data by region for the last quarter directly from BigQuery to feed a dashboard or analytics engine.\nInput\nNot Applicable\nOutput\nOutput Type\nFormat\nDescription\nData\nTable Output of the executed BigQuery SQL query.\nConfiguration Fields\nField Name\nDescription\nConnection\nGoogle BigQuery connection (OAuth or service account). Required for access.\nProject\nGoogle Cloud Project ID containing the BigQuery datasets.\nQuery The SQL query string to be executed. Supports standard SQL syntax.\nSample Input\nNot Applicable\nSample Configuration\nField\nValue\nConnection\nGoogle BigQuery OAuth\nProject\ncustomer-data-analytics\nQuery', 'url': 'https://infoveave-help.pages.dev/automation-v8/activities/fetch-from-bigquery/', 'title': 'fetch-from-bigquery', 'section': 'automation', 'terminologies': ['Infoveave', 'Query', 'Value'], 'char_count': 1338, 'word_count': 194, 'chunk_index': 1}, {'page_content': 'activity executes a structured query (e.g., SQL) against a configured data source such as a relational database, data warehouse, or cloud storage engine . You can retrieve the results directly as tabular output or optionally save them to a file using configurable export settings. This activity is especially useful for dynamically pulling data into a workflow, generating reports, or integrating external data systems. When saving results to a file, it also supports advanced formatting using templates, encryption, and partitioning logic. Use this activity to:\nQuery databases and bring live data into workflows\nExport query results as Excel or CSV files\nApply formatting using templates and control sheet/row structure\nSecure output files with encryption and filename customization\nUse case\n: A data analyst can use this activity to run a sales report query on a PostgreSQL database. The output can be formatted using a template Excel file, encrypted using a secret key, and saved with a filename pattern that includes a timestamp.\nInput Type\nDescription\nData\nOptional incoming data used to influence the query or filenames (if dynamic).\nOutput\nOutput Type\nFormat\nDescription\nData\nTable or File Query results, either in-memory (as table) or written to file(s).\nConfiguration Fields\nField Name\nDescription\nDatasource Id Select the connection representing the data source (e.g., MySQL, SQL Server, Snowflake) where the query will run.\nQuery The query string (SQL or supported query language) to be executed on the selected data source. Supports variables if dynamic queries are needed.\nSave As File Enable this option to save the query result to a file instead of returning it as in-memory table data.\nSecret Key\nRequired only when “Save As File” is enabled. This encryption key secures the generated file’s content.', 'url': 'https://infoveave-help.pages.dev/automation-v8/activities/query-datasource/', 'title': 'query-datasource', 'section': 'automation', 'terminologies': ['Infoveave', 'Query', 'Reports', 'Value', 'Variables', 'Workflows'], 'char_count': 3756, 'word_count': 590, 'chunk_index': 1}, {'page_content': "activity allows users to execute SQL queries on files or data stored in a connected data source (e.g., database, storage, or file-based system). This activity supports dynamic queries, and optionally allows saving the results to files with encryption, formatting, and custom output configuration.\nUse this activity to:\nExecute ad hoc or parameterized SQL queries on uploaded or connected data Retrieve transformed or filtered data for further processing\nGenerate reports or structured data files from query results\nUse Case\n: Useful in scenarios where data needs to be filtered, joined, aggregated, or reshaped before it’s used in reporting, validation, or export.\nInput\nType\nDescription\nFiles\nFiles/data available in the connection\nOutput\nType Format\nDescription\nData / File\nTable / File\nQuery result as a table or downloadable file\nConfiguration Fields\nField Name\nRequired\nDescription\nConnection\nYes\nConnection to the data source where the query should be executed.\nQuery Yes\nSQL query to be executed on the connected data source.\nSave As File\nNo\nIf enabled, the query result will be saved as a file.\nSecret Key\nConditional Encryption key used to secure the generated output file (enabled only if Save As File is true).\nFile Pattern\nConditional\nPattern for naming the generated files.\nSheet Name\nConditional Sheet name to use in the generated file (for Excel formats).\nFile\nConditional\nTemplate file to structure the output.\nSplit by Column\nConditional\nColumn name used to split the query result into multiple output files.\nStarting Row Conditional\nRow index in the template file from where data insertion begins.\nStarting Column\nConditional\nColumn index in the template file from where data insertion begins.\nSample Input\nNot applicable\n— data is pulled from the connected data source. Sample Configuration\nField\nValue\nConnection\nAzureBlobConnection\nQuery\nSELECT * FROM SalesData WHERE Region = 'East'\nSave As File\ntrue\nSecret Key\nEncrypt@123\nFile Pattern\nSales_Report_[Region]", 'url': 'https://infoveave-help.pages.dev/automation-v8/activities/execute-query/', 'title': 'execute-query', 'section': 'automation', 'terminologies': ['Infoveave', 'Query', 'Reports', 'Value'], 'char_count': 2330, 'word_count': 363, 'chunk_index': 1}, {'page_content': ').\nQuery Column Name\nColumn name to store the query string (portion after\n?\n) without parsing key-value pairs.\nFragment Column Name\nColumn name to store the fragment identifier (portion after\n#\n, if any). Note\n: This activity does not split the query string into key-value pairs — use the\nSplit HTTP Query\nactivity if you need that level of detail.\nSample Input\nemployee_id\nname\nurl\nE001\nJohn Doe', 'url': 'https://infoveave-help.pages.dev/automation-v8/activities/split-url/', 'title': 'split-url', 'section': 'automation', 'terminologies': ['Infoveave', 'Query', 'Reports', 'Value'], 'char_count': 3191, 'word_count': 408, 'chunk_index': 2}]
[ 2025-08-10 11:39:32,764 ] test_main.py:271 root - INFO - Rewritten Query 2: Send Email
[ 2025-08-10 11:39:33,373 ] test_main.py:274 root - INFO - Embedding generated for query 2.
[ 2025-08-10 11:39:34,705 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points/query "HTTP/1.1 200 OK"
[ 2025-08-10 11:39:34,754 ] test_main.py:286 root - INFO - Processing query part 2: Send Email
[ 2025-08-10 11:39:34,779 ] test_main.py:65 root - INFO - Building context with metadata from documents...
[ 2025-08-10 11:39:34,779 ] test_main.py:67 root - INFO - (Document(metadata={'_id': 'b0c2000b-2a94-480e-8ade-5ccb489ed9ea', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='Send Email | Infoveave Help\nSkip to content\nSend Email\nDescription\nThe\nSend Email'), 0.5)
[ 2025-08-10 11:39:34,828 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-10 11:39:34,829 ] test_main.py:75 root - INFO - [Record(id='b0c2000b-2a94-480e-8ade-5ccb489ed9ea', payload={'url': 'https://infoveave-help.pages.dev/automation-v8/activities/send-email/', 'title': 'send-email', 'section': 'automation', 'terminologies': ['Infoveave', 'Value'], 'char_count': 3312, 'word_count': 495, 'page_content': 'Send Email | Infoveave Help\nSkip to content\nSend Email\nDescription\nThe\nSend Email', 'chunk_index': 0}, vector=None, shard_key=None, order_value=None)]
[ 2025-08-10 11:39:34,829 ] test_main.py:76 root - INFO - Retrieved result for point ID: b0c2000b-2a94-480e-8ade-5ccb489ed9ea
[ 2025-08-10 11:39:34,829 ] test_main.py:67 root - INFO - (Document(metadata={'_id': 'de5e3b97-dd0f-4d05-8da9-ae3c750c78cc', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='activity allows you to compose and send emails as part of a workflow. You can configure recipient addresses, subject, body content, and attachments . The activity also supports dynamic emailing using fields from input data, and allows the use of pre-designed Infoveave templates for styling and formatting consistency. Use this activity to:\nSend individual or bulk emails based on incoming data\nAttach files generated in the workflow\nFormat emails using templates for consistency\nEmbed processed data directly into the email body\nUse case\n: A workflow generates a monthly sales report and automatically sends personalized emails to each regional manager with their region’s data attached and included in the body.\nInput\nType\nDescription\nData'), 0.33333334)
[ 2025-08-10 11:39:34,878 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-10 11:39:34,915 ] test_main.py:75 root - INFO - [Record(id='de5e3b97-dd0f-4d05-8da9-ae3c750c78cc', payload={'url': 'https://infoveave-help.pages.dev/automation-v8/activities/send-email/', 'title': 'send-email', 'section': 'automation', 'terminologies': ['Infoveave', 'Value'], 'char_count': 3312, 'word_count': 495, 'page_content': 'activity allows you to compose and send emails as part of a workflow. You can configure recipient addresses, subject, body content, and attachments . The activity also supports dynamic emailing using fields from input data, and allows the use of pre-designed Infoveave templates for styling and formatting consistency. Use this activity to:\nSend individual or bulk emails based on incoming data\nAttach files generated in the workflow\nFormat emails using templates for consistency\nEmbed processed data directly into the email body\nUse case\n: A workflow generates a monthly sales report and automatically sends personalized emails to each regional manager with their region’s data attached and included in the body.\nInput\nType\nDescription\nData', 'chunk_index': 1}, vector=None, shard_key=None, order_value=None)]
[ 2025-08-10 11:39:34,915 ] test_main.py:76 root - INFO - Retrieved result for point ID: de5e3b97-dd0f-4d05-8da9-ae3c750c78cc
[ 2025-08-10 11:39:34,915 ] test_main.py:67 root - INFO - (Document(metadata={'_id': '79fddbc7-ebeb-4a13-9afb-02e3c3ec7774', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='(Optional) Tabular data used to populate dynamic fields like email addresses, template content, or attachment grouping.\nOutput\nOutput Type\nFormat\nDescription\nEmail Info\nTable Status of sent emails including recipient, success, and any errors encountered.\nConfiguration Fields\nField Name\nDescription\nConnection\nMail server connection to send emails (OAuth or SMTP supported).\nUse Default Credentials If enabled, uses Infoveave’s default email credentials. Disable to use custom authentication.\nUse Email Address From Data\nIf enabled, pulls recipient addresses from a specified column in the input data.\nEmail Column The column in the data containing the recipient’s email address (required if using email from data).\nEmail To Address\nStatic recipient(s) for the “To” field (comma-separated).\nEmail CC Address Email addresses for the “CC” field (comma-separated).\nEmail BCC Address\nEmail addresses for the “BCC” field.\nSubject\nSubject line of the email. Can be static or mapped from input data.\nContent The main body content of the email. Supports plain text or HTML.\nUse Infoveave Template\nWhen enabled, applies an Infoveave-designed template to the email layout.\nRerun Template Ensures template consistency across multiple emails in the same run.\nAttachment Name\nName of the attachment file (e.g.,\nSalesReport_May2025.xlsx\n).\nSplit By Column Splits data into separate attachments based on values in this column (used in bulk personalization).\nSheet Name\nThe name of the worksheet in the template used for formatting the attachment content.\nSend Data In Email Body If enabled, includes input data as a formatted table within the body of the email.\nAttachment File Pattern\nPattern to identify which files to attach from prior activities (e.g.,\n"*.pdf"\n).\nCombine\nSplit By Column with\nEmail Column\nto send a unique email with corresponding data and attachment per recipient.\nSample Input\nNot applicable\n(used only if sending emails dynamically per row or attaching generated data).\nSample Configuration\nField\nValue'), 0.25)
[ 2025-08-10 11:39:34,998 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-10 11:39:35,052 ] test_main.py:75 root - INFO - [Record(id='79fddbc7-ebeb-4a13-9afb-02e3c3ec7774', payload={'url': 'https://infoveave-help.pages.dev/automation-v8/activities/send-email/', 'title': 'send-email', 'section': 'automation', 'terminologies': ['Infoveave', 'Value'], 'char_count': 3312, 'word_count': 495, 'page_content': '(Optional) Tabular data used to populate dynamic fields like email addresses, template content, or attachment grouping.\nOutput\nOutput Type\nFormat\nDescription\nEmail Info\nTable Status of sent emails including recipient, success, and any errors encountered.\nConfiguration Fields\nField Name\nDescription\nConnection\nMail server connection to send emails (OAuth or SMTP supported).\nUse Default Credentials If enabled, uses Infoveave’s default email credentials. Disable to use custom authentication.\nUse Email Address From Data\nIf enabled, pulls recipient addresses from a specified column in the input data.\nEmail Column The column in the data containing the recipient’s email address (required if using email from data).\nEmail To Address\nStatic recipient(s) for the “To” field (comma-separated).\nEmail CC Address Email addresses for the “CC” field (comma-separated).\nEmail BCC Address\nEmail addresses for the “BCC” field.\nSubject\nSubject line of the email. Can be static or mapped from input data.\nContent The main body content of the email. Supports plain text or HTML.\nUse Infoveave Template\nWhen enabled, applies an Infoveave-designed template to the email layout.\nRerun Template Ensures template consistency across multiple emails in the same run.\nAttachment Name\nName of the attachment file (e.g.,\nSalesReport_May2025.xlsx\n).\nSplit By Column Splits data into separate attachments based on values in this column (used in bulk personalization).\nSheet Name\nThe name of the worksheet in the template used for formatting the attachment content.\nSend Data In Email Body If enabled, includes input data as a formatted table within the body of the email.\nAttachment File Pattern\nPattern to identify which files to attach from prior activities (e.g.,\n"*.pdf"\n).\nCombine\nSplit By Column with\nEmail Column\nto send a unique email with corresponding data and attachment per recipient.\nSample Input\nNot applicable\n(used only if sending emails dynamically per row or attaching generated data).\nSample Configuration\nField\nValue', 'chunk_index': 2}, vector=None, shard_key=None, order_value=None)]
[ 2025-08-10 11:39:35,053 ] test_main.py:76 root - INFO - Retrieved result for point ID: 79fddbc7-ebeb-4a13-9afb-02e3c3ec7774
[ 2025-08-10 11:39:35,053 ] test_main.py:67 root - INFO - (Document(metadata={'_id': 'ea0e4e86-0f23-462b-a182-48cedad8fdd9', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='2025-07-01T10:05:00Z\njohn@example.com\nWelcome Email\n18KB\nonboarding\nev1235\nopened\n2025-07-01T10:08:00Z jane@example.com\nPromo Offer\n22KB\npromotions\nFor\nMessages\nEntity (JSON):\n{\n"headers"\n: {\n"message-id"\n:\n"\n<abc@mailgun.org>'), 0.2)
[ 2025-08-10 11:39:35,117 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-10 11:39:35,118 ] test_main.py:75 root - INFO - [Record(id='ea0e4e86-0f23-462b-a182-48cedad8fdd9', payload={'url': 'https://infoveave-help.pages.dev/automation-v8/activities/mailgun/', 'title': 'mailgun', 'section': 'automation', 'terminologies': ['Infoveave', 'Tags', 'Value', 'Workflows'], 'char_count': 3213, 'word_count': 485, 'page_content': '2025-07-01T10:05:00Z\njohn@example.com\nWelcome Email\n18KB\nonboarding\nev1235\nopened\n2025-07-01T10:08:00Z jane@example.com\nPromo Offer\n22KB\npromotions\nFor\nMessages\nEntity (JSON):\n{\n"headers"\n: {\n"message-id"\n:\n"\n<abc@mailgun.org>', 'chunk_index': 3}, vector=None, shard_key=None, order_value=None)]
[ 2025-08-10 11:39:35,118 ] test_main.py:76 root - INFO - Retrieved result for point ID: ea0e4e86-0f23-462b-a182-48cedad8fdd9
[ 2025-08-10 11:39:35,118 ] test_main.py:67 root - INFO - (Document(metadata={'_id': 'b6d38099-c9de-471f-973c-0f9d734b02ec', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='Activity Step\nReplaced Values\nSendEmail_12345\nStep 1\nCustomerName: John Doe\nSendEmail_67890\nStep 2\nCustomerName: Jane Smith'), 0.16666667)
[ 2025-08-10 11:39:35,193 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-10 11:39:35,194 ] test_main.py:75 root - INFO - [Record(id='b6d38099-c9de-471f-973c-0f9d734b02ec', payload={'url': 'https://infoveave-help.pages.dev/automation-v8/activities/start-iteration/', 'title': 'start-iteration', 'section': 'automation', 'terminologies': ['Infoveave', 'Value'], 'char_count': 2180, 'word_count': 314, 'page_content': 'Activity Step\nReplaced Values\nSendEmail_12345\nStep 1\nCustomerName: John Doe\nSendEmail_67890\nStep 2\nCustomerName: Jane Smith', 'chunk_index': 2}, vector=None, shard_key=None, order_value=None)]
[ 2025-08-10 11:39:35,194 ] test_main.py:76 root - INFO - Retrieved result for point ID: b6d38099-c9de-471f-973c-0f9d734b02ec
[ 2025-08-10 11:39:35,195 ] test_main.py:89 root - INFO - [{'page_content': 'Send Email | Infoveave Help\nSkip to content\nSend Email\nDescription\nThe\nSend Email', 'url': 'https://infoveave-help.pages.dev/automation-v8/activities/send-email/', 'title': 'send-email', 'section': 'automation', 'terminologies': ['Infoveave', 'Value'], 'char_count': 3312, 'word_count': 495, 'chunk_index': 0}, {'page_content': 'activity allows you to compose and send emails as part of a workflow. You can configure recipient addresses, subject, body content, and attachments . The activity also supports dynamic emailing using fields from input data, and allows the use of pre-designed Infoveave templates for styling and formatting consistency. Use this activity to:\nSend individual or bulk emails based on incoming data\nAttach files generated in the workflow\nFormat emails using templates for consistency\nEmbed processed data directly into the email body\nUse case\n: A workflow generates a monthly sales report and automatically sends personalized emails to each regional manager with their region’s data attached and included in the body.\nInput\nType\nDescription\nData', 'url': 'https://infoveave-help.pages.dev/automation-v8/activities/send-email/', 'title': 'send-email', 'section': 'automation', 'terminologies': ['Infoveave', 'Value'], 'char_count': 3312, 'word_count': 495, 'chunk_index': 1}, {'page_content': '(Optional) Tabular data used to populate dynamic fields like email addresses, template content, or attachment grouping.\nOutput\nOutput Type\nFormat\nDescription\nEmail Info\nTable Status of sent emails including recipient, success, and any errors encountered.\nConfiguration Fields\nField Name\nDescription\nConnection\nMail server connection to send emails (OAuth or SMTP supported).\nUse Default Credentials If enabled, uses Infoveave’s default email credentials. Disable to use custom authentication.\nUse Email Address From Data\nIf enabled, pulls recipient addresses from a specified column in the input data.\nEmail Column The column in the data containing the recipient’s email address (required if using email from data).\nEmail To Address\nStatic recipient(s) for the “To” field (comma-separated).\nEmail CC Address Email addresses for the “CC” field (comma-separated).\nEmail BCC Address\nEmail addresses for the “BCC” field.\nSubject\nSubject line of the email. Can be static or mapped from input data.\nContent The main body content of the email. Supports plain text or HTML.\nUse Infoveave Template\nWhen enabled, applies an Infoveave-designed template to the email layout.\nRerun Template Ensures template consistency across multiple emails in the same run.\nAttachment Name\nName of the attachment file (e.g.,\nSalesReport_May2025.xlsx\n).\nSplit By Column Splits data into separate attachments based on values in this column (used in bulk personalization).\nSheet Name\nThe name of the worksheet in the template used for formatting the attachment content.\nSend Data In Email Body If enabled, includes input data as a formatted table within the body of the email.\nAttachment File Pattern\nPattern to identify which files to attach from prior activities (e.g.,\n"*.pdf"\n).\nCombine\nSplit By Column with\nEmail Column\nto send a unique email with corresponding data and attachment per recipient.\nSample Input\nNot applicable\n(used only if sending emails dynamically per row or attaching generated data).\nSample Configuration\nField\nValue', 'url': 'https://infoveave-help.pages.dev/automation-v8/activities/send-email/', 'title': 'send-email', 'section': 'automation', 'terminologies': ['Infoveave', 'Value'], 'char_count': 3312, 'word_count': 495, 'chunk_index': 2}, {'page_content': '2025-07-01T10:05:00Z\njohn@example.com\nWelcome Email\n18KB\nonboarding\nev1235\nopened\n2025-07-01T10:08:00Z jane@example.com\nPromo Offer\n22KB\npromotions\nFor\nMessages\nEntity (JSON):\n{\n"headers"\n: {\n"message-id"\n:\n"\n<abc@mailgun.org>', 'url': 'https://infoveave-help.pages.dev/automation-v8/activities/mailgun/', 'title': 'mailgun', 'section': 'automation', 'terminologies': ['Infoveave', 'Tags', 'Value', 'Workflows'], 'char_count': 3213, 'word_count': 485, 'chunk_index': 3}, {'page_content': 'Activity Step\nReplaced Values\nSendEmail_12345\nStep 1\nCustomerName: John Doe\nSendEmail_67890\nStep 2\nCustomerName: Jane Smith', 'url': 'https://infoveave-help.pages.dev/automation-v8/activities/start-iteration/', 'title': 'start-iteration', 'section': 'automation', 'terminologies': ['Infoveave', 'Value'], 'char_count': 2180, 'word_count': 314, 'chunk_index': 2}]
[ 2025-08-10 11:39:35,195 ] test_main.py:141 root - INFO - Loaded rewritten query user prompt.
[ 2025-08-10 11:39:36,759 ] _client.py:1025 httpx - INFO - HTTP Request: POST https://api.groq.com/openai/v1/chat/completions "HTTP/1.1 200 OK"
[ 2025-08-10 11:39:36,763 ] test_main.py:289 root - INFO - Response for query part 2: The **Send Email** activity in Infoveave allows you to compose and send emails as part of a workflow. 

You can configure recipient addresses, subject, body content, and attachments. The activity also supports dynamic emailing using fields from input data, and allows the use of pre-designed Infoveave templates for styling and formatting consistency. 

Here's a breakdown of how it works:

**Use Cases:**

* Send individual or bulk emails based on incoming data
* Attach files generated in the workflow
* Format emails using templates for consistency
* Embed processed data directly into the email body

**Example:**

A workflow generates a monthly sales report and automatically sends personalized emails to each regional manager with their region’s data attached and included in the body.

**Configuration Fields:**

* **Connection:** Mail server connection to send emails (OAuth or SMTP supported).
* **Use Default Credentials:** If enabled, uses Infoveave’s default email credentials. Disable to use custom authentication.
* **Use Email Address From Data:** If enabled, pulls recipient addresses from a specified column in the input data.
* **Email Column:** The column in the data containing the recipient’s email address (required if using email from data).
* **Email To Address:** Static recipient(s) for the “To” field (comma-separated).
* **Email CC Address:** Email addresses for the “CC” field (comma-separated).
* **Email BCC Address:** Email addresses for the “BCC” field.
* **Subject:** Subject line of the email. Can be static or mapped from input data.
* **Content:** The main body content of the email. Supports plain text or HTML.
* **Use Infoveave Template:** When enabled, applies an Infoveave-designed template to the email layout.
* **Rerun Template:** Ensures template consistency across multiple emails in the same run.
* **Attachment Name:** Name of the attachment file (e.g., SalesReport_May2025.xlsx).
* **Split By Column:** Splits data into separate attachments based on values in this column (used in bulk personalization).
* **Sheet Name:** The name of the worksheet in the template used for formatting the attachment content.
* **Send Data In Email Body:** If enabled, includes input data as a formatted table within the body of the email.
* **Attachment File Pattern:** Pattern to identify which files to attach from prior activities (e.g., "*.pdf").

**Combining Fields:**

You can combine `Split By Column` with `Email Column` to send a unique email with corresponding data and attachment per recipient.
[ 2025-08-10 11:39:36,763 ] test_main.py:292 root - INFO - [(Document(metadata={'_id': 'b0c2000b-2a94-480e-8ade-5ccb489ed9ea', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='Send Email | Infoveave Help\nSkip to content\nSend Email\nDescription\nThe\nSend Email'), 0.5), (Document(metadata={'_id': 'de5e3b97-dd0f-4d05-8da9-ae3c750c78cc', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='activity allows you to compose and send emails as part of a workflow. You can configure recipient addresses, subject, body content, and attachments . The activity also supports dynamic emailing using fields from input data, and allows the use of pre-designed Infoveave templates for styling and formatting consistency. Use this activity to:\nSend individual or bulk emails based on incoming data\nAttach files generated in the workflow\nFormat emails using templates for consistency\nEmbed processed data directly into the email body\nUse case\n: A workflow generates a monthly sales report and automatically sends personalized emails to each regional manager with their region’s data attached and included in the body.\nInput\nType\nDescription\nData'), 0.33333334), (Document(metadata={'_id': '79fddbc7-ebeb-4a13-9afb-02e3c3ec7774', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='(Optional) Tabular data used to populate dynamic fields like email addresses, template content, or attachment grouping.\nOutput\nOutput Type\nFormat\nDescription\nEmail Info\nTable Status of sent emails including recipient, success, and any errors encountered.\nConfiguration Fields\nField Name\nDescription\nConnection\nMail server connection to send emails (OAuth or SMTP supported).\nUse Default Credentials If enabled, uses Infoveave’s default email credentials. Disable to use custom authentication.\nUse Email Address From Data\nIf enabled, pulls recipient addresses from a specified column in the input data.\nEmail Column The column in the data containing the recipient’s email address (required if using email from data).\nEmail To Address\nStatic recipient(s) for the “To” field (comma-separated).\nEmail CC Address Email addresses for the “CC” field (comma-separated).\nEmail BCC Address\nEmail addresses for the “BCC” field.\nSubject\nSubject line of the email. Can be static or mapped from input data.\nContent The main body content of the email. Supports plain text or HTML.\nUse Infoveave Template\nWhen enabled, applies an Infoveave-designed template to the email layout.\nRerun Template Ensures template consistency across multiple emails in the same run.\nAttachment Name\nName of the attachment file (e.g.,\nSalesReport_May2025.xlsx\n).\nSplit By Column Splits data into separate attachments based on values in this column (used in bulk personalization).\nSheet Name\nThe name of the worksheet in the template used for formatting the attachment content.\nSend Data In Email Body If enabled, includes input data as a formatted table within the body of the email.\nAttachment File Pattern\nPattern to identify which files to attach from prior activities (e.g.,\n"*.pdf"\n).\nCombine\nSplit By Column with\nEmail Column\nto send a unique email with corresponding data and attachment per recipient.\nSample Input\nNot applicable\n(used only if sending emails dynamically per row or attaching generated data).\nSample Configuration\nField\nValue'), 0.25), (Document(metadata={'_id': 'ea0e4e86-0f23-462b-a182-48cedad8fdd9', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='2025-07-01T10:05:00Z\njohn@example.com\nWelcome Email\n18KB\nonboarding\nev1235\nopened\n2025-07-01T10:08:00Z jane@example.com\nPromo Offer\n22KB\npromotions\nFor\nMessages\nEntity (JSON):\n{\n"headers"\n: {\n"message-id"\n:\n"\n<abc@mailgun.org>'), 0.2), (Document(metadata={'_id': 'b6d38099-c9de-471f-973c-0f9d734b02ec', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='Activity Step\nReplaced Values\nSendEmail_12345\nStep 1\nCustomerName: John Doe\nSendEmail_67890\nStep 2\nCustomerName: Jane Smith'), 0.16666667)]
[ 2025-08-10 11:39:36,786 ] test_main.py:65 root - INFO - Building context with metadata from documents...
[ 2025-08-10 11:39:36,786 ] test_main.py:67 root - INFO - (Document(metadata={'_id': 'b0c2000b-2a94-480e-8ade-5ccb489ed9ea', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='Send Email | Infoveave Help\nSkip to content\nSend Email\nDescription\nThe\nSend Email'), 0.5)
[ 2025-08-10 11:39:36,847 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-10 11:39:36,847 ] test_main.py:75 root - INFO - [Record(id='b0c2000b-2a94-480e-8ade-5ccb489ed9ea', payload={'url': 'https://infoveave-help.pages.dev/automation-v8/activities/send-email/', 'title': 'send-email', 'section': 'automation', 'terminologies': ['Infoveave', 'Value'], 'char_count': 3312, 'word_count': 495, 'page_content': 'Send Email | Infoveave Help\nSkip to content\nSend Email\nDescription\nThe\nSend Email', 'chunk_index': 0}, vector=None, shard_key=None, order_value=None)]
[ 2025-08-10 11:39:36,847 ] test_main.py:76 root - INFO - Retrieved result for point ID: b0c2000b-2a94-480e-8ade-5ccb489ed9ea
[ 2025-08-10 11:39:36,847 ] test_main.py:67 root - INFO - (Document(metadata={'_id': 'de5e3b97-dd0f-4d05-8da9-ae3c750c78cc', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='activity allows you to compose and send emails as part of a workflow. You can configure recipient addresses, subject, body content, and attachments . The activity also supports dynamic emailing using fields from input data, and allows the use of pre-designed Infoveave templates for styling and formatting consistency. Use this activity to:\nSend individual or bulk emails based on incoming data\nAttach files generated in the workflow\nFormat emails using templates for consistency\nEmbed processed data directly into the email body\nUse case\n: A workflow generates a monthly sales report and automatically sends personalized emails to each regional manager with their region’s data attached and included in the body.\nInput\nType\nDescription\nData'), 0.33333334)
[ 2025-08-10 11:39:36,909 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-10 11:39:36,956 ] test_main.py:75 root - INFO - [Record(id='de5e3b97-dd0f-4d05-8da9-ae3c750c78cc', payload={'url': 'https://infoveave-help.pages.dev/automation-v8/activities/send-email/', 'title': 'send-email', 'section': 'automation', 'terminologies': ['Infoveave', 'Value'], 'char_count': 3312, 'word_count': 495, 'page_content': 'activity allows you to compose and send emails as part of a workflow. You can configure recipient addresses, subject, body content, and attachments . The activity also supports dynamic emailing using fields from input data, and allows the use of pre-designed Infoveave templates for styling and formatting consistency. Use this activity to:\nSend individual or bulk emails based on incoming data\nAttach files generated in the workflow\nFormat emails using templates for consistency\nEmbed processed data directly into the email body\nUse case\n: A workflow generates a monthly sales report and automatically sends personalized emails to each regional manager with their region’s data attached and included in the body.\nInput\nType\nDescription\nData', 'chunk_index': 1}, vector=None, shard_key=None, order_value=None)]
[ 2025-08-10 11:39:36,956 ] test_main.py:76 root - INFO - Retrieved result for point ID: de5e3b97-dd0f-4d05-8da9-ae3c750c78cc
[ 2025-08-10 11:39:36,956 ] test_main.py:67 root - INFO - (Document(metadata={'_id': '79fddbc7-ebeb-4a13-9afb-02e3c3ec7774', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='(Optional) Tabular data used to populate dynamic fields like email addresses, template content, or attachment grouping.\nOutput\nOutput Type\nFormat\nDescription\nEmail Info\nTable Status of sent emails including recipient, success, and any errors encountered.\nConfiguration Fields\nField Name\nDescription\nConnection\nMail server connection to send emails (OAuth or SMTP supported).\nUse Default Credentials If enabled, uses Infoveave’s default email credentials. Disable to use custom authentication.\nUse Email Address From Data\nIf enabled, pulls recipient addresses from a specified column in the input data.\nEmail Column The column in the data containing the recipient’s email address (required if using email from data).\nEmail To Address\nStatic recipient(s) for the “To” field (comma-separated).\nEmail CC Address Email addresses for the “CC” field (comma-separated).\nEmail BCC Address\nEmail addresses for the “BCC” field.\nSubject\nSubject line of the email. Can be static or mapped from input data.\nContent The main body content of the email. Supports plain text or HTML.\nUse Infoveave Template\nWhen enabled, applies an Infoveave-designed template to the email layout.\nRerun Template Ensures template consistency across multiple emails in the same run.\nAttachment Name\nName of the attachment file (e.g.,\nSalesReport_May2025.xlsx\n).\nSplit By Column Splits data into separate attachments based on values in this column (used in bulk personalization).\nSheet Name\nThe name of the worksheet in the template used for formatting the attachment content.\nSend Data In Email Body If enabled, includes input data as a formatted table within the body of the email.\nAttachment File Pattern\nPattern to identify which files to attach from prior activities (e.g.,\n"*.pdf"\n).\nCombine\nSplit By Column with\nEmail Column\nto send a unique email with corresponding data and attachment per recipient.\nSample Input\nNot applicable\n(used only if sending emails dynamically per row or attaching generated data).\nSample Configuration\nField\nValue'), 0.25)
[ 2025-08-10 11:39:37,017 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-10 11:39:37,065 ] test_main.py:75 root - INFO - [Record(id='79fddbc7-ebeb-4a13-9afb-02e3c3ec7774', payload={'url': 'https://infoveave-help.pages.dev/automation-v8/activities/send-email/', 'title': 'send-email', 'section': 'automation', 'terminologies': ['Infoveave', 'Value'], 'char_count': 3312, 'word_count': 495, 'page_content': '(Optional) Tabular data used to populate dynamic fields like email addresses, template content, or attachment grouping.\nOutput\nOutput Type\nFormat\nDescription\nEmail Info\nTable Status of sent emails including recipient, success, and any errors encountered.\nConfiguration Fields\nField Name\nDescription\nConnection\nMail server connection to send emails (OAuth or SMTP supported).\nUse Default Credentials If enabled, uses Infoveave’s default email credentials. Disable to use custom authentication.\nUse Email Address From Data\nIf enabled, pulls recipient addresses from a specified column in the input data.\nEmail Column The column in the data containing the recipient’s email address (required if using email from data).\nEmail To Address\nStatic recipient(s) for the “To” field (comma-separated).\nEmail CC Address Email addresses for the “CC” field (comma-separated).\nEmail BCC Address\nEmail addresses for the “BCC” field.\nSubject\nSubject line of the email. Can be static or mapped from input data.\nContent The main body content of the email. Supports plain text or HTML.\nUse Infoveave Template\nWhen enabled, applies an Infoveave-designed template to the email layout.\nRerun Template Ensures template consistency across multiple emails in the same run.\nAttachment Name\nName of the attachment file (e.g.,\nSalesReport_May2025.xlsx\n).\nSplit By Column Splits data into separate attachments based on values in this column (used in bulk personalization).\nSheet Name\nThe name of the worksheet in the template used for formatting the attachment content.\nSend Data In Email Body If enabled, includes input data as a formatted table within the body of the email.\nAttachment File Pattern\nPattern to identify which files to attach from prior activities (e.g.,\n"*.pdf"\n).\nCombine\nSplit By Column with\nEmail Column\nto send a unique email with corresponding data and attachment per recipient.\nSample Input\nNot applicable\n(used only if sending emails dynamically per row or attaching generated data).\nSample Configuration\nField\nValue', 'chunk_index': 2}, vector=None, shard_key=None, order_value=None)]
[ 2025-08-10 11:39:37,065 ] test_main.py:76 root - INFO - Retrieved result for point ID: 79fddbc7-ebeb-4a13-9afb-02e3c3ec7774
[ 2025-08-10 11:39:37,065 ] test_main.py:67 root - INFO - (Document(metadata={'_id': 'ea0e4e86-0f23-462b-a182-48cedad8fdd9', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='2025-07-01T10:05:00Z\njohn@example.com\nWelcome Email\n18KB\nonboarding\nev1235\nopened\n2025-07-01T10:08:00Z jane@example.com\nPromo Offer\n22KB\npromotions\nFor\nMessages\nEntity (JSON):\n{\n"headers"\n: {\n"message-id"\n:\n"\n<abc@mailgun.org>'), 0.2)
[ 2025-08-10 11:39:37,124 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-10 11:39:37,126 ] test_main.py:75 root - INFO - [Record(id='ea0e4e86-0f23-462b-a182-48cedad8fdd9', payload={'url': 'https://infoveave-help.pages.dev/automation-v8/activities/mailgun/', 'title': 'mailgun', 'section': 'automation', 'terminologies': ['Infoveave', 'Tags', 'Value', 'Workflows'], 'char_count': 3213, 'word_count': 485, 'page_content': '2025-07-01T10:05:00Z\njohn@example.com\nWelcome Email\n18KB\nonboarding\nev1235\nopened\n2025-07-01T10:08:00Z jane@example.com\nPromo Offer\n22KB\npromotions\nFor\nMessages\nEntity (JSON):\n{\n"headers"\n: {\n"message-id"\n:\n"\n<abc@mailgun.org>', 'chunk_index': 3}, vector=None, shard_key=None, order_value=None)]
[ 2025-08-10 11:39:37,126 ] test_main.py:76 root - INFO - Retrieved result for point ID: ea0e4e86-0f23-462b-a182-48cedad8fdd9
[ 2025-08-10 11:39:37,126 ] test_main.py:67 root - INFO - (Document(metadata={'_id': 'b6d38099-c9de-471f-973c-0f9d734b02ec', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='Activity Step\nReplaced Values\nSendEmail_12345\nStep 1\nCustomerName: John Doe\nSendEmail_67890\nStep 2\nCustomerName: Jane Smith'), 0.16666667)
[ 2025-08-10 11:39:37,184 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-10 11:39:37,185 ] test_main.py:75 root - INFO - [Record(id='b6d38099-c9de-471f-973c-0f9d734b02ec', payload={'url': 'https://infoveave-help.pages.dev/automation-v8/activities/start-iteration/', 'title': 'start-iteration', 'section': 'automation', 'terminologies': ['Infoveave', 'Value'], 'char_count': 2180, 'word_count': 314, 'page_content': 'Activity Step\nReplaced Values\nSendEmail_12345\nStep 1\nCustomerName: John Doe\nSendEmail_67890\nStep 2\nCustomerName: Jane Smith', 'chunk_index': 2}, vector=None, shard_key=None, order_value=None)]
[ 2025-08-10 11:39:37,185 ] test_main.py:76 root - INFO - Retrieved result for point ID: b6d38099-c9de-471f-973c-0f9d734b02ec
[ 2025-08-10 11:39:37,185 ] test_main.py:89 root - INFO - [{'page_content': 'Send Email | Infoveave Help\nSkip to content\nSend Email\nDescription\nThe\nSend Email', 'url': 'https://infoveave-help.pages.dev/automation-v8/activities/send-email/', 'title': 'send-email', 'section': 'automation', 'terminologies': ['Infoveave', 'Value'], 'char_count': 3312, 'word_count': 495, 'chunk_index': 0}, {'page_content': 'activity allows you to compose and send emails as part of a workflow. You can configure recipient addresses, subject, body content, and attachments . The activity also supports dynamic emailing using fields from input data, and allows the use of pre-designed Infoveave templates for styling and formatting consistency. Use this activity to:\nSend individual or bulk emails based on incoming data\nAttach files generated in the workflow\nFormat emails using templates for consistency\nEmbed processed data directly into the email body\nUse case\n: A workflow generates a monthly sales report and automatically sends personalized emails to each regional manager with their region’s data attached and included in the body.\nInput\nType\nDescription\nData', 'url': 'https://infoveave-help.pages.dev/automation-v8/activities/send-email/', 'title': 'send-email', 'section': 'automation', 'terminologies': ['Infoveave', 'Value'], 'char_count': 3312, 'word_count': 495, 'chunk_index': 1}, {'page_content': '(Optional) Tabular data used to populate dynamic fields like email addresses, template content, or attachment grouping.\nOutput\nOutput Type\nFormat\nDescription\nEmail Info\nTable Status of sent emails including recipient, success, and any errors encountered.\nConfiguration Fields\nField Name\nDescription\nConnection\nMail server connection to send emails (OAuth or SMTP supported).\nUse Default Credentials If enabled, uses Infoveave’s default email credentials. Disable to use custom authentication.\nUse Email Address From Data\nIf enabled, pulls recipient addresses from a specified column in the input data.\nEmail Column The column in the data containing the recipient’s email address (required if using email from data).\nEmail To Address\nStatic recipient(s) for the “To” field (comma-separated).\nEmail CC Address Email addresses for the “CC” field (comma-separated).\nEmail BCC Address\nEmail addresses for the “BCC” field.\nSubject\nSubject line of the email. Can be static or mapped from input data.\nContent The main body content of the email. Supports plain text or HTML.\nUse Infoveave Template\nWhen enabled, applies an Infoveave-designed template to the email layout.\nRerun Template Ensures template consistency across multiple emails in the same run.\nAttachment Name\nName of the attachment file (e.g.,\nSalesReport_May2025.xlsx\n).\nSplit By Column Splits data into separate attachments based on values in this column (used in bulk personalization).\nSheet Name\nThe name of the worksheet in the template used for formatting the attachment content.\nSend Data In Email Body If enabled, includes input data as a formatted table within the body of the email.\nAttachment File Pattern\nPattern to identify which files to attach from prior activities (e.g.,\n"*.pdf"\n).\nCombine\nSplit By Column with\nEmail Column\nto send a unique email with corresponding data and attachment per recipient.\nSample Input\nNot applicable\n(used only if sending emails dynamically per row or attaching generated data).\nSample Configuration\nField\nValue', 'url': 'https://infoveave-help.pages.dev/automation-v8/activities/send-email/', 'title': 'send-email', 'section': 'automation', 'terminologies': ['Infoveave', 'Value'], 'char_count': 3312, 'word_count': 495, 'chunk_index': 2}, {'page_content': '2025-07-01T10:05:00Z\njohn@example.com\nWelcome Email\n18KB\nonboarding\nev1235\nopened\n2025-07-01T10:08:00Z jane@example.com\nPromo Offer\n22KB\npromotions\nFor\nMessages\nEntity (JSON):\n{\n"headers"\n: {\n"message-id"\n:\n"\n<abc@mailgun.org>', 'url': 'https://infoveave-help.pages.dev/automation-v8/activities/mailgun/', 'title': 'mailgun', 'section': 'automation', 'terminologies': ['Infoveave', 'Tags', 'Value', 'Workflows'], 'char_count': 3213, 'word_count': 485, 'chunk_index': 3}, {'page_content': 'Activity Step\nReplaced Values\nSendEmail_12345\nStep 1\nCustomerName: John Doe\nSendEmail_67890\nStep 2\nCustomerName: Jane Smith', 'url': 'https://infoveave-help.pages.dev/automation-v8/activities/start-iteration/', 'title': 'start-iteration', 'section': 'automation', 'terminologies': ['Infoveave', 'Value'], 'char_count': 2180, 'word_count': 314, 'chunk_index': 2}]
[ 2025-08-10 11:39:37,185 ] test_main.py:328 root - INFO - Found 2 final documents.
[ 2025-08-10 11:39:37,185 ] test_main.py:375 root - INFO - Context prepared for LLM response.
[ 2025-08-10 11:39:37,208 ] test_main.py:403 root - INFO - Generating final answer using LLM...
[ 2025-08-10 11:39:38,910 ] _client.py:1025 httpx - INFO - HTTP Request: POST https://api.groq.com/openai/v1/chat/completions "HTTP/1.1 200 OK"
[ 2025-08-10 11:39:38,916 ] test_main.py:405 root - INFO - Final LLM Response:

[ 2025-08-10 11:39:38,916 ] test_main.py:406 root - INFO - Here's how to create a workflow in Infoveave to run an Oracle DB query and send the results as an email report:

**1. Execute Query Activity:**

The `Execute Query` activity is your starting point. It allows you to fetch data directly from your Oracle database.

* **Connection:**  First, you'll need to establish a connection to your Oracle database within Infoveave. This involves providing the necessary credentials (database server, username, password) and selecting the appropriate database type.

* **SQL Query:**  Next, input your SQL query. This query should select the specific data you want to include in your report.

* **Example:**

   ```sql
   SELECT customer_name, order_date, total_amount
   FROM orders
   WHERE order_date BETWEEN '2023-01-01' AND '2023-12-31';
   ```

* **Output:** The `Execute Query` activity will return the results of your query as a table.

**2. Send Email Activity:**

The `Send Email` activity takes the data from the `Execute Query` activity and formats it into an email report.

* **Connection:**  Configure the `Send Email` activity to use your desired email service (e.g., Gmail, Outlook, or a dedicated SMTP server). You'll need to provide the necessary authentication details.

* **Recipient:** Specify the email address(es) of the recipients. You can use a static email address or pull recipient information from your data.

* **Subject:**  Craft a clear and concise subject line for your email report.

* **Content:**  

    * **Plain Text:** You can write the email body directly in plain text.
    * **HTML:** For more formatting options, use HTML to structure your email.
    * **Dynamic Content:**  Use variables from the `Execute Query` activity to personalize the email content. For example, you could include the customer name or order date in the email body.

* **Attachments:**  Attach the query results as a file (e.g., CSV, Excel) to your email.

* **Example:**

   ```
   Subject: Monthly Sales Report for [Region Name]

   Dear [Customer Name],

   Please find attached the monthly sales report for [Region Name] for [Month Year].

   Sincerely,
   [Your Name]
   ```

**Workflow Example:**

1. **Trigger:**  Your workflow could be triggered by a scheduled event (e.g., daily, weekly) or by an incoming data event.

2. **Execute Query:**  The `Execute Query` activity runs your SQL query against the Oracle database.

3. **Send Email:**  The `Send Email` activity:
   *  Uses the query results to personalize the email content.
   *  Attaches the query results as a file.
   *  Sends the email to the specified recipients.



Let me know if you have any more questions or would like to explore specific aspects of the workflow in more detail!

[ 2025-08-10 11:39:38,918 ] test_main.py:413 root - INFO - LLM response saved to ./data/results/infoverve_helper_response.md
[ 2025-08-10 11:42:29,475 ] test_main.py:152 root - INFO - .........................Starting Infoverve Helper Application.........................
[ 2025-08-10 11:42:29,475 ] test_main.py:168 root - INFO - GROQ_API_KEY loaded.
[ 2025-08-10 11:42:29,485 ] test_main.py:192 root - INFO - Embedding model initialized.
[ 2025-08-10 11:42:29,730 ] _client.py:1025 httpx - INFO - HTTP Request: GET http://ai.infoveave.cloud:6333 "HTTP/1.1 200 OK"
[ 2025-08-10 11:42:29,732 ] test_main.py:196 root - INFO - Connected to Qdrant.
[ 2025-08-10 11:42:29,844 ] _client.py:1025 httpx - INFO - HTTP Request: GET http://ai.infoveave.cloud:6333/collections "HTTP/1.1 200 OK"
[ 2025-08-10 11:42:29,845 ] test_main.py:200 root - INFO - Qdrant collections retrieved.
[ 2025-08-10 11:42:29,846 ] test_main.py:207 root - INFO - Using collection: infoverve_helper_docs_hybrid
[ 2025-08-10 11:42:31,100 ] test_main.py:210 root - INFO - Sparse embeddings initialized.
[ 2025-08-10 11:42:31,168 ] _client.py:1025 httpx - INFO - HTTP Request: GET http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid "HTTP/1.1 200 OK"
[ 2025-08-10 11:42:32,127 ] _client.py:1025 httpx - INFO - HTTP Request: GET http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid "HTTP/1.1 200 OK"
[ 2025-08-10 11:42:32,129 ] test_main.py:222 root - INFO - QdrantVectorStore initialized.
[ 2025-08-10 11:42:32,163 ] test_main.py:228 root - INFO - LLM initialized.
[ 2025-08-10 11:42:33,620 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points/query "HTTP/1.1 200 OK"
[ 2025-08-10 11:42:34,318 ] test_main.py:250 root - INFO - Original query embedding generated.
[ 2025-08-10 11:42:34,341 ] test_main.py:65 root - INFO - Building context with metadata from documents...
[ 2025-08-10 11:42:34,341 ] test_main.py:67 root - INFO - (Document(metadata={'_id': '5277ccca-017e-4aba-b405-977f8f65fe7f', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='0%\nPlay\n0:00\n/\n1:14\nCreating Workflows\nEnter Fullscreen\nIntroduction\n0:00\n1:14\n0:00\nIntroduction\n0:11\nNavigate to Data Sources 0:16\nCreate New Data Source\n0:18\nSelect IOT\n0:20\nSelect and Upload the File\n0:24\nName the Data Source and Table\n0:30\nSelect Ingestion Type 1:01\nAdd Additional Files\n1:06\nAdd a Calculated Column'), 0.5)
[ 2025-08-10 11:42:34,401 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-10 11:42:34,405 ] test_main.py:75 root - INFO - [Record(id='5277ccca-017e-4aba-b405-977f8f65fe7f', payload={'url': 'https://infoveave-help.pages.dev/studio-v8/datasources/create-datasource-from-iot/', 'title': 'create-datasource-from-iot', 'section': 'studio', 'terminologies': ['Calculated Columns', 'Calculated Measures', 'Datasources', 'Dimensions', 'Infoveave', 'Insights', 'Measures', 'View', 'View', 'Workflows'], 'char_count': 4366, 'word_count': 718, 'page_content': '0%\nPlay\n0:00\n/\n1:14\nCreating Workflows\nEnter Fullscreen\nIntroduction\n0:00\n1:14\n0:00\nIntroduction\n0:11\nNavigate to Data Sources 0:16\nCreate New Data Source\n0:18\nSelect IOT\n0:20\nSelect and Upload the File\n0:24\nName the Data Source and Table\n0:30\nSelect Ingestion Type 1:01\nAdd Additional Files\n1:06\nAdd a Calculated Column', 'chunk_index': 1}, vector=None, shard_key=None, order_value=None)]
[ 2025-08-10 11:42:34,405 ] test_main.py:76 root - INFO - Retrieved result for point ID: 5277ccca-017e-4aba-b405-977f8f65fe7f
[ 2025-08-10 11:42:34,405 ] test_main.py:67 root - INFO - (Document(metadata={'_id': 'fa3a2b04-d657-4ab1-872e-c4300b408723', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='Execute API | Infoveave Help\nSkip to content\nExecute API\nDescription\nThe\nExecute API Activity\nenables workflows to connect and communicate with any RESTful API by executing configurable HTTP requests such as\nGET\n,\nPOST\n, PUT\n, or\nDELETE\n. It allows users to define the request structure including headers, query parameters, body content, pagination rules, response parsing, and authentication.\nThis activity is highly flexible and supports integration with\nthird-party systems'), 0.33333334)
[ 2025-08-10 11:42:34,472 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-10 11:42:34,473 ] test_main.py:75 root - INFO - [Record(id='fa3a2b04-d657-4ab1-872e-c4300b408723', payload={'url': 'https://infoveave-help.pages.dev/automation-v8/activities/execute-api/', 'title': 'execute-api', 'section': 'automation', 'terminologies': ['Automation', 'Infoveave', 'Query', 'Value', 'Variables', 'Workflows'], 'char_count': 4334, 'word_count': 636, 'page_content': 'Execute API | Infoveave Help\nSkip to content\nExecute API\nDescription\nThe\nExecute API Activity\nenables workflows to connect and communicate with any RESTful API by executing configurable HTTP requests such as\nGET\n,\nPOST\n, PUT\n, or\nDELETE\n. It allows users to define the request structure including headers, query parameters, body content, pagination rules, response parsing, and authentication.\nThis activity is highly flexible and supports integration with\nthird-party systems', 'chunk_index': 0}, vector=None, shard_key=None, order_value=None)]
[ 2025-08-10 11:42:34,473 ] test_main.py:76 root - INFO - Retrieved result for point ID: fa3a2b04-d657-4ab1-872e-c4300b408723
[ 2025-08-10 11:42:34,473 ] test_main.py:67 root - INFO - (Document(metadata={'_id': '3fd7ab5c-2d29-41ea-9ed7-0684f87b08e1', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='Add FTP Download Activity\n0:21\nConfigure FTP Download Activity\n0:31\nAdd Read Excel Files Activity\n0:35\nAdd Transform Activity using Javascript\n0:40\nAdd Round Numbers Activity\n0:46 Add Remove Duplicate Rows Activity\n0:52\nAdd Drop Columns Activity\n0:56\nAdd Rename Columns Activity\n1:01\nAdd Upload to Datasource Activity\n1:08\nExecute the Workflow and View Instance History'), 0.25)
[ 2025-08-10 11:42:34,581 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-10 11:42:34,582 ] test_main.py:75 root - INFO - [Record(id='3fd7ab5c-2d29-41ea-9ed7-0684f87b08e1', payload={'url': 'https://infoveave-help.pages.dev/automation-v8/jobs-v8/create-new-job/', 'title': 'create-new-job', 'section': 'automation', 'terminologies': ['Alerts', 'Automation', 'Infoveave', 'Measures', 'Query', 'Query Report', 'Value', 'Variables', 'View', 'View', 'Workflows'], 'char_count': 4476, 'word_count': 722, 'page_content': 'Add FTP Download Activity\n0:21\nConfigure FTP Download Activity\n0:31\nAdd Read Excel Files Activity\n0:35\nAdd Transform Activity using Javascript\n0:40\nAdd Round Numbers Activity\n0:46 Add Remove Duplicate Rows Activity\n0:52\nAdd Drop Columns Activity\n0:56\nAdd Rename Columns Activity\n1:01\nAdd Upload to Datasource Activity\n1:08\nExecute the Workflow and View Instance History', 'chunk_index': 1}, vector=None, shard_key=None, order_value=None)]
[ 2025-08-10 11:42:34,583 ] test_main.py:76 root - INFO - Retrieved result for point ID: 3fd7ab5c-2d29-41ea-9ed7-0684f87b08e1
[ 2025-08-10 11:42:34,583 ] test_main.py:67 root - INFO - (Document(metadata={'_id': '2adcd9bd-c3f6-41e9-8c27-26f07adfbe4c', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='Add FTP Download Activity\n0:21\nConfigure FTP Download Activity\n0:31\nAdd Read Excel Files Activity\n0:35\nAdd Transform Activity using Javascript\n0:40\nAdd Round Numbers Activity\n0:46 Add Remove Duplicate Rows Activity\n0:52\nAdd Drop Columns Activity\n0:56\nAdd Rename Columns Activity\n1:01\nAdd Upload to Datasource Activity\n1:08\nExecute the Workflow and View Instance History'), 0.2)
[ 2025-08-10 11:42:34,639 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-10 11:42:34,640 ] test_main.py:75 root - INFO - [Record(id='2adcd9bd-c3f6-41e9-8c27-26f07adfbe4c', payload={'url': 'https://infoveave-help.pages.dev/automation-v8/workflows/define-workflow/', 'title': 'define-workflow', 'section': 'automation', 'terminologies': ['Alerts', 'Automation', 'Infoveave', 'Measures', 'Query', 'Query Report', 'Value', 'Variables', 'View', 'View', 'Workflows'], 'char_count': 4476, 'word_count': 722, 'page_content': 'Add FTP Download Activity\n0:21\nConfigure FTP Download Activity\n0:31\nAdd Read Excel Files Activity\n0:35\nAdd Transform Activity using Javascript\n0:40\nAdd Round Numbers Activity\n0:46 Add Remove Duplicate Rows Activity\n0:52\nAdd Drop Columns Activity\n0:56\nAdd Rename Columns Activity\n1:01\nAdd Upload to Datasource Activity\n1:08\nExecute the Workflow and View Instance History', 'chunk_index': 1}, vector=None, shard_key=None, order_value=None)]
[ 2025-08-10 11:42:34,641 ] test_main.py:76 root - INFO - Retrieved result for point ID: 2adcd9bd-c3f6-41e9-8c27-26f07adfbe4c
[ 2025-08-10 11:42:34,641 ] test_main.py:67 root - INFO - (Document(metadata={'_id': 'df9d15c4-2094-450f-95e6-162e03d5828a', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='Creating Infoboard Using A Query\nCreate Infoboard Using A Query\nCreating Infoboard Using API\nCreate Infoboard Using API\nCreating Workflow in Infoveave\nCreating Workflows\nWorkflow Execution Status\nWorkflow Execution Status'), 0.16666667)
[ 2025-08-10 11:42:34,700 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-10 11:42:34,701 ] test_main.py:75 root - INFO - [Record(id='df9d15c4-2094-450f-95e6-162e03d5828a', payload={'url': 'https://infoveave-help.pages.dev/videos/', 'title': 'videos', 'section': 'videos', 'terminologies': ['Automation', 'Catalogues', 'Conditional Expressions', 'Custom Calendar', 'Datasources', 'Dimensions', 'Infoboards', 'Infoveave', 'Insights', 'Lists', 'Measures', 'My Organization', 'My Workspace', 'Query', 'Reports', 'SciPyR', 'What-If Analysis', 'What-If Formulae', 'Workflows', 'Workflow Execution Status'], 'char_count': 2430, 'word_count': 338, 'page_content': 'Creating Infoboard Using A Query\nCreate Infoboard Using A Query\nCreating Infoboard Using API\nCreate Infoboard Using API\nCreating Workflow in Infoveave\nCreating Workflows\nWorkflow Execution Status\nWorkflow Execution Status', 'chunk_index': 3}, vector=None, shard_key=None, order_value=None)]
[ 2025-08-10 11:42:34,701 ] test_main.py:76 root - INFO - Retrieved result for point ID: df9d15c4-2094-450f-95e6-162e03d5828a
[ 2025-08-10 11:42:34,701 ] test_main.py:67 root - INFO - (Document(metadata={'_id': 'e1d5e729-523e-4f47-8f5c-47908efa00f5', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='In the Workflow Designer, you can connect activities by linking the output of one activity to the input of another. Each activity has input and output nodes. This allows you to define the logical flow and sequence of activities within your Workflow . By visually connecting activities, you can create a cohesive Workflow that accurately reflects your desired data processing steps.'), 0.14285715)
[ 2025-08-10 11:42:34,750 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-10 11:42:34,751 ] test_main.py:75 root - INFO - [Record(id='e1d5e729-523e-4f47-8f5c-47908efa00f5', payload={'url': 'https://infoveave-help.pages.dev/automation-v8/jobs-v8/job-configuration-layout/', 'title': 'job-configuration-layout', 'section': 'automation', 'terminologies': ['Alerts', 'Designer Canvas', 'Infoveave', 'Variables', 'Version history', 'View', 'View', 'Workflows'], 'char_count': 3891, 'word_count': 586, 'page_content': 'In the Workflow Designer, you can connect activities by linking the output of one activity to the input of another. Each activity has input and output nodes. This allows you to define the logical flow and sequence of activities within your Workflow . By visually connecting activities, you can create a cohesive Workflow that accurately reflects your desired data processing steps.', 'chunk_index': 4}, vector=None, shard_key=None, order_value=None)]
[ 2025-08-10 11:42:34,751 ] test_main.py:76 root - INFO - Retrieved result for point ID: e1d5e729-523e-4f47-8f5c-47908efa00f5
[ 2025-08-10 11:42:34,751 ] test_main.py:67 root - INFO - (Document(metadata={'_id': '99d90ede-22f2-4654-9344-3847ee37ebe3', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='In the Workflow Designer, you can connect activities by linking the output of one activity to the input of another. Each activity has input and output nodes. This allows you to define the logical flow and sequence of activities within your Workflow . By visually connecting activities, you can create a cohesive Workflow that accurately reflects your desired data processing steps.'), 0.125)
[ 2025-08-10 11:42:34,814 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-10 11:42:34,815 ] test_main.py:75 root - INFO - [Record(id='99d90ede-22f2-4654-9344-3847ee37ebe3', payload={'url': 'https://infoveave-help.pages.dev/automation-v8/workflows/workflow-configuration-layout/', 'title': 'workflow-configuration-layout', 'section': 'automation', 'terminologies': ['Alerts', 'Designer Canvas', 'Infoveave', 'Variables', 'Version history', 'View', 'View', 'Workflows'], 'char_count': 3891, 'word_count': 586, 'page_content': 'In the Workflow Designer, you can connect activities by linking the output of one activity to the input of another. Each activity has input and output nodes. This allows you to define the logical flow and sequence of activities within your Workflow . By visually connecting activities, you can create a cohesive Workflow that accurately reflects your desired data processing steps.', 'chunk_index': 4}, vector=None, shard_key=None, order_value=None)]
[ 2025-08-10 11:42:34,815 ] test_main.py:76 root - INFO - Retrieved result for point ID: 99d90ede-22f2-4654-9344-3847ee37ebe3
[ 2025-08-10 11:42:34,815 ] test_main.py:67 root - INFO - (Document(metadata={'_id': '03741da5-a422-4032-ab47-32afa5385f47', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='Create a datasource using Microsoft Excel | Infoveave Help\nSkip to content\nCreate a datasource using Microsoft Excel\n0:00\nPlay\nMute\n0%\n0:00\n/\n1:56\nCreating Workflows Closed-Captions Off\nSettings\nAirPlay\nGoogle Cast\nEnter PiP\nEnter Fullscreen'), 0.11111111)
[ 2025-08-10 11:42:34,869 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-10 11:42:34,870 ] test_main.py:75 root - INFO - [Record(id='03741da5-a422-4032-ab47-32afa5385f47', payload={'url': 'https://infoveave-help.pages.dev/how-to/create-a-datasource-using-microsoft-excel/', 'title': 'create-a-datasource-using-microsoft-excel', 'section': 'data-application', 'terminologies': ['Infoveave', 'Workflows'], 'char_count': 241, 'word_count': 37, 'page_content': 'Create a datasource using Microsoft Excel | Infoveave Help\nSkip to content\nCreate a datasource using Microsoft Excel\n0:00\nPlay\nMute\n0%\n0:00\n/\n1:56\nCreating Workflows Closed-Captions Off\nSettings\nAirPlay\nGoogle Cast\nEnter PiP\nEnter Fullscreen', 'chunk_index': 0}, vector=None, shard_key=None, order_value=None)]
[ 2025-08-10 11:42:34,870 ] test_main.py:76 root - INFO - Retrieved result for point ID: 03741da5-a422-4032-ab47-32afa5385f47
[ 2025-08-10 11:42:34,871 ] test_main.py:67 root - INFO - (Document(metadata={'_id': 'da017f02-664a-4420-918f-56af25901047', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='Workflows | Infoveave Help\nSkip to content\nWorkflows Infoveave workflows let you automate and streamline your data processes. These processes range from ingestion to visualization. A workflow is a sequence of connected activities that automates business-critical tasks such as data acquisition, analysis, and reporting. Edit the Workflow status\nClick the pencil icon\nnext to a Workflow name to select whether the Workflow is\nverified\nor\nnot verified\n.\nCategorize the Workflow\nAssign specific\ndomains\n,\ntiers\n,'), 0.1)
[ 2025-08-10 11:42:34,927 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-10 11:42:34,928 ] test_main.py:75 root - INFO - [Record(id='da017f02-664a-4420-918f-56af25901047', payload={'url': 'https://infoveave-help.pages.dev/data-application/catalogues/workflows/', 'title': 'workflows', 'section': 'data-application', 'terminologies': ['Domains', 'Infoveave', 'Insights', 'Tags', 'Tiers', 'View', 'View', 'Workflows'], 'char_count': 2918, 'word_count': 452, 'page_content': 'Workflows | Infoveave Help\nSkip to content\nWorkflows Infoveave workflows let you automate and streamline your data processes. These processes range from ingestion to visualization. A workflow is a sequence of connected activities that automates business-critical tasks such as data acquisition, analysis, and reporting. Edit the Workflow status\nClick the pencil icon\nnext to a Workflow name to select whether the Workflow is\nverified\nor\nnot verified\n.\nCategorize the Workflow\nAssign specific\ndomains\n,\ntiers\n,', 'chunk_index': 0}, vector=None, shard_key=None, order_value=None)]
[ 2025-08-10 11:42:34,929 ] test_main.py:76 root - INFO - Retrieved result for point ID: da017f02-664a-4420-918f-56af25901047
[ 2025-08-10 11:42:34,929 ] test_main.py:67 root - INFO - (Document(metadata={'_id': '9779ce44-7139-4da5-99ff-241ed83453de', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='Sources\nand click\n+ Add New Source\n.\nClick\nUse Code\n.\nName the source.\nWrite JavaScript code.\nClick\nPreview Table\n.\nClick\nSave\n.\nConfiguring an Infoboard You can configure Infoboards under the\nInfoboard Setup tab in the Customize panel . This allows you to personalize the Infoboard name, define the date range (including options like years, quarters, months, weeks, or days), and selectively choose relevant workflows to tailor the Infoboard according to your specific needs. Here are the key instructions for using the Infoboards section.\nInfoboard name\nEnter a descriptive and meaningful name for your Infoboard. Choose a name that accurately reflects the purpose or content of the Infoboard. Date range\nSelect the appropriate date range option for your Infoboard.\nDefault Automatically determine the date range based on the available dataset. Choose from a range of options such as years, quarters, months, weeks, or days to define the default date range.\nFixed Define a specific date range for the Infoboard, such as particular days, weeks, months, quarters, or years.\nNo Date\nUse this option if your Infoboard does not require any date-related information. Select workflows and jobs\nUse the dropdown to select the relevant workflows or jobs and link them with the Infoboard. The Infoboard displays the linked workflows or jobs execution status at the top-right corner of the screen.'), 0.09090909)
[ 2025-08-10 11:42:34,989 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-10 11:42:34,993 ] test_main.py:75 root - INFO - [Record(id='9779ce44-7139-4da5-99ff-241ed83453de', payload={'url': 'https://infoveave-help.pages.dev/insights-v8/guide-to-infoboard-designer/customizie-panel/setup/sources/', 'title': 'sources', 'section': 'insights', 'terminologies': ['Calculated Columns', 'Client', 'Color Palette', 'Common Dimension filters', 'Datasources', 'Dimensions', 'Expression', 'Infoboards', 'Infoboard Setup', 'Infoveave', 'Measures', 'Query', 'Value', 'Variables', 'View', 'View', 'Workflows'], 'char_count': 11349, 'word_count': 1871, 'page_content': 'Sources\nand click\n+ Add New Source\n.\nClick\nUse Code\n.\nName the source.\nWrite JavaScript code.\nClick\nPreview Table\n.\nClick\nSave\n.\nConfiguring an Infoboard You can configure Infoboards under the\nInfoboard Setup tab in the Customize panel . This allows you to personalize the Infoboard name, define the date range (including options like years, quarters, months, weeks, or days), and selectively choose relevant workflows to tailor the Infoboard according to your specific needs. Here are the key instructions for using the Infoboards section.\nInfoboard name\nEnter a descriptive and meaningful name for your Infoboard. Choose a name that accurately reflects the purpose or content of the Infoboard. Date range\nSelect the appropriate date range option for your Infoboard.\nDefault Automatically determine the date range based on the available dataset. Choose from a range of options such as years, quarters, months, weeks, or days to define the default date range.\nFixed Define a specific date range for the Infoboard, such as particular days, weeks, months, quarters, or years.\nNo Date\nUse this option if your Infoboard does not require any date-related information. Select workflows and jobs\nUse the dropdown to select the relevant workflows or jobs and link them with the Infoboard. The Infoboard displays the linked workflows or jobs execution status at the top-right corner of the screen.', 'chunk_index': 5}, vector=None, shard_key=None, order_value=None)]
[ 2025-08-10 11:42:34,993 ] test_main.py:76 root - INFO - Retrieved result for point ID: 9779ce44-7139-4da5-99ff-241ed83453de
[ 2025-08-10 11:42:34,995 ] test_main.py:102 root - INFO - Loaded rewritten query system prompt.
[ 2025-08-10 11:42:34,996 ] test_main.py:114 root - INFO - Loaded rewritten query user prompt.
[ 2025-08-10 11:42:35,847 ] _client.py:1025 httpx - INFO - HTTP Request: POST https://api.groq.com/openai/v1/chat/completions "HTTP/1.1 200 OK"
[ 2025-08-10 11:42:35,854 ] test_main.py:255 root - INFO - Rewritten query: Execute API| Add Datasource from File| Add Calculated Column
[ 2025-08-10 11:42:35,854 ] test_main.py:262 root - INFO - Rewritten query parts: ['Execute API', 'Add Datasource from File', 'Add Calculated Column']
[ 2025-08-10 11:42:35,854 ] test_main.py:271 root - INFO - Rewritten Query 1: Execute API
[ 2025-08-10 11:42:36,776 ] test_main.py:274 root - INFO - Embedding generated for query 1.
[ 2025-08-10 11:42:37,828 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points/query "HTTP/1.1 200 OK"
[ 2025-08-10 11:42:37,830 ] test_main.py:286 root - INFO - Processing query part 1: Execute API
[ 2025-08-10 11:42:37,853 ] test_main.py:65 root - INFO - Building context with metadata from documents...
[ 2025-08-10 11:42:37,854 ] test_main.py:67 root - INFO - (Document(metadata={'_id': 'fa3a2b04-d657-4ab1-872e-c4300b408723', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='Execute API | Infoveave Help\nSkip to content\nExecute API\nDescription\nThe\nExecute API Activity\nenables workflows to connect and communicate with any RESTful API by executing configurable HTTP requests such as\nGET\n,\nPOST\n, PUT\n, or\nDELETE\n. It allows users to define the request structure including headers, query parameters, body content, pagination rules, response parsing, and authentication.\nThis activity is highly flexible and supports integration with\nthird-party systems'), 0.5)
[ 2025-08-10 11:42:37,913 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-10 11:42:37,918 ] test_main.py:75 root - INFO - [Record(id='fa3a2b04-d657-4ab1-872e-c4300b408723', payload={'url': 'https://infoveave-help.pages.dev/automation-v8/activities/execute-api/', 'title': 'execute-api', 'section': 'automation', 'terminologies': ['Automation', 'Infoveave', 'Query', 'Value', 'Variables', 'Workflows'], 'char_count': 4334, 'word_count': 636, 'page_content': 'Execute API | Infoveave Help\nSkip to content\nExecute API\nDescription\nThe\nExecute API Activity\nenables workflows to connect and communicate with any RESTful API by executing configurable HTTP requests such as\nGET\n,\nPOST\n, PUT\n, or\nDELETE\n. It allows users to define the request structure including headers, query parameters, body content, pagination rules, response parsing, and authentication.\nThis activity is highly flexible and supports integration with\nthird-party systems', 'chunk_index': 0}, vector=None, shard_key=None, order_value=None)]
[ 2025-08-10 11:42:37,918 ] test_main.py:76 root - INFO - Retrieved result for point ID: fa3a2b04-d657-4ab1-872e-c4300b408723
[ 2025-08-10 11:42:37,918 ] test_main.py:67 root - INFO - (Document(metadata={'_id': '86f0e3ce-235c-4f7a-8dc3-6c50480e3d01', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content=',\ncustom backends\n,\npublic APIs\n, and , all without requiring external tools.\nUse case\n:\nIn a logistics automation workflow, use this activity to call a courier tracking API like'), 0.33333334)
[ 2025-08-10 11:42:37,971 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-10 11:42:37,972 ] test_main.py:75 root - INFO - [Record(id='86f0e3ce-235c-4f7a-8dc3-6c50480e3d01', payload={'url': 'https://infoveave-help.pages.dev/automation-v8/activities/execute-api/', 'title': 'execute-api', 'section': 'automation', 'terminologies': ['Automation', 'Infoveave', 'Query', 'Value', 'Variables', 'Workflows'], 'char_count': 4334, 'word_count': 636, 'page_content': ',\ncustom backends\n,\npublic APIs\n, and , all without requiring external tools.\nUse case\n:\nIn a logistics automation workflow, use this activity to call a courier tracking API like', 'chunk_index': 1}, vector=None, shard_key=None, order_value=None)]
[ 2025-08-10 11:42:37,972 ] test_main.py:76 root - INFO - Retrieved result for point ID: 86f0e3ce-235c-4f7a-8dc3-6c50480e3d01
[ 2025-08-10 11:42:37,972 ] test_main.py:67 root - INFO - (Document(metadata={'_id': '3b0042a7-bf88-4e9c-bc13-af93ce17095c', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='activity allows you to run a custom Node.js script or application as part of a workflow. You can specify the script file, working directory, command, output location, and control execution timeout.\nUse this activity to: Run backend automation written in Node.js\nProcess data, files, or external API responses using custom JavaScript logic\nIntegrate with CLI tools or third-party Node packages\nUse Case\n: Useful when workflows require backend processing logic like JSON manipulation, calling APIs, or custom data transformation that is best handled using Node.js.\nInput\nType\nDescription\nFiles\nProject or script files required for execution\nOutput\nType\nFormat Description\nExecution Data\nTable\nOutput from the executed command\nConfiguration Fields\nField Name\nDescription\nFile\nPath to the Node.js script or main file to execute.\nBase Folder\nThe folder where the script/project is located. Working Path\nOptional working directory path during execution.\nCommand\nNode.js command to execute the script (e.g.,\nnode index.js\n).\nOutput Directory\nFolder path to save execution output files.\nMax Execute Time Maximum time (in seconds) to allow script execution before timeout.\nRefresh Interval\nInterval (in seconds) to poll for execution status.\nSample Input\nNot applicable\n— input files are provided through the Files field.\nSample Configuration Field\nValue\nFile\nindex.js\nBase Folder\n/user-scripts/\nCommand\nnode index.js\nOutput Directory\n/output/\nMax Execute Time\n60\nRefresh Interval\n5\nSample Output\nCommandOutput\nHello World!'), 0.25)
[ 2025-08-10 11:42:38,042 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-10 11:42:38,043 ] test_main.py:75 root - INFO - [Record(id='3b0042a7-bf88-4e9c-bc13-af93ce17095c', payload={'url': 'https://infoveave-help.pages.dev/automation-v8/activities/execute-nodejs/', 'title': 'execute-nodejs', 'section': 'automation', 'terminologies': ['Automation', 'Data Transformation', 'Infoveave', 'Value', 'Workflows'], 'char_count': 1609, 'word_count': 239, 'page_content': 'activity allows you to run a custom Node.js script or application as part of a workflow. You can specify the script file, working directory, command, output location, and control execution timeout.\nUse this activity to: Run backend automation written in Node.js\nProcess data, files, or external API responses using custom JavaScript logic\nIntegrate with CLI tools or third-party Node packages\nUse Case\n: Useful when workflows require backend processing logic like JSON manipulation, calling APIs, or custom data transformation that is best handled using Node.js.\nInput\nType\nDescription\nFiles\nProject or script files required for execution\nOutput\nType\nFormat Description\nExecution Data\nTable\nOutput from the executed command\nConfiguration Fields\nField Name\nDescription\nFile\nPath to the Node.js script or main file to execute.\nBase Folder\nThe folder where the script/project is located. Working Path\nOptional working directory path during execution.\nCommand\nNode.js command to execute the script (e.g.,\nnode index.js\n).\nOutput Directory\nFolder path to save execution output files.\nMax Execute Time Maximum time (in seconds) to allow script execution before timeout.\nRefresh Interval\nInterval (in seconds) to poll for execution status.\nSample Input\nNot applicable\n— input files are provided through the Files field.\nSample Configuration Field\nValue\nFile\nindex.js\nBase Folder\n/user-scripts/\nCommand\nnode index.js\nOutput Directory\n/output/\nMax Execute Time\n60\nRefresh Interval\n5\nSample Output\nCommandOutput\nHello World!', 'chunk_index': 1}, vector=None, shard_key=None, order_value=None)]
[ 2025-08-10 11:42:38,043 ] test_main.py:76 root - INFO - Retrieved result for point ID: 3b0042a7-bf88-4e9c-bc13-af93ce17095c
[ 2025-08-10 11:42:38,043 ] test_main.py:141 root - INFO - Loaded rewritten query user prompt.
[ 2025-08-10 11:42:38,740 ] _client.py:1025 httpx - INFO - HTTP Request: POST https://api.groq.com/openai/v1/chat/completions "HTTP/1.1 200 OK"
[ 2025-08-10 11:42:38,742 ] test_main.py:289 root - INFO - Response for query part 1: The **Execute API** activity allows workflows to connect and communicate with any RESTful API by executing configurable HTTP requests such as GET, POST, PUT, or DELETE. 

You can find more information about the Execute API activity here: [https://infoveave-help.pages.dev/automation-v8/activities/execute-api/](https://infoveave-help.pages.dev/automation-v8/activities/execute-api/) 


This activity is highly flexible and supports integration with third-party systems, custom backends, public APIs, and all without requiring external tools.
[ 2025-08-10 11:42:38,743 ] test_main.py:292 root - INFO - [(Document(metadata={'_id': 'fa3a2b04-d657-4ab1-872e-c4300b408723', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='Execute API | Infoveave Help\nSkip to content\nExecute API\nDescription\nThe\nExecute API Activity\nenables workflows to connect and communicate with any RESTful API by executing configurable HTTP requests such as\nGET\n,\nPOST\n, PUT\n, or\nDELETE\n. It allows users to define the request structure including headers, query parameters, body content, pagination rules, response parsing, and authentication.\nThis activity is highly flexible and supports integration with\nthird-party systems'), 0.5), (Document(metadata={'_id': '86f0e3ce-235c-4f7a-8dc3-6c50480e3d01', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content=',\ncustom backends\n,\npublic APIs\n, and , all without requiring external tools.\nUse case\n:\nIn a logistics automation workflow, use this activity to call a courier tracking API like'), 0.33333334), (Document(metadata={'_id': '3b0042a7-bf88-4e9c-bc13-af93ce17095c', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='activity allows you to run a custom Node.js script or application as part of a workflow. You can specify the script file, working directory, command, output location, and control execution timeout.\nUse this activity to: Run backend automation written in Node.js\nProcess data, files, or external API responses using custom JavaScript logic\nIntegrate with CLI tools or third-party Node packages\nUse Case\n: Useful when workflows require backend processing logic like JSON manipulation, calling APIs, or custom data transformation that is best handled using Node.js.\nInput\nType\nDescription\nFiles\nProject or script files required for execution\nOutput\nType\nFormat Description\nExecution Data\nTable\nOutput from the executed command\nConfiguration Fields\nField Name\nDescription\nFile\nPath to the Node.js script or main file to execute.\nBase Folder\nThe folder where the script/project is located. Working Path\nOptional working directory path during execution.\nCommand\nNode.js command to execute the script (e.g.,\nnode index.js\n).\nOutput Directory\nFolder path to save execution output files.\nMax Execute Time Maximum time (in seconds) to allow script execution before timeout.\nRefresh Interval\nInterval (in seconds) to poll for execution status.\nSample Input\nNot applicable\n— input files are provided through the Files field.\nSample Configuration Field\nValue\nFile\nindex.js\nBase Folder\n/user-scripts/\nCommand\nnode index.js\nOutput Directory\n/output/\nMax Execute Time\n60\nRefresh Interval\n5\nSample Output\nCommandOutput\nHello World!'), 0.25)]
[ 2025-08-10 11:42:38,765 ] test_main.py:65 root - INFO - Building context with metadata from documents...
[ 2025-08-10 11:42:38,765 ] test_main.py:67 root - INFO - (Document(metadata={'_id': 'fa3a2b04-d657-4ab1-872e-c4300b408723', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='Execute API | Infoveave Help\nSkip to content\nExecute API\nDescription\nThe\nExecute API Activity\nenables workflows to connect and communicate with any RESTful API by executing configurable HTTP requests such as\nGET\n,\nPOST\n, PUT\n, or\nDELETE\n. It allows users to define the request structure including headers, query parameters, body content, pagination rules, response parsing, and authentication.\nThis activity is highly flexible and supports integration with\nthird-party systems'), 0.5)
[ 2025-08-10 11:42:38,825 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-10 11:42:38,826 ] test_main.py:75 root - INFO - [Record(id='fa3a2b04-d657-4ab1-872e-c4300b408723', payload={'url': 'https://infoveave-help.pages.dev/automation-v8/activities/execute-api/', 'title': 'execute-api', 'section': 'automation', 'terminologies': ['Automation', 'Infoveave', 'Query', 'Value', 'Variables', 'Workflows'], 'char_count': 4334, 'word_count': 636, 'page_content': 'Execute API | Infoveave Help\nSkip to content\nExecute API\nDescription\nThe\nExecute API Activity\nenables workflows to connect and communicate with any RESTful API by executing configurable HTTP requests such as\nGET\n,\nPOST\n, PUT\n, or\nDELETE\n. It allows users to define the request structure including headers, query parameters, body content, pagination rules, response parsing, and authentication.\nThis activity is highly flexible and supports integration with\nthird-party systems', 'chunk_index': 0}, vector=None, shard_key=None, order_value=None)]
[ 2025-08-10 11:42:38,826 ] test_main.py:76 root - INFO - Retrieved result for point ID: fa3a2b04-d657-4ab1-872e-c4300b408723
[ 2025-08-10 11:42:38,826 ] test_main.py:67 root - INFO - (Document(metadata={'_id': '86f0e3ce-235c-4f7a-8dc3-6c50480e3d01', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content=',\ncustom backends\n,\npublic APIs\n, and , all without requiring external tools.\nUse case\n:\nIn a logistics automation workflow, use this activity to call a courier tracking API like'), 0.33333334)
[ 2025-08-10 11:42:38,882 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-10 11:42:38,883 ] test_main.py:75 root - INFO - [Record(id='86f0e3ce-235c-4f7a-8dc3-6c50480e3d01', payload={'url': 'https://infoveave-help.pages.dev/automation-v8/activities/execute-api/', 'title': 'execute-api', 'section': 'automation', 'terminologies': ['Automation', 'Infoveave', 'Query', 'Value', 'Variables', 'Workflows'], 'char_count': 4334, 'word_count': 636, 'page_content': ',\ncustom backends\n,\npublic APIs\n, and , all without requiring external tools.\nUse case\n:\nIn a logistics automation workflow, use this activity to call a courier tracking API like', 'chunk_index': 1}, vector=None, shard_key=None, order_value=None)]
[ 2025-08-10 11:42:38,883 ] test_main.py:76 root - INFO - Retrieved result for point ID: 86f0e3ce-235c-4f7a-8dc3-6c50480e3d01
[ 2025-08-10 11:42:38,883 ] test_main.py:67 root - INFO - (Document(metadata={'_id': '3b0042a7-bf88-4e9c-bc13-af93ce17095c', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='activity allows you to run a custom Node.js script or application as part of a workflow. You can specify the script file, working directory, command, output location, and control execution timeout.\nUse this activity to: Run backend automation written in Node.js\nProcess data, files, or external API responses using custom JavaScript logic\nIntegrate with CLI tools or third-party Node packages\nUse Case\n: Useful when workflows require backend processing logic like JSON manipulation, calling APIs, or custom data transformation that is best handled using Node.js.\nInput\nType\nDescription\nFiles\nProject or script files required for execution\nOutput\nType\nFormat Description\nExecution Data\nTable\nOutput from the executed command\nConfiguration Fields\nField Name\nDescription\nFile\nPath to the Node.js script or main file to execute.\nBase Folder\nThe folder where the script/project is located. Working Path\nOptional working directory path during execution.\nCommand\nNode.js command to execute the script (e.g.,\nnode index.js\n).\nOutput Directory\nFolder path to save execution output files.\nMax Execute Time Maximum time (in seconds) to allow script execution before timeout.\nRefresh Interval\nInterval (in seconds) to poll for execution status.\nSample Input\nNot applicable\n— input files are provided through the Files field.\nSample Configuration Field\nValue\nFile\nindex.js\nBase Folder\n/user-scripts/\nCommand\nnode index.js\nOutput Directory\n/output/\nMax Execute Time\n60\nRefresh Interval\n5\nSample Output\nCommandOutput\nHello World!'), 0.25)
[ 2025-08-10 11:42:38,952 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-10 11:42:38,953 ] test_main.py:75 root - INFO - [Record(id='3b0042a7-bf88-4e9c-bc13-af93ce17095c', payload={'url': 'https://infoveave-help.pages.dev/automation-v8/activities/execute-nodejs/', 'title': 'execute-nodejs', 'section': 'automation', 'terminologies': ['Automation', 'Data Transformation', 'Infoveave', 'Value', 'Workflows'], 'char_count': 1609, 'word_count': 239, 'page_content': 'activity allows you to run a custom Node.js script or application as part of a workflow. You can specify the script file, working directory, command, output location, and control execution timeout.\nUse this activity to: Run backend automation written in Node.js\nProcess data, files, or external API responses using custom JavaScript logic\nIntegrate with CLI tools or third-party Node packages\nUse Case\n: Useful when workflows require backend processing logic like JSON manipulation, calling APIs, or custom data transformation that is best handled using Node.js.\nInput\nType\nDescription\nFiles\nProject or script files required for execution\nOutput\nType\nFormat Description\nExecution Data\nTable\nOutput from the executed command\nConfiguration Fields\nField Name\nDescription\nFile\nPath to the Node.js script or main file to execute.\nBase Folder\nThe folder where the script/project is located. Working Path\nOptional working directory path during execution.\nCommand\nNode.js command to execute the script (e.g.,\nnode index.js\n).\nOutput Directory\nFolder path to save execution output files.\nMax Execute Time Maximum time (in seconds) to allow script execution before timeout.\nRefresh Interval\nInterval (in seconds) to poll for execution status.\nSample Input\nNot applicable\n— input files are provided through the Files field.\nSample Configuration Field\nValue\nFile\nindex.js\nBase Folder\n/user-scripts/\nCommand\nnode index.js\nOutput Directory\n/output/\nMax Execute Time\n60\nRefresh Interval\n5\nSample Output\nCommandOutput\nHello World!', 'chunk_index': 1}, vector=None, shard_key=None, order_value=None)]
[ 2025-08-10 11:42:38,953 ] test_main.py:76 root - INFO - Retrieved result for point ID: 3b0042a7-bf88-4e9c-bc13-af93ce17095c
[ 2025-08-10 11:42:38,954 ] test_main.py:271 root - INFO - Rewritten Query 2: Add Datasource from File
[ 2025-08-10 11:42:39,542 ] test_main.py:274 root - INFO - Embedding generated for query 2.
[ 2025-08-10 11:42:40,627 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points/query "HTTP/1.1 200 OK"
[ 2025-08-10 11:42:40,629 ] test_main.py:286 root - INFO - Processing query part 2: Add Datasource from File
[ 2025-08-10 11:42:40,653 ] test_main.py:65 root - INFO - Building context with metadata from documents...
[ 2025-08-10 11:42:40,653 ] test_main.py:67 root - INFO - (Document(metadata={'_id': '681ecb7f-2282-438c-8098-86fc08e3a69e', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='To create a new Datasource, click on\nNew Datasource\n.\nChoose\nFixed length\nunder Files as the Datasource type.\nUpload the fixed length file from your local storage. Supported file formats include\n.csv and\n.txt\n.\nChoose the connection type for your Datasource. In this case, the connection type is set to default.\nAfter providing the necessary details, click on\nNext\nto configure the data content. Define the skip begin and skip end lines for the file as required.\nIf your data table has a title column, select the\nFirst line is header\ncheckbox to set the first line as the header. Define each column length in the fixed length file.\nRename the column title as required.\nYou can also manually set the start and end index for the column length.\nClick on the\nPreview\nbutton to preview the configured data table. Click on\nNext\nto configure the data table.\nProvide a name for your Datasource.\nTo add additional files to supplement your Datasource, click on the\nAdd files\noption.\nTo customize the\nTable name and choose the\nIngestion type\n, click on the\nEdit\nicon\nnext to the table name. Configure the following fields within this section.\nTable name\nSpecify the desired table name.\nIngestion type Choose from options such as\nIncremental\n,\nTruncate and Reload\n, or\nUpdate\nto define how new data is integrated into the existing dataset.\nDate column exists This checkbox identifies the date column in your dataset by default.\nAdd upload date\nIf you wish to include an upload date column, select this checkbox. It can be helpful for tracking when new data is added to the dataset.\nIncremental'), 0.5)
[ 2025-08-10 11:42:40,710 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-10 11:42:40,710 ] test_main.py:75 root - INFO - [Record(id='681ecb7f-2282-438c-8098-86fc08e3a69e', payload={'url': 'https://infoveave-help.pages.dev/studio-v8/datasources/fixed-length-files/', 'title': 'fixed-length-files', 'section': 'studio', 'terminologies': ['Calculated Columns', 'Calculated Measures', 'Datasources', 'Dimensions', 'Infoveave', 'Measures', 'View', 'View'], 'char_count': 4200, 'word_count': 699, 'page_content': 'To create a new Datasource, click on\nNew Datasource\n.\nChoose\nFixed length\nunder Files as the Datasource type.\nUpload the fixed length file from your local storage. Supported file formats include\n.csv and\n.txt\n.\nChoose the connection type for your Datasource. In this case, the connection type is set to default.\nAfter providing the necessary details, click on\nNext\nto configure the data content. Define the skip begin and skip end lines for the file as required.\nIf your data table has a title column, select the\nFirst line is header\ncheckbox to set the first line as the header. Define each column length in the fixed length file.\nRename the column title as required.\nYou can also manually set the start and end index for the column length.\nClick on the\nPreview\nbutton to preview the configured data table. Click on\nNext\nto configure the data table.\nProvide a name for your Datasource.\nTo add additional files to supplement your Datasource, click on the\nAdd files\noption.\nTo customize the\nTable name and choose the\nIngestion type\n, click on the\nEdit\nicon\nnext to the table name. Configure the following fields within this section.\nTable name\nSpecify the desired table name.\nIngestion type Choose from options such as\nIncremental\n,\nTruncate and Reload\n, or\nUpdate\nto define how new data is integrated into the existing dataset.\nDate column exists This checkbox identifies the date column in your dataset by default.\nAdd upload date\nIf you wish to include an upload date column, select this checkbox. It can be helpful for tracking when new data is added to the dataset.\nIncremental', 'chunk_index': 2}, vector=None, shard_key=None, order_value=None)]
[ 2025-08-10 11:42:40,710 ] test_main.py:76 root - INFO - Retrieved result for point ID: 681ecb7f-2282-438c-8098-86fc08e3a69e
[ 2025-08-10 11:42:40,710 ] test_main.py:67 root - INFO - (Document(metadata={'_id': '0e7c4a4e-6c35-46ad-9697-4ea4a4d9b128', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='.\nTo create a new Datasource, click on\nNew Datasource\n.\nChoose\nCustom file parser\nas the Datasource type.\nA new window opens for the Datasource creation process. Click on the option to select the file under\nCreate Datasource using file\nto upload the file.\nYou can select a file from your local storage. Supported file extensions are .txt, .prn, .dat, .dtf, .xlsx, .csv, .xls, .xlsm.\nAfter providing the necessary details, proceed to\nNext in the Datasource configuration.\nOnce the file upload is complete, a preview of the unstructured data becomes available.\nYou must create a custom\nparse code\nin either\n.txt or .json\nformat for an unstructured file\n.\nYou can click on\nImport template\nto import the formatting template from your storage location and convert the Datasource to a structured format.\nClick on\nPreview to see the conversion of the Datasource from an unstructured format to a structured format.\nClick on\nNext\nto configure the measures and dimensions in the Datasource. Once the file processing is complete, a tabular preview of the data becomes available.\nProvide a name for your Datasource.\nTo add additional files to supplement your Datasource, click on the\nAdd files\noption. To customize the\nTable name\nand choose the\nIngestion type\n, click on the\nEdit\nicon\nclose to the table name. Configure the following fields within this section.\nTable name\nSpecify the desired table name.'), 0.33333334)
[ 2025-08-10 11:42:40,770 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-10 11:42:40,771 ] test_main.py:75 root - INFO - [Record(id='0e7c4a4e-6c35-46ad-9697-4ea4a4d9b128', payload={'url': 'https://infoveave-help.pages.dev/studio-v8/datasources/custom-parser/', 'title': 'custom-parser', 'section': 'studio', 'terminologies': ['Calculated Columns', 'Calculated Measures', 'Datasources', 'Dimensions', 'Infoveave', 'Measures', 'View', 'View'], 'char_count': 4327, 'word_count': 711, 'page_content': '.\nTo create a new Datasource, click on\nNew Datasource\n.\nChoose\nCustom file parser\nas the Datasource type.\nA new window opens for the Datasource creation process. Click on the option to select the file under\nCreate Datasource using file\nto upload the file.\nYou can select a file from your local storage. Supported file extensions are .txt, .prn, .dat, .dtf, .xlsx, .csv, .xls, .xlsm.\nAfter providing the necessary details, proceed to\nNext in the Datasource configuration.\nOnce the file upload is complete, a preview of the unstructured data becomes available.\nYou must create a custom\nparse code\nin either\n.txt or .json\nformat for an unstructured file\n.\nYou can click on\nImport template\nto import the formatting template from your storage location and convert the Datasource to a structured format.\nClick on\nPreview to see the conversion of the Datasource from an unstructured format to a structured format.\nClick on\nNext\nto configure the measures and dimensions in the Datasource. Once the file processing is complete, a tabular preview of the data becomes available.\nProvide a name for your Datasource.\nTo add additional files to supplement your Datasource, click on the\nAdd files\noption. To customize the\nTable name\nand choose the\nIngestion type\n, click on the\nEdit\nicon\nclose to the table name. Configure the following fields within this section.\nTable name\nSpecify the desired table name.', 'chunk_index': 1}, vector=None, shard_key=None, order_value=None)]
[ 2025-08-10 11:42:40,772 ] test_main.py:76 root - INFO - Retrieved result for point ID: 0e7c4a4e-6c35-46ad-9697-4ea4a4d9b128
[ 2025-08-10 11:42:40,772 ] test_main.py:67 root - INFO - (Document(metadata={'_id': '4814be0c-1122-4406-93dc-c463750665d1', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='Infoveave supports adding file formats such as Excel, JSON, Delimited, Unstructured, Fixed Length files, and Multiple files as a Datasource in Infoveave.\nCreating a Datasource using a Fixed length file To access Infoveave Datasource types, navigate to\nStudio\nDatasources\n. All types of Datasources created by you or shared with you are displayed under\nMy Datasources\nand\nShared Datasources\n.'), 0.25)
[ 2025-08-10 11:42:40,848 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-10 11:42:40,849 ] test_main.py:75 root - INFO - [Record(id='4814be0c-1122-4406-93dc-c463750665d1', payload={'url': 'https://infoveave-help.pages.dev/studio-v8/datasources/fixed-length-files/', 'title': 'fixed-length-files', 'section': 'studio', 'terminologies': ['Calculated Columns', 'Calculated Measures', 'Datasources', 'Dimensions', 'Infoveave', 'Measures', 'View', 'View'], 'char_count': 4200, 'word_count': 699, 'page_content': 'Infoveave supports adding file formats such as Excel, JSON, Delimited, Unstructured, Fixed Length files, and Multiple files as a Datasource in Infoveave.\nCreating a Datasource using a Fixed length file To access Infoveave Datasource types, navigate to\nStudio\nDatasources\n. All types of Datasources created by you or shared with you are displayed under\nMy Datasources\nand\nShared Datasources\n.', 'chunk_index': 1}, vector=None, shard_key=None, order_value=None)]
[ 2025-08-10 11:42:40,849 ] test_main.py:76 root - INFO - Retrieved result for point ID: 4814be0c-1122-4406-93dc-c463750665d1
[ 2025-08-10 11:42:40,849 ] test_main.py:141 root - INFO - Loaded rewritten query user prompt.
[ 2025-08-10 11:42:41,757 ] _client.py:1025 httpx - INFO - HTTP Request: POST https://api.groq.com/openai/v1/chat/completions "HTTP/1.1 200 OK"
[ 2025-08-10 11:42:41,763 ] test_main.py:289 root - INFO - Response for query part 2: To add a Datasource from a file in Infoveave, follow these steps:

1. **Navigate to Studio > Datasources.** This will display all the Datasources you've created or been shared.

2. **Click on "New Datasource".** This will open a window to create a new Datasource.

3. **Choose the appropriate Datasource type.** Infoveave supports various file formats, including Excel, JSON, Delimited, Unstructured, Fixed Length files, and Multiple files. Select the type that matches your file.

4. **Upload your file.**  You'll be prompted to select the file from your local storage.

5. **Configure the Datasource.** Depending on the file type, you'll need to provide additional information, such as column names, data types, and delimiters.

6. **Preview and finalize.**  Review the preview of your Datasource to ensure it's correctly parsed. Make any necessary adjustments and click "Next" to finalize the creation process.


You can find more detailed instructions for specific file types in the Infoveave help documentation: [https://infoveave-help.pages.dev/studio-v8/datasources/](https://infoveave-help.pages.dev/studio-v8/datasources/)
[ 2025-08-10 11:42:41,763 ] test_main.py:292 root - INFO - [(Document(metadata={'_id': '681ecb7f-2282-438c-8098-86fc08e3a69e', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='To create a new Datasource, click on\nNew Datasource\n.\nChoose\nFixed length\nunder Files as the Datasource type.\nUpload the fixed length file from your local storage. Supported file formats include\n.csv and\n.txt\n.\nChoose the connection type for your Datasource. In this case, the connection type is set to default.\nAfter providing the necessary details, click on\nNext\nto configure the data content. Define the skip begin and skip end lines for the file as required.\nIf your data table has a title column, select the\nFirst line is header\ncheckbox to set the first line as the header. Define each column length in the fixed length file.\nRename the column title as required.\nYou can also manually set the start and end index for the column length.\nClick on the\nPreview\nbutton to preview the configured data table. Click on\nNext\nto configure the data table.\nProvide a name for your Datasource.\nTo add additional files to supplement your Datasource, click on the\nAdd files\noption.\nTo customize the\nTable name and choose the\nIngestion type\n, click on the\nEdit\nicon\nnext to the table name. Configure the following fields within this section.\nTable name\nSpecify the desired table name.\nIngestion type Choose from options such as\nIncremental\n,\nTruncate and Reload\n, or\nUpdate\nto define how new data is integrated into the existing dataset.\nDate column exists This checkbox identifies the date column in your dataset by default.\nAdd upload date\nIf you wish to include an upload date column, select this checkbox. It can be helpful for tracking when new data is added to the dataset.\nIncremental'), 0.5), (Document(metadata={'_id': '0e7c4a4e-6c35-46ad-9697-4ea4a4d9b128', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='.\nTo create a new Datasource, click on\nNew Datasource\n.\nChoose\nCustom file parser\nas the Datasource type.\nA new window opens for the Datasource creation process. Click on the option to select the file under\nCreate Datasource using file\nto upload the file.\nYou can select a file from your local storage. Supported file extensions are .txt, .prn, .dat, .dtf, .xlsx, .csv, .xls, .xlsm.\nAfter providing the necessary details, proceed to\nNext in the Datasource configuration.\nOnce the file upload is complete, a preview of the unstructured data becomes available.\nYou must create a custom\nparse code\nin either\n.txt or .json\nformat for an unstructured file\n.\nYou can click on\nImport template\nto import the formatting template from your storage location and convert the Datasource to a structured format.\nClick on\nPreview to see the conversion of the Datasource from an unstructured format to a structured format.\nClick on\nNext\nto configure the measures and dimensions in the Datasource. Once the file processing is complete, a tabular preview of the data becomes available.\nProvide a name for your Datasource.\nTo add additional files to supplement your Datasource, click on the\nAdd files\noption. To customize the\nTable name\nand choose the\nIngestion type\n, click on the\nEdit\nicon\nclose to the table name. Configure the following fields within this section.\nTable name\nSpecify the desired table name.'), 0.33333334), (Document(metadata={'_id': '4814be0c-1122-4406-93dc-c463750665d1', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='Infoveave supports adding file formats such as Excel, JSON, Delimited, Unstructured, Fixed Length files, and Multiple files as a Datasource in Infoveave.\nCreating a Datasource using a Fixed length file To access Infoveave Datasource types, navigate to\nStudio\nDatasources\n. All types of Datasources created by you or shared with you are displayed under\nMy Datasources\nand\nShared Datasources\n.'), 0.25)]
[ 2025-08-10 11:42:41,787 ] test_main.py:65 root - INFO - Building context with metadata from documents...
[ 2025-08-10 11:42:41,787 ] test_main.py:67 root - INFO - (Document(metadata={'_id': '681ecb7f-2282-438c-8098-86fc08e3a69e', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='To create a new Datasource, click on\nNew Datasource\n.\nChoose\nFixed length\nunder Files as the Datasource type.\nUpload the fixed length file from your local storage. Supported file formats include\n.csv and\n.txt\n.\nChoose the connection type for your Datasource. In this case, the connection type is set to default.\nAfter providing the necessary details, click on\nNext\nto configure the data content. Define the skip begin and skip end lines for the file as required.\nIf your data table has a title column, select the\nFirst line is header\ncheckbox to set the first line as the header. Define each column length in the fixed length file.\nRename the column title as required.\nYou can also manually set the start and end index for the column length.\nClick on the\nPreview\nbutton to preview the configured data table. Click on\nNext\nto configure the data table.\nProvide a name for your Datasource.\nTo add additional files to supplement your Datasource, click on the\nAdd files\noption.\nTo customize the\nTable name and choose the\nIngestion type\n, click on the\nEdit\nicon\nnext to the table name. Configure the following fields within this section.\nTable name\nSpecify the desired table name.\nIngestion type Choose from options such as\nIncremental\n,\nTruncate and Reload\n, or\nUpdate\nto define how new data is integrated into the existing dataset.\nDate column exists This checkbox identifies the date column in your dataset by default.\nAdd upload date\nIf you wish to include an upload date column, select this checkbox. It can be helpful for tracking when new data is added to the dataset.\nIncremental'), 0.5)
[ 2025-08-10 11:42:41,845 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-10 11:42:41,889 ] test_main.py:75 root - INFO - [Record(id='681ecb7f-2282-438c-8098-86fc08e3a69e', payload={'url': 'https://infoveave-help.pages.dev/studio-v8/datasources/fixed-length-files/', 'title': 'fixed-length-files', 'section': 'studio', 'terminologies': ['Calculated Columns', 'Calculated Measures', 'Datasources', 'Dimensions', 'Infoveave', 'Measures', 'View', 'View'], 'char_count': 4200, 'word_count': 699, 'page_content': 'To create a new Datasource, click on\nNew Datasource\n.\nChoose\nFixed length\nunder Files as the Datasource type.\nUpload the fixed length file from your local storage. Supported file formats include\n.csv and\n.txt\n.\nChoose the connection type for your Datasource. In this case, the connection type is set to default.\nAfter providing the necessary details, click on\nNext\nto configure the data content. Define the skip begin and skip end lines for the file as required.\nIf your data table has a title column, select the\nFirst line is header\ncheckbox to set the first line as the header. Define each column length in the fixed length file.\nRename the column title as required.\nYou can also manually set the start and end index for the column length.\nClick on the\nPreview\nbutton to preview the configured data table. Click on\nNext\nto configure the data table.\nProvide a name for your Datasource.\nTo add additional files to supplement your Datasource, click on the\nAdd files\noption.\nTo customize the\nTable name and choose the\nIngestion type\n, click on the\nEdit\nicon\nnext to the table name. Configure the following fields within this section.\nTable name\nSpecify the desired table name.\nIngestion type Choose from options such as\nIncremental\n,\nTruncate and Reload\n, or\nUpdate\nto define how new data is integrated into the existing dataset.\nDate column exists This checkbox identifies the date column in your dataset by default.\nAdd upload date\nIf you wish to include an upload date column, select this checkbox. It can be helpful for tracking when new data is added to the dataset.\nIncremental', 'chunk_index': 2}, vector=None, shard_key=None, order_value=None)]
[ 2025-08-10 11:42:41,889 ] test_main.py:76 root - INFO - Retrieved result for point ID: 681ecb7f-2282-438c-8098-86fc08e3a69e
[ 2025-08-10 11:42:41,890 ] test_main.py:67 root - INFO - (Document(metadata={'_id': '0e7c4a4e-6c35-46ad-9697-4ea4a4d9b128', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='.\nTo create a new Datasource, click on\nNew Datasource\n.\nChoose\nCustom file parser\nas the Datasource type.\nA new window opens for the Datasource creation process. Click on the option to select the file under\nCreate Datasource using file\nto upload the file.\nYou can select a file from your local storage. Supported file extensions are .txt, .prn, .dat, .dtf, .xlsx, .csv, .xls, .xlsm.\nAfter providing the necessary details, proceed to\nNext in the Datasource configuration.\nOnce the file upload is complete, a preview of the unstructured data becomes available.\nYou must create a custom\nparse code\nin either\n.txt or .json\nformat for an unstructured file\n.\nYou can click on\nImport template\nto import the formatting template from your storage location and convert the Datasource to a structured format.\nClick on\nPreview to see the conversion of the Datasource from an unstructured format to a structured format.\nClick on\nNext\nto configure the measures and dimensions in the Datasource. Once the file processing is complete, a tabular preview of the data becomes available.\nProvide a name for your Datasource.\nTo add additional files to supplement your Datasource, click on the\nAdd files\noption. To customize the\nTable name\nand choose the\nIngestion type\n, click on the\nEdit\nicon\nclose to the table name. Configure the following fields within this section.\nTable name\nSpecify the desired table name.'), 0.33333334)
[ 2025-08-10 11:42:41,964 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-10 11:42:41,965 ] test_main.py:75 root - INFO - [Record(id='0e7c4a4e-6c35-46ad-9697-4ea4a4d9b128', payload={'url': 'https://infoveave-help.pages.dev/studio-v8/datasources/custom-parser/', 'title': 'custom-parser', 'section': 'studio', 'terminologies': ['Calculated Columns', 'Calculated Measures', 'Datasources', 'Dimensions', 'Infoveave', 'Measures', 'View', 'View'], 'char_count': 4327, 'word_count': 711, 'page_content': '.\nTo create a new Datasource, click on\nNew Datasource\n.\nChoose\nCustom file parser\nas the Datasource type.\nA new window opens for the Datasource creation process. Click on the option to select the file under\nCreate Datasource using file\nto upload the file.\nYou can select a file from your local storage. Supported file extensions are .txt, .prn, .dat, .dtf, .xlsx, .csv, .xls, .xlsm.\nAfter providing the necessary details, proceed to\nNext in the Datasource configuration.\nOnce the file upload is complete, a preview of the unstructured data becomes available.\nYou must create a custom\nparse code\nin either\n.txt or .json\nformat for an unstructured file\n.\nYou can click on\nImport template\nto import the formatting template from your storage location and convert the Datasource to a structured format.\nClick on\nPreview to see the conversion of the Datasource from an unstructured format to a structured format.\nClick on\nNext\nto configure the measures and dimensions in the Datasource. Once the file processing is complete, a tabular preview of the data becomes available.\nProvide a name for your Datasource.\nTo add additional files to supplement your Datasource, click on the\nAdd files\noption. To customize the\nTable name\nand choose the\nIngestion type\n, click on the\nEdit\nicon\nclose to the table name. Configure the following fields within this section.\nTable name\nSpecify the desired table name.', 'chunk_index': 1}, vector=None, shard_key=None, order_value=None)]
[ 2025-08-10 11:42:41,965 ] test_main.py:76 root - INFO - Retrieved result for point ID: 0e7c4a4e-6c35-46ad-9697-4ea4a4d9b128
[ 2025-08-10 11:42:41,966 ] test_main.py:67 root - INFO - (Document(metadata={'_id': '4814be0c-1122-4406-93dc-c463750665d1', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='Infoveave supports adding file formats such as Excel, JSON, Delimited, Unstructured, Fixed Length files, and Multiple files as a Datasource in Infoveave.\nCreating a Datasource using a Fixed length file To access Infoveave Datasource types, navigate to\nStudio\nDatasources\n. All types of Datasources created by you or shared with you are displayed under\nMy Datasources\nand\nShared Datasources\n.'), 0.25)
[ 2025-08-10 11:42:42,033 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-10 11:42:42,033 ] test_main.py:75 root - INFO - [Record(id='4814be0c-1122-4406-93dc-c463750665d1', payload={'url': 'https://infoveave-help.pages.dev/studio-v8/datasources/fixed-length-files/', 'title': 'fixed-length-files', 'section': 'studio', 'terminologies': ['Calculated Columns', 'Calculated Measures', 'Datasources', 'Dimensions', 'Infoveave', 'Measures', 'View', 'View'], 'char_count': 4200, 'word_count': 699, 'page_content': 'Infoveave supports adding file formats such as Excel, JSON, Delimited, Unstructured, Fixed Length files, and Multiple files as a Datasource in Infoveave.\nCreating a Datasource using a Fixed length file To access Infoveave Datasource types, navigate to\nStudio\nDatasources\n. All types of Datasources created by you or shared with you are displayed under\nMy Datasources\nand\nShared Datasources\n.', 'chunk_index': 1}, vector=None, shard_key=None, order_value=None)]
[ 2025-08-10 11:42:42,034 ] test_main.py:76 root - INFO - Retrieved result for point ID: 4814be0c-1122-4406-93dc-c463750665d1
[ 2025-08-10 11:42:42,034 ] test_main.py:271 root - INFO - Rewritten Query 3: Add Calculated Column
[ 2025-08-10 11:42:42,614 ] test_main.py:274 root - INFO - Embedding generated for query 3.
[ 2025-08-10 11:42:44,255 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points/query "HTTP/1.1 200 OK"
[ 2025-08-10 11:42:44,257 ] test_main.py:286 root - INFO - Processing query part 3: Add Calculated Column
[ 2025-08-10 11:42:44,279 ] test_main.py:65 root - INFO - Building context with metadata from documents...
[ 2025-08-10 11:42:44,279 ] test_main.py:67 root - INFO - (Document(metadata={'_id': '17c3977a-37bb-411f-867c-39d844d8decd', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='To learn how to add calculated columns in Infoveave, visit the section\nCalculated Columns\n.'), 0.5)
[ 2025-08-10 11:42:44,353 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-10 11:42:44,357 ] test_main.py:75 root - INFO - [Record(id='17c3977a-37bb-411f-867c-39d844d8decd', payload={'url': 'https://infoveave-help.pages.dev/insights-v8/configure-expression/trim/', 'title': 'trim', 'section': 'insights', 'terminologies': ['Calculated Columns', 'Expression', 'Infoveave', 'Value'], 'char_count': 1087, 'word_count': 171, 'page_content': 'To learn how to add calculated columns in Infoveave, visit the section\nCalculated Columns\n.', 'chunk_index': 1}, vector=None, shard_key=None, order_value=None)]
[ 2025-08-10 11:42:44,357 ] test_main.py:76 root - INFO - Retrieved result for point ID: 17c3977a-37bb-411f-867c-39d844d8decd
[ 2025-08-10 11:42:44,357 ] test_main.py:67 root - INFO - (Document(metadata={'_id': '90a41eca-7d26-4774-af4f-59db807255a3', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='To learn how to add calculated columns in Infoveave, visit the section\nCalculated Columns\n.'), 0.33333334)
[ 2025-08-10 11:42:44,434 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-10 11:42:44,435 ] test_main.py:75 root - INFO - [Record(id='90a41eca-7d26-4774-af4f-59db807255a3', payload={'url': 'https://infoveave-help.pages.dev/insights-v8/configure-expression/firstnonblank/', 'title': 'firstnonblank', 'section': 'insights', 'terminologies': ['Calculated Columns', 'Data Visualization', 'Expression', 'Infoveave', 'Value'], 'char_count': 1737, 'word_count': 247, 'page_content': 'To learn how to add calculated columns in Infoveave, visit the section\nCalculated Columns\n.', 'chunk_index': 2}, vector=None, shard_key=None, order_value=None)]
[ 2025-08-10 11:42:44,435 ] test_main.py:76 root - INFO - Retrieved result for point ID: 90a41eca-7d26-4774-af4f-59db807255a3
[ 2025-08-10 11:42:44,435 ] test_main.py:67 root - INFO - (Document(metadata={'_id': '6e08a086-23dc-490a-964e-432dfae3d8aa', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='To learn how to add calculated columns in Infoveave, visit the section\nCalculated Columns\n.'), 0.25)
[ 2025-08-10 11:42:44,490 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-10 11:42:44,491 ] test_main.py:75 root - INFO - [Record(id='6e08a086-23dc-490a-964e-432dfae3d8aa', payload={'url': 'https://infoveave-help.pages.dev/insights-v8/configure-expression/lower/', 'title': 'lower', 'section': 'insights', 'terminologies': ['Calculated Columns', 'Expression', 'Infoveave', 'Value'], 'char_count': 1087, 'word_count': 171, 'page_content': 'To learn how to add calculated columns in Infoveave, visit the section\nCalculated Columns\n.', 'chunk_index': 1}, vector=None, shard_key=None, order_value=None)]
[ 2025-08-10 11:42:44,491 ] test_main.py:76 root - INFO - Retrieved result for point ID: 6e08a086-23dc-490a-964e-432dfae3d8aa
[ 2025-08-10 11:42:44,491 ] test_main.py:141 root - INFO - Loaded rewritten query user prompt.
[ 2025-08-10 11:42:45,070 ] _client.py:1025 httpx - INFO - HTTP Request: POST https://api.groq.com/openai/v1/chat/completions "HTTP/1.1 200 OK"
[ 2025-08-10 11:42:45,073 ] test_main.py:289 root - INFO - Response for query part 3: To learn how to add calculated columns in Infoveave, visit the section: 

[Calculated Columns](https://infoveave-help.pages.dev/insights-v8/configure-expression/)
[ 2025-08-10 11:42:45,073 ] test_main.py:292 root - INFO - [(Document(metadata={'_id': '17c3977a-37bb-411f-867c-39d844d8decd', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='To learn how to add calculated columns in Infoveave, visit the section\nCalculated Columns\n.'), 0.5), (Document(metadata={'_id': '90a41eca-7d26-4774-af4f-59db807255a3', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='To learn how to add calculated columns in Infoveave, visit the section\nCalculated Columns\n.'), 0.33333334), (Document(metadata={'_id': '6e08a086-23dc-490a-964e-432dfae3d8aa', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='To learn how to add calculated columns in Infoveave, visit the section\nCalculated Columns\n.'), 0.25)]
[ 2025-08-10 11:42:45,099 ] test_main.py:65 root - INFO - Building context with metadata from documents...
[ 2025-08-10 11:42:45,099 ] test_main.py:67 root - INFO - (Document(metadata={'_id': '17c3977a-37bb-411f-867c-39d844d8decd', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='To learn how to add calculated columns in Infoveave, visit the section\nCalculated Columns\n.'), 0.5)
[ 2025-08-10 11:42:45,163 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-10 11:42:45,164 ] test_main.py:75 root - INFO - [Record(id='17c3977a-37bb-411f-867c-39d844d8decd', payload={'url': 'https://infoveave-help.pages.dev/insights-v8/configure-expression/trim/', 'title': 'trim', 'section': 'insights', 'terminologies': ['Calculated Columns', 'Expression', 'Infoveave', 'Value'], 'char_count': 1087, 'word_count': 171, 'page_content': 'To learn how to add calculated columns in Infoveave, visit the section\nCalculated Columns\n.', 'chunk_index': 1}, vector=None, shard_key=None, order_value=None)]
[ 2025-08-10 11:42:45,164 ] test_main.py:76 root - INFO - Retrieved result for point ID: 17c3977a-37bb-411f-867c-39d844d8decd
[ 2025-08-10 11:42:45,164 ] test_main.py:67 root - INFO - (Document(metadata={'_id': '90a41eca-7d26-4774-af4f-59db807255a3', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='To learn how to add calculated columns in Infoveave, visit the section\nCalculated Columns\n.'), 0.33333334)
[ 2025-08-10 11:42:45,233 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-10 11:42:45,234 ] test_main.py:75 root - INFO - [Record(id='90a41eca-7d26-4774-af4f-59db807255a3', payload={'url': 'https://infoveave-help.pages.dev/insights-v8/configure-expression/firstnonblank/', 'title': 'firstnonblank', 'section': 'insights', 'terminologies': ['Calculated Columns', 'Data Visualization', 'Expression', 'Infoveave', 'Value'], 'char_count': 1737, 'word_count': 247, 'page_content': 'To learn how to add calculated columns in Infoveave, visit the section\nCalculated Columns\n.', 'chunk_index': 2}, vector=None, shard_key=None, order_value=None)]
[ 2025-08-10 11:42:45,234 ] test_main.py:76 root - INFO - Retrieved result for point ID: 90a41eca-7d26-4774-af4f-59db807255a3
[ 2025-08-10 11:42:45,234 ] test_main.py:67 root - INFO - (Document(metadata={'_id': '6e08a086-23dc-490a-964e-432dfae3d8aa', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='To learn how to add calculated columns in Infoveave, visit the section\nCalculated Columns\n.'), 0.25)
[ 2025-08-10 11:42:45,296 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-10 11:42:45,298 ] test_main.py:75 root - INFO - [Record(id='6e08a086-23dc-490a-964e-432dfae3d8aa', payload={'url': 'https://infoveave-help.pages.dev/insights-v8/configure-expression/lower/', 'title': 'lower', 'section': 'insights', 'terminologies': ['Calculated Columns', 'Expression', 'Infoveave', 'Value'], 'char_count': 1087, 'word_count': 171, 'page_content': 'To learn how to add calculated columns in Infoveave, visit the section\nCalculated Columns\n.', 'chunk_index': 1}, vector=None, shard_key=None, order_value=None)]
[ 2025-08-10 11:42:45,298 ] test_main.py:76 root - INFO - Retrieved result for point ID: 6e08a086-23dc-490a-964e-432dfae3d8aa
[ 2025-08-10 11:42:45,298 ] test_main.py:328 root - INFO - Found 3 final documents.
[ 2025-08-10 11:42:45,298 ] test_main.py:375 root - INFO - Context prepared for LLM response.
[ 2025-08-10 11:42:45,321 ] test_main.py:403 root - INFO - Generating final answer using LLM...
[ 2025-08-10 11:42:47,373 ] _client.py:1025 httpx - INFO - HTTP Request: POST https://api.groq.com/openai/v1/chat/completions "HTTP/1.1 200 OK"
[ 2025-08-10 11:42:47,377 ] test_main.py:405 root - INFO - Final LLM Response:

[ 2025-08-10 11:42:47,377 ] test_main.py:406 root - INFO - Let's break down how to create a workflow in Infoveave that uses the "Execute API" activity to fetch data and then performs calculations on it.

**1. Execute API Activity:**

The "Execute API" activity is your gateway to interacting with external systems and APIs.  Here's how it works:

* **Connecting to APIs:**  Infoveave allows you to connect to any RESTful API. This means you can pull data from a wide range of sources, such as weather services, financial data providers, or even your own custom backend systems.

* **HTTP Request Types:** You can use various HTTP methods (GET, POST, PUT, DELETE) to interact with the API.  

    * **GET:**  Used to retrieve data from a specified resource.
    * **POST:** Used to send data to a server to create or update a resource.
    * **PUT:** Used to update an existing resource on the server.
    * **DELETE:** Used to remove a resource from the server.

* **Configuration:**  You'll need to provide the API endpoint URL, any required authentication details (API keys, tokens), and specify the HTTP method and request body (if applicable).

* **Response Handling:** The "Execute API" activity returns the API's response. You can then use this response data in subsequent steps of your workflow.

**Example:**

Let's say you want to fetch the current weather conditions for London from a weather API.

1. **API Endpoint:** You'd find the appropriate API endpoint URL for weather data (e.g., `https://api.example.com/weather/london`).
2. **Authentication:**  If the API requires authentication, you'd provide your API key or token.
3. **HTTP Method:** You'd use a GET request to retrieve the weather data.
4. **Response:** The API would return a JSON response containing weather information.

**2. Add Datasource from File:**

Once you have the API response, you'll want to store it as a Datasource in Infoveave. This will allow you to easily access and manipulate the data within your workflow.

* **Navigate to Studio > Datasources:** This will take you to the Datasource management page.
* **Click on "New Datasource":** This will open a window where you can create a new Datasource.
* **Choose "From File":** Select this option as you'll be importing data from the API response.
* **Upload Your Data:**  You can either directly paste the API response JSON into the upload field or upload a file containing the data.
* **Configure Datasource:**  Infoveave will automatically detect the data format (likely JSON) and guide you through setting column names, data types, and other necessary configurations.

**3. Add Calculated Column:**

Now that your API data is in a Datasource, you can create calculated columns to perform your desired calculations.

* **Navigate to the Datasource:**  Go to the Datasource you just created.
* **Click on "Add Column":** This will open a window to add a new column.
* **Choose "Calculated":** Select this option to create a column based on existing data.
* **Define the Calculation:**  Use Infoveave's expression builder to write a formula that performs the calculation you need. You can use functions, operators, and references to existing columns in your formula.

**Example:**

Let's say the API response includes temperature in Celsius. You want to create a new column that shows the temperature in Fahrenheit.

1. **Formula:** `(TemperatureCelsius * 9/5) + 32`

**Important Notes:**

* **Data Types:**  Pay attention to the data types of your columns. Make sure your calculations are compatible with the data types involved.
* **Error Handling:**  Consider adding error handling to your workflow to gracefully handle unexpected API responses or calculation errors.




[ 2025-08-10 11:42:47,379 ] test_main.py:413 root - INFO - LLM response saved to ./data/results/infoverve_helper_response.md
[ 2025-08-10 22:39:31,732 ] test_main.py:194 root - INFO - .........................Starting Infoverve Helper Application.........................
[ 2025-08-10 22:39:31,734 ] test_main.py:202 root - INFO - GOOGLE_API_KEY loaded into session.
[ 2025-08-10 22:39:31,734 ] test_main.py:210 root - INFO - GROQ_API_KEY loaded.
[ 2025-08-10 22:40:33,988 ] test_main.py:194 root - INFO - .........................Starting Infoverve Helper Application.........................
[ 2025-08-10 22:40:33,989 ] test_main.py:210 root - INFO - GROQ_API_KEY loaded.
[ 2025-08-10 22:40:34,063 ] test_main.py:234 root - INFO - Embedding model initialized.
[ 2025-08-10 22:40:34,397 ] _client.py:1025 httpx - INFO - HTTP Request: GET http://ai.infoveave.cloud:6333 "HTTP/1.1 200 OK"
[ 2025-08-10 22:40:34,400 ] test_main.py:238 root - INFO - Connected to Qdrant.
[ 2025-08-10 22:40:34,532 ] _client.py:1025 httpx - INFO - HTTP Request: GET http://ai.infoveave.cloud:6333/collections "HTTP/1.1 200 OK"
[ 2025-08-10 22:40:34,543 ] test_main.py:242 root - INFO - Qdrant collections retrieved.
[ 2025-08-10 22:40:34,543 ] test_main.py:249 root - INFO - Using collection: infoverve_helper_docs_hybrid
[ 2025-08-10 22:40:36,238 ] test_main.py:252 root - INFO - Sparse embeddings initialized.
[ 2025-08-10 22:40:36,330 ] _client.py:1025 httpx - INFO - HTTP Request: GET http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid "HTTP/1.1 200 OK"
[ 2025-08-10 22:40:37,183 ] _client.py:1025 httpx - INFO - HTTP Request: GET http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid "HTTP/1.1 200 OK"
[ 2025-08-10 22:40:37,185 ] test_main.py:264 root - INFO - QdrantVectorStore initialized.
[ 2025-08-10 22:40:37,273 ] test_main.py:270 root - INFO - LLM initialized.
[ 2025-08-10 22:40:38,706 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points/query "HTTP/1.1 200 OK"
[ 2025-08-10 22:40:39,253 ] test_main.py:292 root - INFO - Original query embedding generated.
[ 2025-08-10 22:40:39,273 ] test_main.py:71 root - INFO - Building context with metadata from documents...
[ 2025-08-10 22:40:39,273 ] test_main.py:73 root - INFO - (Document(metadata={'_id': '2a6c9297-ff5a-4139-bb0d-e87f53ace134', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content="Upload transformed file to destination database\nSetup the 'Oracle' connection, specify tables, and map columns\nSetup automated workflow summary notification\nEnable 'Send Workflow Summary' for email notifications on automated workflow execution\nSchedule and monitor  workflows Schedule or setup 'Webhooks' and 'Emails' to trigger workflows\nDone"), 0.5)
[ 2025-08-10 22:40:39,336 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-10 22:40:39,339 ] test_main.py:81 root - INFO - [Record(id='2a6c9297-ff5a-4139-bb0d-e87f53ace134', payload={'url': 'https://infoveave-help.pages.dev/journey/automate-workflows/', 'title': 'automate-workflows', 'section': 'automation', 'terminologies': ['Connections', 'Data Transformation', 'Infoveave', 'Workflows'], 'char_count': 978, 'word_count': 139, 'page_content': "Upload transformed file to destination database\nSetup the 'Oracle' connection, specify tables, and map columns\nSetup automated workflow summary notification\nEnable 'Send Workflow Summary' for email notifications on automated workflow execution\nSchedule and monitor  workflows Schedule or setup 'Webhooks' and 'Emails' to trigger workflows\nDone", 'chunk_index': 2}, vector=None, shard_key=None, order_value=None)]
[ 2025-08-10 22:40:39,339 ] test_main.py:82 root - INFO - Retrieved result for point ID: 2a6c9297-ff5a-4139-bb0d-e87f53ace134
[ 2025-08-10 22:40:39,339 ] test_main.py:73 root - INFO - (Document(metadata={'_id': 'df9d15c4-2094-450f-95e6-162e03d5828a', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='Creating Infoboard Using A Query\nCreate Infoboard Using A Query\nCreating Infoboard Using API\nCreate Infoboard Using API\nCreating Workflow in Infoveave\nCreating Workflows\nWorkflow Execution Status\nWorkflow Execution Status'), 0.33333334)
[ 2025-08-10 22:40:39,408 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-10 22:40:39,409 ] test_main.py:81 root - INFO - [Record(id='df9d15c4-2094-450f-95e6-162e03d5828a', payload={'url': 'https://infoveave-help.pages.dev/videos/', 'title': 'videos', 'section': 'videos', 'terminologies': ['Automation', 'Catalogues', 'Conditional Expressions', 'Custom Calendar', 'Datasources', 'Dimensions', 'Infoboards', 'Infoveave', 'Insights', 'Lists', 'Measures', 'My Organization', 'My Workspace', 'Query', 'Reports', 'SciPyR', 'What-If Analysis', 'What-If Formulae', 'Workflows', 'Workflow Execution Status'], 'char_count': 2430, 'word_count': 338, 'page_content': 'Creating Infoboard Using A Query\nCreate Infoboard Using A Query\nCreating Infoboard Using API\nCreate Infoboard Using API\nCreating Workflow in Infoveave\nCreating Workflows\nWorkflow Execution Status\nWorkflow Execution Status', 'chunk_index': 3}, vector=None, shard_key=None, order_value=None)]
[ 2025-08-10 22:40:39,409 ] test_main.py:82 root - INFO - Retrieved result for point ID: df9d15c4-2094-450f-95e6-162e03d5828a
[ 2025-08-10 22:40:39,409 ] test_main.py:73 root - INFO - (Document(metadata={'_id': '323c1ea3-b288-44b0-8825-475a23907e9f', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='Workflow Designer\ncanvas.\nTo add alerts that send email notifications during the workflow, go to the\nAlerts\ntab in the\nWorkflow Setup panel\n.\nToggle\nEnable\nto turn the alert on or off. Select recipient email addresses from the user list. You can choose multiple recipients.\nWrite a custom alert message that is sent when the condition is met.\nWhen setting an execution time alert, toggle\nUse Absolute Time'), 0.25)
[ 2025-08-10 22:40:39,484 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-10 22:40:39,486 ] test_main.py:81 root - INFO - [Record(id='323c1ea3-b288-44b0-8825-475a23907e9f', payload={'url': 'https://infoveave-help.pages.dev/automation-v8/jobs-v8/create-new-job/', 'title': 'create-new-job', 'section': 'automation', 'terminologies': ['Alerts', 'Automation', 'Infoveave', 'Measures', 'Query', 'Query Report', 'Value', 'Variables', 'View', 'View', 'Workflows'], 'char_count': 4476, 'word_count': 722, 'page_content': 'Workflow Designer\ncanvas.\nTo add alerts that send email notifications during the workflow, go to the\nAlerts\ntab in the\nWorkflow Setup panel\n.\nToggle\nEnable\nto turn the alert on or off. Select recipient email addresses from the user list. You can choose multiple recipients.\nWrite a custom alert message that is sent when the condition is met.\nWhen setting an execution time alert, toggle\nUse Absolute Time', 'chunk_index': 4}, vector=None, shard_key=None, order_value=None)]
[ 2025-08-10 22:40:39,487 ] test_main.py:82 root - INFO - Retrieved result for point ID: 323c1ea3-b288-44b0-8825-475a23907e9f
[ 2025-08-10 22:40:39,488 ] test_main.py:73 root - INFO - (Document(metadata={'_id': '65e3aa33-13d7-4688-98fd-7b6a24cbf91e', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='Workflow Designer\ncanvas.\nTo add alerts that send email notifications during the workflow, go to the\nAlerts\ntab in the\nWorkflow Setup panel\n.\nToggle\nEnable\nto turn the alert on or off. Select recipient email addresses from the user list. You can choose multiple recipients.\nWrite a custom alert message that is sent when the condition is met.\nWhen setting an execution time alert, toggle\nUse Absolute Time'), 0.2)
[ 2025-08-10 22:40:39,546 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-10 22:40:39,547 ] test_main.py:81 root - INFO - [Record(id='65e3aa33-13d7-4688-98fd-7b6a24cbf91e', payload={'url': 'https://infoveave-help.pages.dev/automation-v8/workflows/define-workflow/', 'title': 'define-workflow', 'section': 'automation', 'terminologies': ['Alerts', 'Automation', 'Infoveave', 'Measures', 'Query', 'Query Report', 'Value', 'Variables', 'View', 'View', 'Workflows'], 'char_count': 4476, 'word_count': 722, 'page_content': 'Workflow Designer\ncanvas.\nTo add alerts that send email notifications during the workflow, go to the\nAlerts\ntab in the\nWorkflow Setup panel\n.\nToggle\nEnable\nto turn the alert on or off. Select recipient email addresses from the user list. You can choose multiple recipients.\nWrite a custom alert message that is sent when the condition is met.\nWhen setting an execution time alert, toggle\nUse Absolute Time', 'chunk_index': 4}, vector=None, shard_key=None, order_value=None)]
[ 2025-08-10 22:40:39,547 ] test_main.py:82 root - INFO - Retrieved result for point ID: 65e3aa33-13d7-4688-98fd-7b6a24cbf91e
[ 2025-08-10 22:40:39,547 ] test_main.py:73 root - INFO - (Document(metadata={'_id': '2027003d-7c4e-4b6d-acd3-b391a775ae9a', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='Workflow Alerts | Infoveave Help\nSkip to content\nWorkflow Alerts'), 0.16666667)
[ 2025-08-10 22:40:39,604 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-10 22:40:39,605 ] test_main.py:81 root - INFO - [Record(id='2027003d-7c4e-4b6d-acd3-b391a775ae9a', payload={'url': 'https://infoveave-help.pages.dev/automation-v8/workflows/define-workflow/workflow-alerts-2/', 'title': 'workflow-alerts-2', 'section': 'automation', 'terminologies': ['Alerts', 'Infoveave', 'Workflows', 'Workflow Alerts'], 'char_count': 3832, 'word_count': 620, 'page_content': 'Workflow Alerts | Infoveave Help\nSkip to content\nWorkflow Alerts', 'chunk_index': 0}, vector=None, shard_key=None, order_value=None)]
[ 2025-08-10 22:40:39,605 ] test_main.py:82 root - INFO - Retrieved result for point ID: 2027003d-7c4e-4b6d-acd3-b391a775ae9a
[ 2025-08-10 22:40:39,605 ] test_main.py:73 root - INFO - (Document(metadata={'_id': '81a7ef81-eb12-4bcd-ad2e-403f547e7e50', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='Choose the days on which you want to execute the Workflow. By default, Infoveave sets it to every day. You can select specific days of the week, days of the month, or months.\nClick on the\nAdd'), 0.14285715)
[ 2025-08-10 22:40:39,660 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-10 22:40:39,661 ] test_main.py:81 root - INFO - [Record(id='81a7ef81-eb12-4bcd-ad2e-403f547e7e50', payload={'url': 'https://infoveave-help.pages.dev/automation-v8/jobs-v8/schedule-job/', 'title': 'schedule-job', 'section': 'automation', 'terminologies': ['Automation', 'Cron trigger', 'Emailhook trigger', 'Infoveave', 'Lists', 'Reports', 'Value', 'View', 'View', 'Webhook trigger', 'Workflows', 'Workflow Start trigger'], 'char_count': 5699, 'word_count': 937, 'page_content': 'Choose the days on which you want to execute the Workflow. By default, Infoveave sets it to every day. You can select specific days of the week, days of the month, or months.\nClick on the\nAdd', 'chunk_index': 5}, vector=None, shard_key=None, order_value=None)]
[ 2025-08-10 22:40:39,661 ] test_main.py:82 root - INFO - Retrieved result for point ID: 81a7ef81-eb12-4bcd-ad2e-403f547e7e50
[ 2025-08-10 22:40:39,661 ] test_main.py:73 root - INFO - (Document(metadata={'_id': '3989b1ef-a79d-4b1d-bce6-79cb5969aa26', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='Choose the days on which you want to execute the Workflow. By default, Infoveave sets it to every day. You can select specific days of the week, days of the month, or months.\nClick on the\nAdd'), 0.125)
[ 2025-08-10 22:40:39,719 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-10 22:40:39,720 ] test_main.py:81 root - INFO - [Record(id='3989b1ef-a79d-4b1d-bce6-79cb5969aa26', payload={'url': 'https://infoveave-help.pages.dev/automation-v8/workflows/define-workflow/workflow-start/', 'title': 'workflow-start', 'section': 'automation', 'terminologies': ['Automation', 'Cron trigger', 'Emailhook trigger', 'Infoveave', 'Lists', 'Reports', 'Value', 'View', 'View', 'Webhook trigger', 'Workflows', 'Workflow Start trigger'], 'char_count': 5699, 'word_count': 937, 'page_content': 'Choose the days on which you want to execute the Workflow. By default, Infoveave sets it to every day. You can select specific days of the week, days of the month, or months.\nClick on the\nAdd', 'chunk_index': 5}, vector=None, shard_key=None, order_value=None)]
[ 2025-08-10 22:40:39,721 ] test_main.py:82 root - INFO - Retrieved result for point ID: 3989b1ef-a79d-4b1d-bce6-79cb5969aa26
[ 2025-08-10 22:40:39,721 ] test_main.py:73 root - INFO - (Document(metadata={'_id': '3fd7ab5c-2d29-41ea-9ed7-0684f87b08e1', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='Add FTP Download Activity\n0:21\nConfigure FTP Download Activity\n0:31\nAdd Read Excel Files Activity\n0:35\nAdd Transform Activity using Javascript\n0:40\nAdd Round Numbers Activity\n0:46 Add Remove Duplicate Rows Activity\n0:52\nAdd Drop Columns Activity\n0:56\nAdd Rename Columns Activity\n1:01\nAdd Upload to Datasource Activity\n1:08\nExecute the Workflow and View Instance History'), 0.11111111)
[ 2025-08-10 22:40:39,803 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-10 22:40:39,804 ] test_main.py:81 root - INFO - [Record(id='3fd7ab5c-2d29-41ea-9ed7-0684f87b08e1', payload={'url': 'https://infoveave-help.pages.dev/automation-v8/jobs-v8/create-new-job/', 'title': 'create-new-job', 'section': 'automation', 'terminologies': ['Alerts', 'Automation', 'Infoveave', 'Measures', 'Query', 'Query Report', 'Value', 'Variables', 'View', 'View', 'Workflows'], 'char_count': 4476, 'word_count': 722, 'page_content': 'Add FTP Download Activity\n0:21\nConfigure FTP Download Activity\n0:31\nAdd Read Excel Files Activity\n0:35\nAdd Transform Activity using Javascript\n0:40\nAdd Round Numbers Activity\n0:46 Add Remove Duplicate Rows Activity\n0:52\nAdd Drop Columns Activity\n0:56\nAdd Rename Columns Activity\n1:01\nAdd Upload to Datasource Activity\n1:08\nExecute the Workflow and View Instance History', 'chunk_index': 1}, vector=None, shard_key=None, order_value=None)]
[ 2025-08-10 22:40:39,804 ] test_main.py:82 root - INFO - Retrieved result for point ID: 3fd7ab5c-2d29-41ea-9ed7-0684f87b08e1
[ 2025-08-10 22:40:39,804 ] test_main.py:73 root - INFO - (Document(metadata={'_id': '2adcd9bd-c3f6-41e9-8c27-26f07adfbe4c', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='Add FTP Download Activity\n0:21\nConfigure FTP Download Activity\n0:31\nAdd Read Excel Files Activity\n0:35\nAdd Transform Activity using Javascript\n0:40\nAdd Round Numbers Activity\n0:46 Add Remove Duplicate Rows Activity\n0:52\nAdd Drop Columns Activity\n0:56\nAdd Rename Columns Activity\n1:01\nAdd Upload to Datasource Activity\n1:08\nExecute the Workflow and View Instance History'), 0.1)
[ 2025-08-10 22:40:39,864 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-10 22:40:39,865 ] test_main.py:81 root - INFO - [Record(id='2adcd9bd-c3f6-41e9-8c27-26f07adfbe4c', payload={'url': 'https://infoveave-help.pages.dev/automation-v8/workflows/define-workflow/', 'title': 'define-workflow', 'section': 'automation', 'terminologies': ['Alerts', 'Automation', 'Infoveave', 'Measures', 'Query', 'Query Report', 'Value', 'Variables', 'View', 'View', 'Workflows'], 'char_count': 4476, 'word_count': 722, 'page_content': 'Add FTP Download Activity\n0:21\nConfigure FTP Download Activity\n0:31\nAdd Read Excel Files Activity\n0:35\nAdd Transform Activity using Javascript\n0:40\nAdd Round Numbers Activity\n0:46 Add Remove Duplicate Rows Activity\n0:52\nAdd Drop Columns Activity\n0:56\nAdd Rename Columns Activity\n1:01\nAdd Upload to Datasource Activity\n1:08\nExecute the Workflow and View Instance History', 'chunk_index': 1}, vector=None, shard_key=None, order_value=None)]
[ 2025-08-10 22:40:39,865 ] test_main.py:82 root - INFO - Retrieved result for point ID: 2adcd9bd-c3f6-41e9-8c27-26f07adfbe4c
[ 2025-08-10 22:40:39,865 ] test_main.py:73 root - INFO - (Document(metadata={'_id': 'bfe3c285-ffc2-4551-a19c-a5900bdd0aa3', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='E\nEmailhook trigger The Emailhook trigger initiates a Workflow based on incoming emails. You can set up specific email addresses that serve as Emailhooks. This allows for  automated processing of email-based activities or notifications . This trigger is useful for Workflows that involve email notifications or processing of data received via email.'), 0.09090909)
[ 2025-08-10 22:40:39,917 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-10 22:40:39,977 ] test_main.py:81 root - INFO - [Record(id='bfe3c285-ffc2-4551-a19c-a5900bdd0aa3', payload={'url': 'https://infoveave-help.pages.dev/introduction-to-infoveave/infoveave-terminologies/', 'title': 'infoveave-terminologies', 'section': 'introduction-to-infoveave', 'terminologies': ['Address Book', 'Alerts', 'Audit Log', 'Automation', 'Business Analysis', 'Calculated Columns', 'Calculated Measures', 'Catalogues', 'Client', 'Color Palette', 'Common Dimension filters', 'Component Panel', 'Component', 'Conditional Expressions', 'Connections', 'Control Centre', 'Creator', 'Cron trigger', 'Cube Designer', 'Custom Calendar', 'Custom Email', 'Database Connections', 'Datasources', 'Data Governance', 'Data Ingestion', 'Data Transformation', 'Data Visualization', 'Date Range Filter', 'Designer Canvas', 'Designer Layout', 'Dimensions', 'Domains', 'Emailhook trigger', 'Expression', 'Fixed Filters', 'Grid Layout', 'Hierarchies', 'Holiday Calendar', 'Infoboards', 'Infoboard Setup', 'Infoboard statistics', 'Infoveave', 'Infoveave menu', 'Insights', 'Lists', 'Linked Reports', 'Login statistics', 'Measures', 'ML Analysis', 'ML Model', 'My Organization', 'My Workspace', 'NGuage Forms', 'Query', 'Query Builder', 'Query Report', 'Reports', 'Retention Settings', 'Roles', 'SciPyR', 'Server Statistics', 'SMTP Settings', 'Statistical Analysis', 'Tags', 'Targets and Thresholds', 'Template Reports', 'Tenant', 'Tiers', 'Trash', 'Value', 'Variables', 'Version history', 'View', 'View', 'Viewer', 'Webhook trigger', 'What-If Analysis', 'What-If Formulae', 'Widget Configuration', 'Widget Customization', 'Widget statistics', 'Workflows', 'Workflow Alerts', 'Workflow Execution Status', 'Workflow Start trigger', 'Workflow Variables'], 'char_count': 25220, 'word_count': 3773, 'page_content': 'E\nEmailhook trigger The Emailhook trigger initiates a Workflow based on incoming emails. You can set up specific email addresses that serve as Emailhooks. This allows for  automated processing of email-based activities or notifications . This trigger is useful for Workflows that involve email notifications or processing of data received via email.', 'chunk_index': 13}, vector=None, shard_key=None, order_value=None)]
[ 2025-08-10 22:40:39,977 ] test_main.py:82 root - INFO - Retrieved result for point ID: bfe3c285-ffc2-4551-a19c-a5900bdd0aa3
[ 2025-08-10 22:40:39,977 ] test_main.py:124 root - INFO - Top context prepared for query rewriting.
[ 2025-08-10 22:40:39,977 ] test_main.py:103 root - INFO - Querying Neo4j for entities: ['Workflow Alerts', 'Tenant', 'My Workspace', 'Targets and Thresholds', 'Creator', 'Cron trigger', 'SciPyR', 'Common Dimension filters', 'Workflow Start trigger', 'Workflows', 'NGuage Forms', 'Value', 'Business Analysis', 'Designer Layout', 'Data Transformation', 'Query Report', 'Infoveave menu', 'Query', 'Query Builder', 'Retention Settings', 'Workflow Variables', 'Date Range Filter', 'Version history', 'My Organization', 'SMTP Settings', 'ML Model', 'Server Statistics', 'Variables', 'Datasources', 'Control Centre', 'Widget statistics', 'Designer Canvas', 'Custom Calendar', 'Infoboards', 'Viewer', 'Dimensions', 'Widget Configuration', 'Grid Layout', 'Client', 'Component Panel', 'Reports', 'Catalogues', 'Data Visualization', 'Template Reports', 'Infoveave', 'Widget Customization', 'Calculated Columns', 'Emailhook trigger', 'Lists', 'Measures', 'Database Connections', 'Roles', 'Component', 'Data Governance', 'Statistical Analysis', 'Hierarchies', 'Alerts', 'ML Analysis', 'Workflow Execution Status', 'Cube Designer', 'Infoboard Setup', 'Trash', 'What-If Formulae', 'Conditional Expressions', 'Automation', 'Holiday Calendar', 'What-If Analysis', 'Data Ingestion', 'Domains', 'Webhook trigger', 'Login statistics', 'Calculated Measures', 'Tiers', 'Audit Log', 'Connections', 'Tags', 'View', 'Linked Reports', 'Fixed Filters', 'Insights', 'Address Book', 'Infoboard statistics', 'Expression', 'Color Palette', 'Custom Email'] with hops=1 and top_n=50
[ 2025-08-10 22:40:41,389 ] result.py:337 neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownLabelWarning} {category: UNRECOGNIZED} {title: The provided label is not in the database.} {description: One of the labels in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing label name is: Entity)} {position: line: 3, column: 14, offset: 42} for query: '\n    UNWIND $entities AS ent\n    MATCH (e:Entity {name: ent})-[r]-(m)\n    RETURN e.name AS head, type(r) AS rel, r.type AS rel_type, m.name as tail, COUNT(*) as freq\n    LIMIT $limit\n    '
[ 2025-08-10 22:40:41,391 ] result.py:337 neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: type)} {position: line: 4, column: 46, offset: 115} for query: '\n    UNWIND $entities AS ent\n    MATCH (e:Entity {name: ent})-[r]-(m)\n    RETURN e.name AS head, type(r) AS rel, r.type AS rel_type, m.name as tail, COUNT(*) as freq\n    LIMIT $limit\n    '
[ 2025-08-10 22:40:41,391 ] test_main.py:116 root - INFO - Retrieved 0 triplets from Neo4j.
[ 2025-08-10 22:40:41,391 ] test_main.py:132 root - INFO - Retrieved 0 related triplets from Neo4j.
[ 2025-08-10 22:40:41,391 ] test_main.py:137 root - INFO - Knowledge graph facts prepared for query rewriting.
[ 2025-08-10 22:40:41,391 ] test_main.py:142 root - INFO - Loaded rewritten query system prompt.
[ 2025-08-10 22:40:41,392 ] test_main.py:155 root - INFO - Loaded rewritten query user prompt.
[ 2025-08-10 22:40:42,079 ] _client.py:1025 httpx - INFO - HTTP Request: POST https://api.groq.com/openai/v1/chat/completions "HTTP/1.1 200 OK"
[ 2025-08-10 22:40:42,097 ] test_main.py:297 root - INFO - Rewritten query: Execute Query| Send Email
[ 2025-08-10 22:40:42,097 ] test_main.py:304 root - INFO - Rewritten query parts: ['Execute Query', 'Send Email']
[ 2025-08-10 22:40:42,097 ] test_main.py:313 root - INFO - Rewritten Query 1: Execute Query
[ 2025-08-10 22:40:42,822 ] test_main.py:316 root - INFO - Embedding generated for query 1.
[ 2025-08-10 22:40:43,791 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points/query "HTTP/1.1 200 OK"
[ 2025-08-10 22:40:43,793 ] test_main.py:321 root - INFO - Processing query part 1: Execute Query
[ 2025-08-10 22:40:43,817 ] test_main.py:71 root - INFO - Building context with metadata from documents...
[ 2025-08-10 22:40:43,817 ] test_main.py:73 root - INFO - (Document(metadata={'_id': '4bf7f9a7-fc4e-49bc-9caf-4fd89d8160ab', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='Execute Query | Infoveave Help\nSkip to content\nExecute Query\nDescription\nThe\nExecute Query'), 0.5)
[ 2025-08-10 22:40:43,880 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-10 22:40:43,882 ] test_main.py:81 root - INFO - [Record(id='4bf7f9a7-fc4e-49bc-9caf-4fd89d8160ab', payload={'url': 'https://infoveave-help.pages.dev/automation-v8/activities/execute-query/', 'title': 'execute-query', 'section': 'automation', 'terminologies': ['Infoveave', 'Query', 'Reports', 'Value'], 'char_count': 2330, 'word_count': 363, 'page_content': 'Execute Query | Infoveave Help\nSkip to content\nExecute Query\nDescription\nThe\nExecute Query', 'chunk_index': 0}, vector=None, shard_key=None, order_value=None)]
[ 2025-08-10 22:40:43,882 ] test_main.py:82 root - INFO - Retrieved result for point ID: 4bf7f9a7-fc4e-49bc-9caf-4fd89d8160ab
[ 2025-08-10 22:40:43,882 ] test_main.py:73 root - INFO - (Document(metadata={'_id': 'c4316ab6-9c63-42af-b504-74f8cdbc37df', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='This activity connects to your Google Cloud project, runs the specified query, and returns the results in tabular format. It is ideal for pulling real-time analytics, data transformations, or integrating cloud data into your workflow pipelines.\nUse case\n: Fetch customer order data by region for the last quarter directly from BigQuery to feed a dashboard or analytics engine.\nInput\nNot Applicable\nOutput\nOutput Type\nFormat\nDescription\nData\nTable Output of the executed BigQuery SQL query.\nConfiguration Fields\nField Name\nDescription\nConnection\nGoogle BigQuery connection (OAuth or service account). Required for access.\nProject\nGoogle Cloud Project ID containing the BigQuery datasets.\nQuery The SQL query string to be executed. Supports standard SQL syntax.\nSample Input\nNot Applicable\nSample Configuration\nField\nValue\nConnection\nGoogle BigQuery OAuth\nProject\ncustomer-data-analytics\nQuery'), 0.33333334)
[ 2025-08-10 22:40:43,949 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-10 22:40:43,950 ] test_main.py:81 root - INFO - [Record(id='c4316ab6-9c63-42af-b504-74f8cdbc37df', payload={'url': 'https://infoveave-help.pages.dev/automation-v8/activities/fetch-from-bigquery/', 'title': 'fetch-from-bigquery', 'section': 'automation', 'terminologies': ['Infoveave', 'Query', 'Value'], 'char_count': 1338, 'word_count': 194, 'page_content': 'This activity connects to your Google Cloud project, runs the specified query, and returns the results in tabular format. It is ideal for pulling real-time analytics, data transformations, or integrating cloud data into your workflow pipelines.\nUse case\n: Fetch customer order data by region for the last quarter directly from BigQuery to feed a dashboard or analytics engine.\nInput\nNot Applicable\nOutput\nOutput Type\nFormat\nDescription\nData\nTable Output of the executed BigQuery SQL query.\nConfiguration Fields\nField Name\nDescription\nConnection\nGoogle BigQuery connection (OAuth or service account). Required for access.\nProject\nGoogle Cloud Project ID containing the BigQuery datasets.\nQuery The SQL query string to be executed. Supports standard SQL syntax.\nSample Input\nNot Applicable\nSample Configuration\nField\nValue\nConnection\nGoogle BigQuery OAuth\nProject\ncustomer-data-analytics\nQuery', 'chunk_index': 1}, vector=None, shard_key=None, order_value=None)]
[ 2025-08-10 22:40:43,950 ] test_main.py:82 root - INFO - Retrieved result for point ID: c4316ab6-9c63-42af-b504-74f8cdbc37df
[ 2025-08-10 22:40:43,950 ] test_main.py:73 root - INFO - (Document(metadata={'_id': '21c3607e-54d8-44a9-b1b6-12646396ca58', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='activity executes a structured query (e.g., SQL) against a configured data source such as a relational database, data warehouse, or cloud storage engine . You can retrieve the results directly as tabular output or optionally save them to a file using configurable export settings. This activity is especially useful for dynamically pulling data into a workflow, generating reports, or integrating external data systems. When saving results to a file, it also supports advanced formatting using templates, encryption, and partitioning logic. Use this activity to:\nQuery databases and bring live data into workflows\nExport query results as Excel or CSV files\nApply formatting using templates and control sheet/row structure\nSecure output files with encryption and filename customization\nUse case\n: A data analyst can use this activity to run a sales report query on a PostgreSQL database. The output can be formatted using a template Excel file, encrypted using a secret key, and saved with a filename pattern that includes a timestamp.\nInput Type\nDescription\nData\nOptional incoming data used to influence the query or filenames (if dynamic).\nOutput\nOutput Type\nFormat\nDescription\nData\nTable or File Query results, either in-memory (as table) or written to file(s).\nConfiguration Fields\nField Name\nDescription\nDatasource Id Select the connection representing the data source (e.g., MySQL, SQL Server, Snowflake) where the query will run.\nQuery The query string (SQL or supported query language) to be executed on the selected data source. Supports variables if dynamic queries are needed.\nSave As File Enable this option to save the query result to a file instead of returning it as in-memory table data.\nSecret Key\nRequired only when “Save As File” is enabled. This encryption key secures the generated file’s content.'), 0.25)
[ 2025-08-10 22:40:44,007 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-10 22:40:44,008 ] test_main.py:81 root - INFO - [Record(id='21c3607e-54d8-44a9-b1b6-12646396ca58', payload={'url': 'https://infoveave-help.pages.dev/automation-v8/activities/query-datasource/', 'title': 'query-datasource', 'section': 'automation', 'terminologies': ['Infoveave', 'Query', 'Reports', 'Value', 'Variables', 'Workflows'], 'char_count': 3756, 'word_count': 590, 'page_content': 'activity executes a structured query (e.g., SQL) against a configured data source such as a relational database, data warehouse, or cloud storage engine . You can retrieve the results directly as tabular output or optionally save them to a file using configurable export settings. This activity is especially useful for dynamically pulling data into a workflow, generating reports, or integrating external data systems. When saving results to a file, it also supports advanced formatting using templates, encryption, and partitioning logic. Use this activity to:\nQuery databases and bring live data into workflows\nExport query results as Excel or CSV files\nApply formatting using templates and control sheet/row structure\nSecure output files with encryption and filename customization\nUse case\n: A data analyst can use this activity to run a sales report query on a PostgreSQL database. The output can be formatted using a template Excel file, encrypted using a secret key, and saved with a filename pattern that includes a timestamp.\nInput Type\nDescription\nData\nOptional incoming data used to influence the query or filenames (if dynamic).\nOutput\nOutput Type\nFormat\nDescription\nData\nTable or File Query results, either in-memory (as table) or written to file(s).\nConfiguration Fields\nField Name\nDescription\nDatasource Id Select the connection representing the data source (e.g., MySQL, SQL Server, Snowflake) where the query will run.\nQuery The query string (SQL or supported query language) to be executed on the selected data source. Supports variables if dynamic queries are needed.\nSave As File Enable this option to save the query result to a file instead of returning it as in-memory table data.\nSecret Key\nRequired only when “Save As File” is enabled. This encryption key secures the generated file’s content.', 'chunk_index': 1}, vector=None, shard_key=None, order_value=None)]
[ 2025-08-10 22:40:44,009 ] test_main.py:82 root - INFO - Retrieved result for point ID: 21c3607e-54d8-44a9-b1b6-12646396ca58
[ 2025-08-10 22:40:44,009 ] test_main.py:73 root - INFO - (Document(metadata={'_id': '65f1fed2-a4bd-4a52-aa8a-cc0e2c0490f2', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content="activity allows users to execute SQL queries on files or data stored in a connected data source (e.g., database, storage, or file-based system). This activity supports dynamic queries, and optionally allows saving the results to files with encryption, formatting, and custom output configuration.\nUse this activity to:\nExecute ad hoc or parameterized SQL queries on uploaded or connected data Retrieve transformed or filtered data for further processing\nGenerate reports or structured data files from query results\nUse Case\n: Useful in scenarios where data needs to be filtered, joined, aggregated, or reshaped before it’s used in reporting, validation, or export.\nInput\nType\nDescription\nFiles\nFiles/data available in the connection\nOutput\nType Format\nDescription\nData / File\nTable / File\nQuery result as a table or downloadable file\nConfiguration Fields\nField Name\nRequired\nDescription\nConnection\nYes\nConnection to the data source where the query should be executed.\nQuery Yes\nSQL query to be executed on the connected data source.\nSave As File\nNo\nIf enabled, the query result will be saved as a file.\nSecret Key\nConditional Encryption key used to secure the generated output file (enabled only if Save As File is true).\nFile Pattern\nConditional\nPattern for naming the generated files.\nSheet Name\nConditional Sheet name to use in the generated file (for Excel formats).\nFile\nConditional\nTemplate file to structure the output.\nSplit by Column\nConditional\nColumn name used to split the query result into multiple output files.\nStarting Row Conditional\nRow index in the template file from where data insertion begins.\nStarting Column\nConditional\nColumn index in the template file from where data insertion begins.\nSample Input\nNot applicable\n— data is pulled from the connected data source. Sample Configuration\nField\nValue\nConnection\nAzureBlobConnection\nQuery\nSELECT * FROM SalesData WHERE Region = 'East'\nSave As File\ntrue\nSecret Key\nEncrypt@123\nFile Pattern\nSales_Report_[Region]"), 0.2)
[ 2025-08-10 22:40:44,081 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-10 22:40:44,082 ] test_main.py:81 root - INFO - [Record(id='65f1fed2-a4bd-4a52-aa8a-cc0e2c0490f2', payload={'url': 'https://infoveave-help.pages.dev/automation-v8/activities/execute-query/', 'title': 'execute-query', 'section': 'automation', 'terminologies': ['Infoveave', 'Query', 'Reports', 'Value'], 'char_count': 2330, 'word_count': 363, 'page_content': "activity allows users to execute SQL queries on files or data stored in a connected data source (e.g., database, storage, or file-based system). This activity supports dynamic queries, and optionally allows saving the results to files with encryption, formatting, and custom output configuration.\nUse this activity to:\nExecute ad hoc or parameterized SQL queries on uploaded or connected data Retrieve transformed or filtered data for further processing\nGenerate reports or structured data files from query results\nUse Case\n: Useful in scenarios where data needs to be filtered, joined, aggregated, or reshaped before it’s used in reporting, validation, or export.\nInput\nType\nDescription\nFiles\nFiles/data available in the connection\nOutput\nType Format\nDescription\nData / File\nTable / File\nQuery result as a table or downloadable file\nConfiguration Fields\nField Name\nRequired\nDescription\nConnection\nYes\nConnection to the data source where the query should be executed.\nQuery Yes\nSQL query to be executed on the connected data source.\nSave As File\nNo\nIf enabled, the query result will be saved as a file.\nSecret Key\nConditional Encryption key used to secure the generated output file (enabled only if Save As File is true).\nFile Pattern\nConditional\nPattern for naming the generated files.\nSheet Name\nConditional Sheet name to use in the generated file (for Excel formats).\nFile\nConditional\nTemplate file to structure the output.\nSplit by Column\nConditional\nColumn name used to split the query result into multiple output files.\nStarting Row Conditional\nRow index in the template file from where data insertion begins.\nStarting Column\nConditional\nColumn index in the template file from where data insertion begins.\nSample Input\nNot applicable\n— data is pulled from the connected data source. Sample Configuration\nField\nValue\nConnection\nAzureBlobConnection\nQuery\nSELECT * FROM SalesData WHERE Region = 'East'\nSave As File\ntrue\nSecret Key\nEncrypt@123\nFile Pattern\nSales_Report_[Region]", 'chunk_index': 1}, vector=None, shard_key=None, order_value=None)]
[ 2025-08-10 22:40:44,082 ] test_main.py:82 root - INFO - Retrieved result for point ID: 65f1fed2-a4bd-4a52-aa8a-cc0e2c0490f2
[ 2025-08-10 22:40:44,083 ] test_main.py:73 root - INFO - (Document(metadata={'_id': '16772a9b-c89a-4370-ae9b-911286a37769', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content=').\nQuery Column Name\nColumn name to store the query string (portion after\n?\n) without parsing key-value pairs.\nFragment Column Name\nColumn name to store the fragment identifier (portion after\n#\n, if any). Note\n: This activity does not split the query string into key-value pairs — use the\nSplit HTTP Query\nactivity if you need that level of detail.\nSample Input\nemployee_id\nname\nurl\nE001\nJohn Doe'), 0.16666667)
[ 2025-08-10 22:40:44,146 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-10 22:40:44,147 ] test_main.py:81 root - INFO - [Record(id='16772a9b-c89a-4370-ae9b-911286a37769', payload={'url': 'https://infoveave-help.pages.dev/automation-v8/activities/split-url/', 'title': 'split-url', 'section': 'automation', 'terminologies': ['Infoveave', 'Query', 'Reports', 'Value'], 'char_count': 3191, 'word_count': 408, 'page_content': ').\nQuery Column Name\nColumn name to store the query string (portion after\n?\n) without parsing key-value pairs.\nFragment Column Name\nColumn name to store the fragment identifier (portion after\n#\n, if any). Note\n: This activity does not split the query string into key-value pairs — use the\nSplit HTTP Query\nactivity if you need that level of detail.\nSample Input\nemployee_id\nname\nurl\nE001\nJohn Doe', 'chunk_index': 2}, vector=None, shard_key=None, order_value=None)]
[ 2025-08-10 22:40:44,148 ] test_main.py:82 root - INFO - Retrieved result for point ID: 16772a9b-c89a-4370-ae9b-911286a37769
[ 2025-08-10 22:40:44,148 ] test_main.py:182 root - INFO - Loaded rewritten query user prompt.
[ 2025-08-10 22:40:45,278 ] _client.py:1025 httpx - INFO - HTTP Request: POST https://api.groq.com/openai/v1/chat/completions "HTTP/1.1 200 OK"
[ 2025-08-10 22:40:45,281 ] test_main.py:324 root - INFO - Response for query part 1: The **Execute Query** activity in Infoveave allows you to run SQL queries against your connected data sources.  

Here's a breakdown:

* **Purpose:** This activity is designed to retrieve data from databases, data warehouses, or cloud storage engines by executing SQL queries.

* **Use Cases:**
    * **Real-time Analytics:** Fetch up-to-date data for dashboards or reporting.
    * **Data Transformations:**  Modify and reshape data within your workflow.
    * **Data Integration:**  Bring external data into your Infoveave pipelines.

* **Key Features:**
    * **Connection:** You'll need to specify a connection to your data source (e.g., MySQL, PostgreSQL, BigQuery).
    * **Query:**  Enter your SQL query string. The activity supports standard SQL syntax.
    * **Output:** The results of your query are returned as a tabular data structure.

* **Where to Find More Information:**
    [https://infoveave-help.pages.dev/automation-v8/activities/execute-query/](https://infoveave-help.pages.dev/automation-v8/activities/execute-query/) 



Let me know if you have any other questions about the Execute Query activity or need help with specific aspects of using it!
[ 2025-08-10 22:40:45,281 ] test_main.py:327 root - INFO - [(Document(metadata={'_id': '4bf7f9a7-fc4e-49bc-9caf-4fd89d8160ab', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='Execute Query | Infoveave Help\nSkip to content\nExecute Query\nDescription\nThe\nExecute Query'), 0.5), (Document(metadata={'_id': 'c4316ab6-9c63-42af-b504-74f8cdbc37df', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='This activity connects to your Google Cloud project, runs the specified query, and returns the results in tabular format. It is ideal for pulling real-time analytics, data transformations, or integrating cloud data into your workflow pipelines.\nUse case\n: Fetch customer order data by region for the last quarter directly from BigQuery to feed a dashboard or analytics engine.\nInput\nNot Applicable\nOutput\nOutput Type\nFormat\nDescription\nData\nTable Output of the executed BigQuery SQL query.\nConfiguration Fields\nField Name\nDescription\nConnection\nGoogle BigQuery connection (OAuth or service account). Required for access.\nProject\nGoogle Cloud Project ID containing the BigQuery datasets.\nQuery The SQL query string to be executed. Supports standard SQL syntax.\nSample Input\nNot Applicable\nSample Configuration\nField\nValue\nConnection\nGoogle BigQuery OAuth\nProject\ncustomer-data-analytics\nQuery'), 0.33333334), (Document(metadata={'_id': '21c3607e-54d8-44a9-b1b6-12646396ca58', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='activity executes a structured query (e.g., SQL) against a configured data source such as a relational database, data warehouse, or cloud storage engine . You can retrieve the results directly as tabular output or optionally save them to a file using configurable export settings. This activity is especially useful for dynamically pulling data into a workflow, generating reports, or integrating external data systems. When saving results to a file, it also supports advanced formatting using templates, encryption, and partitioning logic. Use this activity to:\nQuery databases and bring live data into workflows\nExport query results as Excel or CSV files\nApply formatting using templates and control sheet/row structure\nSecure output files with encryption and filename customization\nUse case\n: A data analyst can use this activity to run a sales report query on a PostgreSQL database. The output can be formatted using a template Excel file, encrypted using a secret key, and saved with a filename pattern that includes a timestamp.\nInput Type\nDescription\nData\nOptional incoming data used to influence the query or filenames (if dynamic).\nOutput\nOutput Type\nFormat\nDescription\nData\nTable or File Query results, either in-memory (as table) or written to file(s).\nConfiguration Fields\nField Name\nDescription\nDatasource Id Select the connection representing the data source (e.g., MySQL, SQL Server, Snowflake) where the query will run.\nQuery The query string (SQL or supported query language) to be executed on the selected data source. Supports variables if dynamic queries are needed.\nSave As File Enable this option to save the query result to a file instead of returning it as in-memory table data.\nSecret Key\nRequired only when “Save As File” is enabled. This encryption key secures the generated file’s content.'), 0.25), (Document(metadata={'_id': '65f1fed2-a4bd-4a52-aa8a-cc0e2c0490f2', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content="activity allows users to execute SQL queries on files or data stored in a connected data source (e.g., database, storage, or file-based system). This activity supports dynamic queries, and optionally allows saving the results to files with encryption, formatting, and custom output configuration.\nUse this activity to:\nExecute ad hoc or parameterized SQL queries on uploaded or connected data Retrieve transformed or filtered data for further processing\nGenerate reports or structured data files from query results\nUse Case\n: Useful in scenarios where data needs to be filtered, joined, aggregated, or reshaped before it’s used in reporting, validation, or export.\nInput\nType\nDescription\nFiles\nFiles/data available in the connection\nOutput\nType Format\nDescription\nData / File\nTable / File\nQuery result as a table or downloadable file\nConfiguration Fields\nField Name\nRequired\nDescription\nConnection\nYes\nConnection to the data source where the query should be executed.\nQuery Yes\nSQL query to be executed on the connected data source.\nSave As File\nNo\nIf enabled, the query result will be saved as a file.\nSecret Key\nConditional Encryption key used to secure the generated output file (enabled only if Save As File is true).\nFile Pattern\nConditional\nPattern for naming the generated files.\nSheet Name\nConditional Sheet name to use in the generated file (for Excel formats).\nFile\nConditional\nTemplate file to structure the output.\nSplit by Column\nConditional\nColumn name used to split the query result into multiple output files.\nStarting Row Conditional\nRow index in the template file from where data insertion begins.\nStarting Column\nConditional\nColumn index in the template file from where data insertion begins.\nSample Input\nNot applicable\n— data is pulled from the connected data source. Sample Configuration\nField\nValue\nConnection\nAzureBlobConnection\nQuery\nSELECT * FROM SalesData WHERE Region = 'East'\nSave As File\ntrue\nSecret Key\nEncrypt@123\nFile Pattern\nSales_Report_[Region]"), 0.2), (Document(metadata={'_id': '16772a9b-c89a-4370-ae9b-911286a37769', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content=').\nQuery Column Name\nColumn name to store the query string (portion after\n?\n) without parsing key-value pairs.\nFragment Column Name\nColumn name to store the fragment identifier (portion after\n#\n, if any). Note\n: This activity does not split the query string into key-value pairs — use the\nSplit HTTP Query\nactivity if you need that level of detail.\nSample Input\nemployee_id\nname\nurl\nE001\nJohn Doe'), 0.16666667)]
[ 2025-08-10 22:40:45,308 ] test_main.py:71 root - INFO - Building context with metadata from documents...
[ 2025-08-10 22:40:45,308 ] test_main.py:73 root - INFO - (Document(metadata={'_id': '4bf7f9a7-fc4e-49bc-9caf-4fd89d8160ab', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='Execute Query | Infoveave Help\nSkip to content\nExecute Query\nDescription\nThe\nExecute Query'), 0.5)
[ 2025-08-10 22:40:45,380 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-10 22:40:45,381 ] test_main.py:81 root - INFO - [Record(id='4bf7f9a7-fc4e-49bc-9caf-4fd89d8160ab', payload={'url': 'https://infoveave-help.pages.dev/automation-v8/activities/execute-query/', 'title': 'execute-query', 'section': 'automation', 'terminologies': ['Infoveave', 'Query', 'Reports', 'Value'], 'char_count': 2330, 'word_count': 363, 'page_content': 'Execute Query | Infoveave Help\nSkip to content\nExecute Query\nDescription\nThe\nExecute Query', 'chunk_index': 0}, vector=None, shard_key=None, order_value=None)]
[ 2025-08-10 22:40:45,381 ] test_main.py:82 root - INFO - Retrieved result for point ID: 4bf7f9a7-fc4e-49bc-9caf-4fd89d8160ab
[ 2025-08-10 22:40:45,381 ] test_main.py:73 root - INFO - (Document(metadata={'_id': 'c4316ab6-9c63-42af-b504-74f8cdbc37df', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='This activity connects to your Google Cloud project, runs the specified query, and returns the results in tabular format. It is ideal for pulling real-time analytics, data transformations, or integrating cloud data into your workflow pipelines.\nUse case\n: Fetch customer order data by region for the last quarter directly from BigQuery to feed a dashboard or analytics engine.\nInput\nNot Applicable\nOutput\nOutput Type\nFormat\nDescription\nData\nTable Output of the executed BigQuery SQL query.\nConfiguration Fields\nField Name\nDescription\nConnection\nGoogle BigQuery connection (OAuth or service account). Required for access.\nProject\nGoogle Cloud Project ID containing the BigQuery datasets.\nQuery The SQL query string to be executed. Supports standard SQL syntax.\nSample Input\nNot Applicable\nSample Configuration\nField\nValue\nConnection\nGoogle BigQuery OAuth\nProject\ncustomer-data-analytics\nQuery'), 0.33333334)
[ 2025-08-10 22:40:45,440 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-10 22:40:45,441 ] test_main.py:81 root - INFO - [Record(id='c4316ab6-9c63-42af-b504-74f8cdbc37df', payload={'url': 'https://infoveave-help.pages.dev/automation-v8/activities/fetch-from-bigquery/', 'title': 'fetch-from-bigquery', 'section': 'automation', 'terminologies': ['Infoveave', 'Query', 'Value'], 'char_count': 1338, 'word_count': 194, 'page_content': 'This activity connects to your Google Cloud project, runs the specified query, and returns the results in tabular format. It is ideal for pulling real-time analytics, data transformations, or integrating cloud data into your workflow pipelines.\nUse case\n: Fetch customer order data by region for the last quarter directly from BigQuery to feed a dashboard or analytics engine.\nInput\nNot Applicable\nOutput\nOutput Type\nFormat\nDescription\nData\nTable Output of the executed BigQuery SQL query.\nConfiguration Fields\nField Name\nDescription\nConnection\nGoogle BigQuery connection (OAuth or service account). Required for access.\nProject\nGoogle Cloud Project ID containing the BigQuery datasets.\nQuery The SQL query string to be executed. Supports standard SQL syntax.\nSample Input\nNot Applicable\nSample Configuration\nField\nValue\nConnection\nGoogle BigQuery OAuth\nProject\ncustomer-data-analytics\nQuery', 'chunk_index': 1}, vector=None, shard_key=None, order_value=None)]
[ 2025-08-10 22:40:45,441 ] test_main.py:82 root - INFO - Retrieved result for point ID: c4316ab6-9c63-42af-b504-74f8cdbc37df
[ 2025-08-10 22:40:45,441 ] test_main.py:73 root - INFO - (Document(metadata={'_id': '21c3607e-54d8-44a9-b1b6-12646396ca58', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='activity executes a structured query (e.g., SQL) against a configured data source such as a relational database, data warehouse, or cloud storage engine . You can retrieve the results directly as tabular output or optionally save them to a file using configurable export settings. This activity is especially useful for dynamically pulling data into a workflow, generating reports, or integrating external data systems. When saving results to a file, it also supports advanced formatting using templates, encryption, and partitioning logic. Use this activity to:\nQuery databases and bring live data into workflows\nExport query results as Excel or CSV files\nApply formatting using templates and control sheet/row structure\nSecure output files with encryption and filename customization\nUse case\n: A data analyst can use this activity to run a sales report query on a PostgreSQL database. The output can be formatted using a template Excel file, encrypted using a secret key, and saved with a filename pattern that includes a timestamp.\nInput Type\nDescription\nData\nOptional incoming data used to influence the query or filenames (if dynamic).\nOutput\nOutput Type\nFormat\nDescription\nData\nTable or File Query results, either in-memory (as table) or written to file(s).\nConfiguration Fields\nField Name\nDescription\nDatasource Id Select the connection representing the data source (e.g., MySQL, SQL Server, Snowflake) where the query will run.\nQuery The query string (SQL or supported query language) to be executed on the selected data source. Supports variables if dynamic queries are needed.\nSave As File Enable this option to save the query result to a file instead of returning it as in-memory table data.\nSecret Key\nRequired only when “Save As File” is enabled. This encryption key secures the generated file’s content.'), 0.25)
[ 2025-08-10 22:40:45,512 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-10 22:40:45,513 ] test_main.py:81 root - INFO - [Record(id='21c3607e-54d8-44a9-b1b6-12646396ca58', payload={'url': 'https://infoveave-help.pages.dev/automation-v8/activities/query-datasource/', 'title': 'query-datasource', 'section': 'automation', 'terminologies': ['Infoveave', 'Query', 'Reports', 'Value', 'Variables', 'Workflows'], 'char_count': 3756, 'word_count': 590, 'page_content': 'activity executes a structured query (e.g., SQL) against a configured data source such as a relational database, data warehouse, or cloud storage engine . You can retrieve the results directly as tabular output or optionally save them to a file using configurable export settings. This activity is especially useful for dynamically pulling data into a workflow, generating reports, or integrating external data systems. When saving results to a file, it also supports advanced formatting using templates, encryption, and partitioning logic. Use this activity to:\nQuery databases and bring live data into workflows\nExport query results as Excel or CSV files\nApply formatting using templates and control sheet/row structure\nSecure output files with encryption and filename customization\nUse case\n: A data analyst can use this activity to run a sales report query on a PostgreSQL database. The output can be formatted using a template Excel file, encrypted using a secret key, and saved with a filename pattern that includes a timestamp.\nInput Type\nDescription\nData\nOptional incoming data used to influence the query or filenames (if dynamic).\nOutput\nOutput Type\nFormat\nDescription\nData\nTable or File Query results, either in-memory (as table) or written to file(s).\nConfiguration Fields\nField Name\nDescription\nDatasource Id Select the connection representing the data source (e.g., MySQL, SQL Server, Snowflake) where the query will run.\nQuery The query string (SQL or supported query language) to be executed on the selected data source. Supports variables if dynamic queries are needed.\nSave As File Enable this option to save the query result to a file instead of returning it as in-memory table data.\nSecret Key\nRequired only when “Save As File” is enabled. This encryption key secures the generated file’s content.', 'chunk_index': 1}, vector=None, shard_key=None, order_value=None)]
[ 2025-08-10 22:40:45,513 ] test_main.py:82 root - INFO - Retrieved result for point ID: 21c3607e-54d8-44a9-b1b6-12646396ca58
[ 2025-08-10 22:40:45,513 ] test_main.py:73 root - INFO - (Document(metadata={'_id': '65f1fed2-a4bd-4a52-aa8a-cc0e2c0490f2', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content="activity allows users to execute SQL queries on files or data stored in a connected data source (e.g., database, storage, or file-based system). This activity supports dynamic queries, and optionally allows saving the results to files with encryption, formatting, and custom output configuration.\nUse this activity to:\nExecute ad hoc or parameterized SQL queries on uploaded or connected data Retrieve transformed or filtered data for further processing\nGenerate reports or structured data files from query results\nUse Case\n: Useful in scenarios where data needs to be filtered, joined, aggregated, or reshaped before it’s used in reporting, validation, or export.\nInput\nType\nDescription\nFiles\nFiles/data available in the connection\nOutput\nType Format\nDescription\nData / File\nTable / File\nQuery result as a table or downloadable file\nConfiguration Fields\nField Name\nRequired\nDescription\nConnection\nYes\nConnection to the data source where the query should be executed.\nQuery Yes\nSQL query to be executed on the connected data source.\nSave As File\nNo\nIf enabled, the query result will be saved as a file.\nSecret Key\nConditional Encryption key used to secure the generated output file (enabled only if Save As File is true).\nFile Pattern\nConditional\nPattern for naming the generated files.\nSheet Name\nConditional Sheet name to use in the generated file (for Excel formats).\nFile\nConditional\nTemplate file to structure the output.\nSplit by Column\nConditional\nColumn name used to split the query result into multiple output files.\nStarting Row Conditional\nRow index in the template file from where data insertion begins.\nStarting Column\nConditional\nColumn index in the template file from where data insertion begins.\nSample Input\nNot applicable\n— data is pulled from the connected data source. Sample Configuration\nField\nValue\nConnection\nAzureBlobConnection\nQuery\nSELECT * FROM SalesData WHERE Region = 'East'\nSave As File\ntrue\nSecret Key\nEncrypt@123\nFile Pattern\nSales_Report_[Region]"), 0.2)
[ 2025-08-10 22:40:45,573 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-10 22:40:45,579 ] test_main.py:81 root - INFO - [Record(id='65f1fed2-a4bd-4a52-aa8a-cc0e2c0490f2', payload={'url': 'https://infoveave-help.pages.dev/automation-v8/activities/execute-query/', 'title': 'execute-query', 'section': 'automation', 'terminologies': ['Infoveave', 'Query', 'Reports', 'Value'], 'char_count': 2330, 'word_count': 363, 'page_content': "activity allows users to execute SQL queries on files or data stored in a connected data source (e.g., database, storage, or file-based system). This activity supports dynamic queries, and optionally allows saving the results to files with encryption, formatting, and custom output configuration.\nUse this activity to:\nExecute ad hoc or parameterized SQL queries on uploaded or connected data Retrieve transformed or filtered data for further processing\nGenerate reports or structured data files from query results\nUse Case\n: Useful in scenarios where data needs to be filtered, joined, aggregated, or reshaped before it’s used in reporting, validation, or export.\nInput\nType\nDescription\nFiles\nFiles/data available in the connection\nOutput\nType Format\nDescription\nData / File\nTable / File\nQuery result as a table or downloadable file\nConfiguration Fields\nField Name\nRequired\nDescription\nConnection\nYes\nConnection to the data source where the query should be executed.\nQuery Yes\nSQL query to be executed on the connected data source.\nSave As File\nNo\nIf enabled, the query result will be saved as a file.\nSecret Key\nConditional Encryption key used to secure the generated output file (enabled only if Save As File is true).\nFile Pattern\nConditional\nPattern for naming the generated files.\nSheet Name\nConditional Sheet name to use in the generated file (for Excel formats).\nFile\nConditional\nTemplate file to structure the output.\nSplit by Column\nConditional\nColumn name used to split the query result into multiple output files.\nStarting Row Conditional\nRow index in the template file from where data insertion begins.\nStarting Column\nConditional\nColumn index in the template file from where data insertion begins.\nSample Input\nNot applicable\n— data is pulled from the connected data source. Sample Configuration\nField\nValue\nConnection\nAzureBlobConnection\nQuery\nSELECT * FROM SalesData WHERE Region = 'East'\nSave As File\ntrue\nSecret Key\nEncrypt@123\nFile Pattern\nSales_Report_[Region]", 'chunk_index': 1}, vector=None, shard_key=None, order_value=None)]
[ 2025-08-10 22:40:45,580 ] test_main.py:82 root - INFO - Retrieved result for point ID: 65f1fed2-a4bd-4a52-aa8a-cc0e2c0490f2
[ 2025-08-10 22:40:45,580 ] test_main.py:73 root - INFO - (Document(metadata={'_id': '16772a9b-c89a-4370-ae9b-911286a37769', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content=').\nQuery Column Name\nColumn name to store the query string (portion after\n?\n) without parsing key-value pairs.\nFragment Column Name\nColumn name to store the fragment identifier (portion after\n#\n, if any). Note\n: This activity does not split the query string into key-value pairs — use the\nSplit HTTP Query\nactivity if you need that level of detail.\nSample Input\nemployee_id\nname\nurl\nE001\nJohn Doe'), 0.16666667)
[ 2025-08-10 22:40:45,682 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-10 22:40:45,683 ] test_main.py:81 root - INFO - [Record(id='16772a9b-c89a-4370-ae9b-911286a37769', payload={'url': 'https://infoveave-help.pages.dev/automation-v8/activities/split-url/', 'title': 'split-url', 'section': 'automation', 'terminologies': ['Infoveave', 'Query', 'Reports', 'Value'], 'char_count': 3191, 'word_count': 408, 'page_content': ').\nQuery Column Name\nColumn name to store the query string (portion after\n?\n) without parsing key-value pairs.\nFragment Column Name\nColumn name to store the fragment identifier (portion after\n#\n, if any). Note\n: This activity does not split the query string into key-value pairs — use the\nSplit HTTP Query\nactivity if you need that level of detail.\nSample Input\nemployee_id\nname\nurl\nE001\nJohn Doe', 'chunk_index': 2}, vector=None, shard_key=None, order_value=None)]
[ 2025-08-10 22:40:45,683 ] test_main.py:82 root - INFO - Retrieved result for point ID: 16772a9b-c89a-4370-ae9b-911286a37769
[ 2025-08-10 22:40:45,683 ] test_main.py:313 root - INFO - Rewritten Query 2: Send Email
[ 2025-08-10 22:40:46,213 ] test_main.py:316 root - INFO - Embedding generated for query 2.
[ 2025-08-10 22:40:47,568 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points/query "HTTP/1.1 200 OK"
[ 2025-08-10 22:40:47,570 ] test_main.py:321 root - INFO - Processing query part 2: Send Email
[ 2025-08-10 22:40:47,591 ] test_main.py:71 root - INFO - Building context with metadata from documents...
[ 2025-08-10 22:40:47,591 ] test_main.py:73 root - INFO - (Document(metadata={'_id': 'b0c2000b-2a94-480e-8ade-5ccb489ed9ea', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='Send Email | Infoveave Help\nSkip to content\nSend Email\nDescription\nThe\nSend Email'), 0.5)
[ 2025-08-10 22:40:47,664 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-10 22:40:47,665 ] test_main.py:81 root - INFO - [Record(id='b0c2000b-2a94-480e-8ade-5ccb489ed9ea', payload={'url': 'https://infoveave-help.pages.dev/automation-v8/activities/send-email/', 'title': 'send-email', 'section': 'automation', 'terminologies': ['Infoveave', 'Value'], 'char_count': 3312, 'word_count': 495, 'page_content': 'Send Email | Infoveave Help\nSkip to content\nSend Email\nDescription\nThe\nSend Email', 'chunk_index': 0}, vector=None, shard_key=None, order_value=None)]
[ 2025-08-10 22:40:47,665 ] test_main.py:82 root - INFO - Retrieved result for point ID: b0c2000b-2a94-480e-8ade-5ccb489ed9ea
[ 2025-08-10 22:40:47,665 ] test_main.py:73 root - INFO - (Document(metadata={'_id': 'de5e3b97-dd0f-4d05-8da9-ae3c750c78cc', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='activity allows you to compose and send emails as part of a workflow. You can configure recipient addresses, subject, body content, and attachments . The activity also supports dynamic emailing using fields from input data, and allows the use of pre-designed Infoveave templates for styling and formatting consistency. Use this activity to:\nSend individual or bulk emails based on incoming data\nAttach files generated in the workflow\nFormat emails using templates for consistency\nEmbed processed data directly into the email body\nUse case\n: A workflow generates a monthly sales report and automatically sends personalized emails to each regional manager with their region’s data attached and included in the body.\nInput\nType\nDescription\nData'), 0.33333334)
[ 2025-08-10 22:40:47,733 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-10 22:40:47,734 ] test_main.py:81 root - INFO - [Record(id='de5e3b97-dd0f-4d05-8da9-ae3c750c78cc', payload={'url': 'https://infoveave-help.pages.dev/automation-v8/activities/send-email/', 'title': 'send-email', 'section': 'automation', 'terminologies': ['Infoveave', 'Value'], 'char_count': 3312, 'word_count': 495, 'page_content': 'activity allows you to compose and send emails as part of a workflow. You can configure recipient addresses, subject, body content, and attachments . The activity also supports dynamic emailing using fields from input data, and allows the use of pre-designed Infoveave templates for styling and formatting consistency. Use this activity to:\nSend individual or bulk emails based on incoming data\nAttach files generated in the workflow\nFormat emails using templates for consistency\nEmbed processed data directly into the email body\nUse case\n: A workflow generates a monthly sales report and automatically sends personalized emails to each regional manager with their region’s data attached and included in the body.\nInput\nType\nDescription\nData', 'chunk_index': 1}, vector=None, shard_key=None, order_value=None)]
[ 2025-08-10 22:40:47,734 ] test_main.py:82 root - INFO - Retrieved result for point ID: de5e3b97-dd0f-4d05-8da9-ae3c750c78cc
[ 2025-08-10 22:40:47,734 ] test_main.py:73 root - INFO - (Document(metadata={'_id': '79fddbc7-ebeb-4a13-9afb-02e3c3ec7774', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='(Optional) Tabular data used to populate dynamic fields like email addresses, template content, or attachment grouping.\nOutput\nOutput Type\nFormat\nDescription\nEmail Info\nTable Status of sent emails including recipient, success, and any errors encountered.\nConfiguration Fields\nField Name\nDescription\nConnection\nMail server connection to send emails (OAuth or SMTP supported).\nUse Default Credentials If enabled, uses Infoveave’s default email credentials. Disable to use custom authentication.\nUse Email Address From Data\nIf enabled, pulls recipient addresses from a specified column in the input data.\nEmail Column The column in the data containing the recipient’s email address (required if using email from data).\nEmail To Address\nStatic recipient(s) for the “To” field (comma-separated).\nEmail CC Address Email addresses for the “CC” field (comma-separated).\nEmail BCC Address\nEmail addresses for the “BCC” field.\nSubject\nSubject line of the email. Can be static or mapped from input data.\nContent The main body content of the email. Supports plain text or HTML.\nUse Infoveave Template\nWhen enabled, applies an Infoveave-designed template to the email layout.\nRerun Template Ensures template consistency across multiple emails in the same run.\nAttachment Name\nName of the attachment file (e.g.,\nSalesReport_May2025.xlsx\n).\nSplit By Column Splits data into separate attachments based on values in this column (used in bulk personalization).\nSheet Name\nThe name of the worksheet in the template used for formatting the attachment content.\nSend Data In Email Body If enabled, includes input data as a formatted table within the body of the email.\nAttachment File Pattern\nPattern to identify which files to attach from prior activities (e.g.,\n"*.pdf"\n).\nCombine\nSplit By Column with\nEmail Column\nto send a unique email with corresponding data and attachment per recipient.\nSample Input\nNot applicable\n(used only if sending emails dynamically per row or attaching generated data).\nSample Configuration\nField\nValue'), 0.25)
[ 2025-08-10 22:40:47,812 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-10 22:40:47,812 ] test_main.py:81 root - INFO - [Record(id='79fddbc7-ebeb-4a13-9afb-02e3c3ec7774', payload={'url': 'https://infoveave-help.pages.dev/automation-v8/activities/send-email/', 'title': 'send-email', 'section': 'automation', 'terminologies': ['Infoveave', 'Value'], 'char_count': 3312, 'word_count': 495, 'page_content': '(Optional) Tabular data used to populate dynamic fields like email addresses, template content, or attachment grouping.\nOutput\nOutput Type\nFormat\nDescription\nEmail Info\nTable Status of sent emails including recipient, success, and any errors encountered.\nConfiguration Fields\nField Name\nDescription\nConnection\nMail server connection to send emails (OAuth or SMTP supported).\nUse Default Credentials If enabled, uses Infoveave’s default email credentials. Disable to use custom authentication.\nUse Email Address From Data\nIf enabled, pulls recipient addresses from a specified column in the input data.\nEmail Column The column in the data containing the recipient’s email address (required if using email from data).\nEmail To Address\nStatic recipient(s) for the “To” field (comma-separated).\nEmail CC Address Email addresses for the “CC” field (comma-separated).\nEmail BCC Address\nEmail addresses for the “BCC” field.\nSubject\nSubject line of the email. Can be static or mapped from input data.\nContent The main body content of the email. Supports plain text or HTML.\nUse Infoveave Template\nWhen enabled, applies an Infoveave-designed template to the email layout.\nRerun Template Ensures template consistency across multiple emails in the same run.\nAttachment Name\nName of the attachment file (e.g.,\nSalesReport_May2025.xlsx\n).\nSplit By Column Splits data into separate attachments based on values in this column (used in bulk personalization).\nSheet Name\nThe name of the worksheet in the template used for formatting the attachment content.\nSend Data In Email Body If enabled, includes input data as a formatted table within the body of the email.\nAttachment File Pattern\nPattern to identify which files to attach from prior activities (e.g.,\n"*.pdf"\n).\nCombine\nSplit By Column with\nEmail Column\nto send a unique email with corresponding data and attachment per recipient.\nSample Input\nNot applicable\n(used only if sending emails dynamically per row or attaching generated data).\nSample Configuration\nField\nValue', 'chunk_index': 2}, vector=None, shard_key=None, order_value=None)]
[ 2025-08-10 22:40:47,813 ] test_main.py:82 root - INFO - Retrieved result for point ID: 79fddbc7-ebeb-4a13-9afb-02e3c3ec7774
[ 2025-08-10 22:40:47,813 ] test_main.py:73 root - INFO - (Document(metadata={'_id': 'ea0e4e86-0f23-462b-a182-48cedad8fdd9', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='2025-07-01T10:05:00Z\njohn@example.com\nWelcome Email\n18KB\nonboarding\nev1235\nopened\n2025-07-01T10:08:00Z jane@example.com\nPromo Offer\n22KB\npromotions\nFor\nMessages\nEntity (JSON):\n{\n"headers"\n: {\n"message-id"\n:\n"\n<abc@mailgun.org>'), 0.2)
[ 2025-08-10 22:40:47,882 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-10 22:40:47,883 ] test_main.py:81 root - INFO - [Record(id='ea0e4e86-0f23-462b-a182-48cedad8fdd9', payload={'url': 'https://infoveave-help.pages.dev/automation-v8/activities/mailgun/', 'title': 'mailgun', 'section': 'automation', 'terminologies': ['Infoveave', 'Tags', 'Value', 'Workflows'], 'char_count': 3213, 'word_count': 485, 'page_content': '2025-07-01T10:05:00Z\njohn@example.com\nWelcome Email\n18KB\nonboarding\nev1235\nopened\n2025-07-01T10:08:00Z jane@example.com\nPromo Offer\n22KB\npromotions\nFor\nMessages\nEntity (JSON):\n{\n"headers"\n: {\n"message-id"\n:\n"\n<abc@mailgun.org>', 'chunk_index': 3}, vector=None, shard_key=None, order_value=None)]
[ 2025-08-10 22:40:47,883 ] test_main.py:82 root - INFO - Retrieved result for point ID: ea0e4e86-0f23-462b-a182-48cedad8fdd9
[ 2025-08-10 22:40:47,883 ] test_main.py:73 root - INFO - (Document(metadata={'_id': 'b6d38099-c9de-471f-973c-0f9d734b02ec', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='Activity Step\nReplaced Values\nSendEmail_12345\nStep 1\nCustomerName: John Doe\nSendEmail_67890\nStep 2\nCustomerName: Jane Smith'), 0.16666667)
[ 2025-08-10 22:40:47,938 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-10 22:40:47,939 ] test_main.py:81 root - INFO - [Record(id='b6d38099-c9de-471f-973c-0f9d734b02ec', payload={'url': 'https://infoveave-help.pages.dev/automation-v8/activities/start-iteration/', 'title': 'start-iteration', 'section': 'automation', 'terminologies': ['Infoveave', 'Value'], 'char_count': 2180, 'word_count': 314, 'page_content': 'Activity Step\nReplaced Values\nSendEmail_12345\nStep 1\nCustomerName: John Doe\nSendEmail_67890\nStep 2\nCustomerName: Jane Smith', 'chunk_index': 2}, vector=None, shard_key=None, order_value=None)]
[ 2025-08-10 22:40:47,939 ] test_main.py:82 root - INFO - Retrieved result for point ID: b6d38099-c9de-471f-973c-0f9d734b02ec
[ 2025-08-10 22:40:47,939 ] test_main.py:182 root - INFO - Loaded rewritten query user prompt.
[ 2025-08-10 22:40:49,578 ] _client.py:1025 httpx - INFO - HTTP Request: POST https://api.groq.com/openai/v1/chat/completions "HTTP/1.1 200 OK"
[ 2025-08-10 22:40:49,578 ] test_main.py:324 root - INFO - Response for query part 2: The **Send Email** activity in Infoveave allows you to compose and send emails as part of a workflow. 

You can configure recipient addresses, subject, body content, and attachments. The activity also supports dynamic emailing using fields from input data, and allows the use of pre-designed Infoveave templates for styling and formatting consistency. 

Here's a breakdown of how it works:

**Use Cases:**

* Send individual or bulk emails based on incoming data
* Attach files generated in the workflow
* Format emails using templates for consistency
* Embed processed data directly into the email body

**Input:**

* **Data:** (Optional) Tabular data used to populate dynamic fields like email addresses, template content, or attachment grouping.

**Output:**

* **Email Info:** Table Status of sent emails including recipient, success, and any errors encountered.

**Configuration Fields:**

* **Connection:** Mail server connection to send emails (OAuth or SMTP supported).
* **Use Default Credentials:** If enabled, uses Infoveave’s default email credentials. Disable to use custom authentication.
* **Use Email Address From Data:** If enabled, pulls recipient addresses from a specified column in the input data.
* **Email Column:** The column in the data containing the recipient’s email address (required if using email from data).
* **Email To Address:** Static recipient(s) for the “To” field (comma-separated).
* **Email CC Address:** Email addresses for the “CC” field (comma-separated).
* **Email BCC Address:** Email addresses for the “BCC” field.
* **Subject:** Subject line of the email. Can be static or mapped from input data.
* **Content:** The main body content of the email. Supports plain text or HTML.
* **Use Infoveave Template:** When enabled, applies an Infoveave-designed template to the email layout.
* **Rerun Template:** Ensures template consistency across multiple emails in the same run.
* **Attachment Name:** Name of the attachment file (e.g., SalesReport_May2025.xlsx).
* **Split By Column:** Splits data into separate attachments based on values in this column (used in bulk personalization).
* **Sheet Name:** The name of the worksheet in the template used for formatting the attachment content.
* **Send Data In Email Body:** If enabled, includes input data as a formatted table within the body of the email.
* **Attachment File Pattern:** Pattern to identify which files to attach from prior activities (e.g., "*.pdf").

**Combining Features:**

You can combine `Split By Column` with `Email Column` to send a unique email with corresponding data and attachment per recipient.
[ 2025-08-10 22:40:49,578 ] test_main.py:327 root - INFO - [(Document(metadata={'_id': 'b0c2000b-2a94-480e-8ade-5ccb489ed9ea', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='Send Email | Infoveave Help\nSkip to content\nSend Email\nDescription\nThe\nSend Email'), 0.5), (Document(metadata={'_id': 'de5e3b97-dd0f-4d05-8da9-ae3c750c78cc', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='activity allows you to compose and send emails as part of a workflow. You can configure recipient addresses, subject, body content, and attachments . The activity also supports dynamic emailing using fields from input data, and allows the use of pre-designed Infoveave templates for styling and formatting consistency. Use this activity to:\nSend individual or bulk emails based on incoming data\nAttach files generated in the workflow\nFormat emails using templates for consistency\nEmbed processed data directly into the email body\nUse case\n: A workflow generates a monthly sales report and automatically sends personalized emails to each regional manager with their region’s data attached and included in the body.\nInput\nType\nDescription\nData'), 0.33333334), (Document(metadata={'_id': '79fddbc7-ebeb-4a13-9afb-02e3c3ec7774', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='(Optional) Tabular data used to populate dynamic fields like email addresses, template content, or attachment grouping.\nOutput\nOutput Type\nFormat\nDescription\nEmail Info\nTable Status of sent emails including recipient, success, and any errors encountered.\nConfiguration Fields\nField Name\nDescription\nConnection\nMail server connection to send emails (OAuth or SMTP supported).\nUse Default Credentials If enabled, uses Infoveave’s default email credentials. Disable to use custom authentication.\nUse Email Address From Data\nIf enabled, pulls recipient addresses from a specified column in the input data.\nEmail Column The column in the data containing the recipient’s email address (required if using email from data).\nEmail To Address\nStatic recipient(s) for the “To” field (comma-separated).\nEmail CC Address Email addresses for the “CC” field (comma-separated).\nEmail BCC Address\nEmail addresses for the “BCC” field.\nSubject\nSubject line of the email. Can be static or mapped from input data.\nContent The main body content of the email. Supports plain text or HTML.\nUse Infoveave Template\nWhen enabled, applies an Infoveave-designed template to the email layout.\nRerun Template Ensures template consistency across multiple emails in the same run.\nAttachment Name\nName of the attachment file (e.g.,\nSalesReport_May2025.xlsx\n).\nSplit By Column Splits data into separate attachments based on values in this column (used in bulk personalization).\nSheet Name\nThe name of the worksheet in the template used for formatting the attachment content.\nSend Data In Email Body If enabled, includes input data as a formatted table within the body of the email.\nAttachment File Pattern\nPattern to identify which files to attach from prior activities (e.g.,\n"*.pdf"\n).\nCombine\nSplit By Column with\nEmail Column\nto send a unique email with corresponding data and attachment per recipient.\nSample Input\nNot applicable\n(used only if sending emails dynamically per row or attaching generated data).\nSample Configuration\nField\nValue'), 0.25), (Document(metadata={'_id': 'ea0e4e86-0f23-462b-a182-48cedad8fdd9', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='2025-07-01T10:05:00Z\njohn@example.com\nWelcome Email\n18KB\nonboarding\nev1235\nopened\n2025-07-01T10:08:00Z jane@example.com\nPromo Offer\n22KB\npromotions\nFor\nMessages\nEntity (JSON):\n{\n"headers"\n: {\n"message-id"\n:\n"\n<abc@mailgun.org>'), 0.2), (Document(metadata={'_id': 'b6d38099-c9de-471f-973c-0f9d734b02ec', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='Activity Step\nReplaced Values\nSendEmail_12345\nStep 1\nCustomerName: John Doe\nSendEmail_67890\nStep 2\nCustomerName: Jane Smith'), 0.16666667)]
[ 2025-08-10 22:40:49,587 ] test_main.py:71 root - INFO - Building context with metadata from documents...
[ 2025-08-10 22:40:49,587 ] test_main.py:73 root - INFO - (Document(metadata={'_id': 'b0c2000b-2a94-480e-8ade-5ccb489ed9ea', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='Send Email | Infoveave Help\nSkip to content\nSend Email\nDescription\nThe\nSend Email'), 0.5)
[ 2025-08-10 22:40:49,637 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-10 22:40:49,637 ] test_main.py:81 root - INFO - [Record(id='b0c2000b-2a94-480e-8ade-5ccb489ed9ea', payload={'url': 'https://infoveave-help.pages.dev/automation-v8/activities/send-email/', 'title': 'send-email', 'section': 'automation', 'terminologies': ['Infoveave', 'Value'], 'char_count': 3312, 'word_count': 495, 'page_content': 'Send Email | Infoveave Help\nSkip to content\nSend Email\nDescription\nThe\nSend Email', 'chunk_index': 0}, vector=None, shard_key=None, order_value=None)]
[ 2025-08-10 22:40:49,637 ] test_main.py:82 root - INFO - Retrieved result for point ID: b0c2000b-2a94-480e-8ade-5ccb489ed9ea
[ 2025-08-10 22:40:49,637 ] test_main.py:73 root - INFO - (Document(metadata={'_id': 'de5e3b97-dd0f-4d05-8da9-ae3c750c78cc', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='activity allows you to compose and send emails as part of a workflow. You can configure recipient addresses, subject, body content, and attachments . The activity also supports dynamic emailing using fields from input data, and allows the use of pre-designed Infoveave templates for styling and formatting consistency. Use this activity to:\nSend individual or bulk emails based on incoming data\nAttach files generated in the workflow\nFormat emails using templates for consistency\nEmbed processed data directly into the email body\nUse case\n: A workflow generates a monthly sales report and automatically sends personalized emails to each regional manager with their region’s data attached and included in the body.\nInput\nType\nDescription\nData'), 0.33333334)
[ 2025-08-10 22:40:49,694 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-10 22:40:49,694 ] test_main.py:81 root - INFO - [Record(id='de5e3b97-dd0f-4d05-8da9-ae3c750c78cc', payload={'url': 'https://infoveave-help.pages.dev/automation-v8/activities/send-email/', 'title': 'send-email', 'section': 'automation', 'terminologies': ['Infoveave', 'Value'], 'char_count': 3312, 'word_count': 495, 'page_content': 'activity allows you to compose and send emails as part of a workflow. You can configure recipient addresses, subject, body content, and attachments . The activity also supports dynamic emailing using fields from input data, and allows the use of pre-designed Infoveave templates for styling and formatting consistency. Use this activity to:\nSend individual or bulk emails based on incoming data\nAttach files generated in the workflow\nFormat emails using templates for consistency\nEmbed processed data directly into the email body\nUse case\n: A workflow generates a monthly sales report and automatically sends personalized emails to each regional manager with their region’s data attached and included in the body.\nInput\nType\nDescription\nData', 'chunk_index': 1}, vector=None, shard_key=None, order_value=None)]
[ 2025-08-10 22:40:49,694 ] test_main.py:82 root - INFO - Retrieved result for point ID: de5e3b97-dd0f-4d05-8da9-ae3c750c78cc
[ 2025-08-10 22:40:49,694 ] test_main.py:73 root - INFO - (Document(metadata={'_id': '79fddbc7-ebeb-4a13-9afb-02e3c3ec7774', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='(Optional) Tabular data used to populate dynamic fields like email addresses, template content, or attachment grouping.\nOutput\nOutput Type\nFormat\nDescription\nEmail Info\nTable Status of sent emails including recipient, success, and any errors encountered.\nConfiguration Fields\nField Name\nDescription\nConnection\nMail server connection to send emails (OAuth or SMTP supported).\nUse Default Credentials If enabled, uses Infoveave’s default email credentials. Disable to use custom authentication.\nUse Email Address From Data\nIf enabled, pulls recipient addresses from a specified column in the input data.\nEmail Column The column in the data containing the recipient’s email address (required if using email from data).\nEmail To Address\nStatic recipient(s) for the “To” field (comma-separated).\nEmail CC Address Email addresses for the “CC” field (comma-separated).\nEmail BCC Address\nEmail addresses for the “BCC” field.\nSubject\nSubject line of the email. Can be static or mapped from input data.\nContent The main body content of the email. Supports plain text or HTML.\nUse Infoveave Template\nWhen enabled, applies an Infoveave-designed template to the email layout.\nRerun Template Ensures template consistency across multiple emails in the same run.\nAttachment Name\nName of the attachment file (e.g.,\nSalesReport_May2025.xlsx\n).\nSplit By Column Splits data into separate attachments based on values in this column (used in bulk personalization).\nSheet Name\nThe name of the worksheet in the template used for formatting the attachment content.\nSend Data In Email Body If enabled, includes input data as a formatted table within the body of the email.\nAttachment File Pattern\nPattern to identify which files to attach from prior activities (e.g.,\n"*.pdf"\n).\nCombine\nSplit By Column with\nEmail Column\nto send a unique email with corresponding data and attachment per recipient.\nSample Input\nNot applicable\n(used only if sending emails dynamically per row or attaching generated data).\nSample Configuration\nField\nValue'), 0.25)
[ 2025-08-10 22:40:49,754 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-10 22:40:49,758 ] test_main.py:81 root - INFO - [Record(id='79fddbc7-ebeb-4a13-9afb-02e3c3ec7774', payload={'url': 'https://infoveave-help.pages.dev/automation-v8/activities/send-email/', 'title': 'send-email', 'section': 'automation', 'terminologies': ['Infoveave', 'Value'], 'char_count': 3312, 'word_count': 495, 'page_content': '(Optional) Tabular data used to populate dynamic fields like email addresses, template content, or attachment grouping.\nOutput\nOutput Type\nFormat\nDescription\nEmail Info\nTable Status of sent emails including recipient, success, and any errors encountered.\nConfiguration Fields\nField Name\nDescription\nConnection\nMail server connection to send emails (OAuth or SMTP supported).\nUse Default Credentials If enabled, uses Infoveave’s default email credentials. Disable to use custom authentication.\nUse Email Address From Data\nIf enabled, pulls recipient addresses from a specified column in the input data.\nEmail Column The column in the data containing the recipient’s email address (required if using email from data).\nEmail To Address\nStatic recipient(s) for the “To” field (comma-separated).\nEmail CC Address Email addresses for the “CC” field (comma-separated).\nEmail BCC Address\nEmail addresses for the “BCC” field.\nSubject\nSubject line of the email. Can be static or mapped from input data.\nContent The main body content of the email. Supports plain text or HTML.\nUse Infoveave Template\nWhen enabled, applies an Infoveave-designed template to the email layout.\nRerun Template Ensures template consistency across multiple emails in the same run.\nAttachment Name\nName of the attachment file (e.g.,\nSalesReport_May2025.xlsx\n).\nSplit By Column Splits data into separate attachments based on values in this column (used in bulk personalization).\nSheet Name\nThe name of the worksheet in the template used for formatting the attachment content.\nSend Data In Email Body If enabled, includes input data as a formatted table within the body of the email.\nAttachment File Pattern\nPattern to identify which files to attach from prior activities (e.g.,\n"*.pdf"\n).\nCombine\nSplit By Column with\nEmail Column\nto send a unique email with corresponding data and attachment per recipient.\nSample Input\nNot applicable\n(used only if sending emails dynamically per row or attaching generated data).\nSample Configuration\nField\nValue', 'chunk_index': 2}, vector=None, shard_key=None, order_value=None)]
[ 2025-08-10 22:40:49,758 ] test_main.py:82 root - INFO - Retrieved result for point ID: 79fddbc7-ebeb-4a13-9afb-02e3c3ec7774
[ 2025-08-10 22:40:49,758 ] test_main.py:73 root - INFO - (Document(metadata={'_id': 'ea0e4e86-0f23-462b-a182-48cedad8fdd9', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='2025-07-01T10:05:00Z\njohn@example.com\nWelcome Email\n18KB\nonboarding\nev1235\nopened\n2025-07-01T10:08:00Z jane@example.com\nPromo Offer\n22KB\npromotions\nFor\nMessages\nEntity (JSON):\n{\n"headers"\n: {\n"message-id"\n:\n"\n<abc@mailgun.org>'), 0.2)
[ 2025-08-10 22:40:49,822 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-10 22:40:49,822 ] test_main.py:81 root - INFO - [Record(id='ea0e4e86-0f23-462b-a182-48cedad8fdd9', payload={'url': 'https://infoveave-help.pages.dev/automation-v8/activities/mailgun/', 'title': 'mailgun', 'section': 'automation', 'terminologies': ['Infoveave', 'Tags', 'Value', 'Workflows'], 'char_count': 3213, 'word_count': 485, 'page_content': '2025-07-01T10:05:00Z\njohn@example.com\nWelcome Email\n18KB\nonboarding\nev1235\nopened\n2025-07-01T10:08:00Z jane@example.com\nPromo Offer\n22KB\npromotions\nFor\nMessages\nEntity (JSON):\n{\n"headers"\n: {\n"message-id"\n:\n"\n<abc@mailgun.org>', 'chunk_index': 3}, vector=None, shard_key=None, order_value=None)]
[ 2025-08-10 22:40:49,822 ] test_main.py:82 root - INFO - Retrieved result for point ID: ea0e4e86-0f23-462b-a182-48cedad8fdd9
[ 2025-08-10 22:40:49,822 ] test_main.py:73 root - INFO - (Document(metadata={'_id': 'b6d38099-c9de-471f-973c-0f9d734b02ec', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='Activity Step\nReplaced Values\nSendEmail_12345\nStep 1\nCustomerName: John Doe\nSendEmail_67890\nStep 2\nCustomerName: Jane Smith'), 0.16666667)
[ 2025-08-10 22:40:49,892 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-10 22:40:49,892 ] test_main.py:81 root - INFO - [Record(id='b6d38099-c9de-471f-973c-0f9d734b02ec', payload={'url': 'https://infoveave-help.pages.dev/automation-v8/activities/start-iteration/', 'title': 'start-iteration', 'section': 'automation', 'terminologies': ['Infoveave', 'Value'], 'char_count': 2180, 'word_count': 314, 'page_content': 'Activity Step\nReplaced Values\nSendEmail_12345\nStep 1\nCustomerName: John Doe\nSendEmail_67890\nStep 2\nCustomerName: Jane Smith', 'chunk_index': 2}, vector=None, shard_key=None, order_value=None)]
[ 2025-08-10 22:40:49,892 ] test_main.py:82 root - INFO - Retrieved result for point ID: b6d38099-c9de-471f-973c-0f9d734b02ec
[ 2025-08-10 22:40:49,892 ] test_main.py:347 root - INFO - Found 2 final documents.
[ 2025-08-10 22:40:49,892 ] test_main.py:348 root - INFO - Context prepared for LLM response.
[ 2025-08-10 22:40:49,906 ] test_main.py:376 root - INFO - Generating final answer using LLM...
[ 2025-08-10 22:40:51,517 ] _client.py:1025 httpx - INFO - HTTP Request: POST https://api.groq.com/openai/v1/chat/completions "HTTP/1.1 200 OK"
[ 2025-08-10 22:40:51,519 ] test_main.py:378 root - INFO - Final LLM Response:

[ 2025-08-10 22:40:51,520 ] test_main.py:379 root - INFO - Let's break down how to create a workflow in Infoveave to run an Oracle DB query and send the results as an email report.

**1. The Execute Query Activity**

The **Execute Query** activity is your starting point. It allows you to fetch data directly from your Oracle database.

* **Connection:** You'll need to establish a connection to your Oracle database within Infoveave. This involves providing connection details like the database server address, port, username, and password.

* **Query:**  Craft your SQL query to retrieve the specific data you want to include in your report. For example:

   ```sql
   SELECT customer_name, order_date, total_amount
   FROM orders
   WHERE order_date BETWEEN '2023-01-01' AND '2023-12-31';
   ```

* **Output:** The Execute Query activity returns the results of your query as a tabular data structure. This data will be used as input for the Send Email activity.

**2. The Send Email Activity**

The **Send Email** activity takes the data from the Execute Query activity and formats it into an email report.

* **Connection:**  Configure the Send Email activity to use your preferred email service. Infoveave supports various options like OAuth connections to Gmail or Outlook, or SMTP connections for self-hosted email servers.

* **Recipient:** Specify the email address(es) you want to send the report to. You can use a static email address or dynamically pull recipient addresses from your input data.

* **Subject:**  Set a clear and concise subject line for your email report.

* **Content:**  You can either:
    * **Use a Template:**  Infoveave offers pre-designed email templates to ensure consistent formatting and branding.
    * **Write Custom Content:**  Manually write the email body, including placeholders to insert data from the Execute Query activity.

* **Attachments:**  If you want to include the raw query results as a file attachment, you can configure the Send Email activity to attach the output from the Execute Query activity.

**Putting It Together**

1. **Create a New Workflow:** In Infoveave, start a new workflow.

2. **Add the Execute Query Activity:** Drag and drop the "Execute Query" activity onto the workflow canvas. Configure the connection to your Oracle database and paste your SQL query.

3. **Add the Send Email Activity:**  Drag and drop the "Send Email" activity after the Execute Query activity.

4. **Connect the Activities:**  Link the output of the Execute Query activity to the input of the Send Email activity. This will pass the query results to the email activity.

5. **Configure the Send Email Activity:**  Set the recipient, subject, content, and any attachments as needed.

6. **Test and Deploy:**  Test your workflow thoroughly to ensure it runs as expected. Once you're satisfied, deploy it to automate your report generation and email delivery.



Let me know if you have any more questions or would like help with specific aspects of configuring these activities!

[ 2025-08-10 22:40:51,521 ] test_main.py:386 root - INFO - LLM response saved to ./data/results/infoverve_helper_response.md
[ 2025-08-10 22:50:58,976 ] test_main.py:194 root - INFO - .........................Starting Infoverve Helper Application.........................
[ 2025-08-10 22:50:58,977 ] test_main.py:210 root - INFO - GROQ_API_KEY loaded.
[ 2025-08-10 22:50:59,001 ] test_main.py:234 root - INFO - Embedding model initialized.
[ 2025-08-10 22:50:59,217 ] _client.py:1025 httpx - INFO - HTTP Request: GET http://ai.infoveave.cloud:6333 "HTTP/1.1 200 OK"
[ 2025-08-10 22:50:59,223 ] test_main.py:238 root - INFO - Connected to Qdrant.
[ 2025-08-10 22:50:59,346 ] _client.py:1025 httpx - INFO - HTTP Request: GET http://ai.infoveave.cloud:6333/collections "HTTP/1.1 200 OK"
[ 2025-08-10 22:50:59,349 ] test_main.py:242 root - INFO - Qdrant collections retrieved.
[ 2025-08-10 22:50:59,349 ] test_main.py:249 root - INFO - Using collection: infoverve_helper_docs_hybrid
[ 2025-08-10 22:51:00,781 ] test_main.py:252 root - INFO - Sparse embeddings initialized.
[ 2025-08-10 22:51:00,850 ] _client.py:1025 httpx - INFO - HTTP Request: GET http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid "HTTP/1.1 200 OK"
[ 2025-08-10 22:51:03,429 ] _client.py:1025 httpx - INFO - HTTP Request: GET http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid "HTTP/1.1 200 OK"
[ 2025-08-10 22:51:03,430 ] test_main.py:264 root - INFO - QdrantVectorStore initialized.
[ 2025-08-10 22:51:03,467 ] test_main.py:270 root - INFO - LLM initialized.
[ 2025-08-10 22:51:04,132 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points/query "HTTP/1.1 200 OK"
[ 2025-08-10 22:51:05,035 ] test_main.py:292 root - INFO - Original query embedding generated.
[ 2025-08-10 22:51:05,056 ] test_main.py:71 root - INFO - Building context with metadata from documents...
[ 2025-08-10 22:51:05,056 ] test_main.py:73 root - INFO - (Document(metadata={'_id': '2a6c9297-ff5a-4139-bb0d-e87f53ace134', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content="Upload transformed file to destination database\nSetup the 'Oracle' connection, specify tables, and map columns\nSetup automated workflow summary notification\nEnable 'Send Workflow Summary' for email notifications on automated workflow execution\nSchedule and monitor  workflows Schedule or setup 'Webhooks' and 'Emails' to trigger workflows\nDone"), 0.5)
[ 2025-08-10 22:51:05,113 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-10 22:51:05,118 ] test_main.py:81 root - INFO - [Record(id='2a6c9297-ff5a-4139-bb0d-e87f53ace134', payload={'url': 'https://infoveave-help.pages.dev/journey/automate-workflows/', 'title': 'automate-workflows', 'section': 'automation', 'terminologies': ['Connections', 'Data Transformation', 'Infoveave', 'Workflows'], 'char_count': 978, 'word_count': 139, 'page_content': "Upload transformed file to destination database\nSetup the 'Oracle' connection, specify tables, and map columns\nSetup automated workflow summary notification\nEnable 'Send Workflow Summary' for email notifications on automated workflow execution\nSchedule and monitor  workflows Schedule or setup 'Webhooks' and 'Emails' to trigger workflows\nDone", 'chunk_index': 2}, vector=None, shard_key=None, order_value=None)]
[ 2025-08-10 22:51:05,118 ] test_main.py:82 root - INFO - Retrieved result for point ID: 2a6c9297-ff5a-4139-bb0d-e87f53ace134
[ 2025-08-10 22:51:05,119 ] test_main.py:73 root - INFO - (Document(metadata={'_id': 'df9d15c4-2094-450f-95e6-162e03d5828a', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='Creating Infoboard Using A Query\nCreate Infoboard Using A Query\nCreating Infoboard Using API\nCreate Infoboard Using API\nCreating Workflow in Infoveave\nCreating Workflows\nWorkflow Execution Status\nWorkflow Execution Status'), 0.33333334)
[ 2025-08-10 22:51:05,191 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-10 22:51:05,192 ] test_main.py:81 root - INFO - [Record(id='df9d15c4-2094-450f-95e6-162e03d5828a', payload={'url': 'https://infoveave-help.pages.dev/videos/', 'title': 'videos', 'section': 'videos', 'terminologies': ['Automation', 'Catalogues', 'Conditional Expressions', 'Custom Calendar', 'Datasources', 'Dimensions', 'Infoboards', 'Infoveave', 'Insights', 'Lists', 'Measures', 'My Organization', 'My Workspace', 'Query', 'Reports', 'SciPyR', 'What-If Analysis', 'What-If Formulae', 'Workflows', 'Workflow Execution Status'], 'char_count': 2430, 'word_count': 338, 'page_content': 'Creating Infoboard Using A Query\nCreate Infoboard Using A Query\nCreating Infoboard Using API\nCreate Infoboard Using API\nCreating Workflow in Infoveave\nCreating Workflows\nWorkflow Execution Status\nWorkflow Execution Status', 'chunk_index': 3}, vector=None, shard_key=None, order_value=None)]
[ 2025-08-10 22:51:05,192 ] test_main.py:82 root - INFO - Retrieved result for point ID: df9d15c4-2094-450f-95e6-162e03d5828a
[ 2025-08-10 22:51:05,192 ] test_main.py:73 root - INFO - (Document(metadata={'_id': '323c1ea3-b288-44b0-8825-475a23907e9f', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='Workflow Designer\ncanvas.\nTo add alerts that send email notifications during the workflow, go to the\nAlerts\ntab in the\nWorkflow Setup panel\n.\nToggle\nEnable\nto turn the alert on or off. Select recipient email addresses from the user list. You can choose multiple recipients.\nWrite a custom alert message that is sent when the condition is met.\nWhen setting an execution time alert, toggle\nUse Absolute Time'), 0.25)
[ 2025-08-10 22:51:05,246 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-10 22:51:05,247 ] test_main.py:81 root - INFO - [Record(id='323c1ea3-b288-44b0-8825-475a23907e9f', payload={'url': 'https://infoveave-help.pages.dev/automation-v8/jobs-v8/create-new-job/', 'title': 'create-new-job', 'section': 'automation', 'terminologies': ['Alerts', 'Automation', 'Infoveave', 'Measures', 'Query', 'Query Report', 'Value', 'Variables', 'View', 'View', 'Workflows'], 'char_count': 4476, 'word_count': 722, 'page_content': 'Workflow Designer\ncanvas.\nTo add alerts that send email notifications during the workflow, go to the\nAlerts\ntab in the\nWorkflow Setup panel\n.\nToggle\nEnable\nto turn the alert on or off. Select recipient email addresses from the user list. You can choose multiple recipients.\nWrite a custom alert message that is sent when the condition is met.\nWhen setting an execution time alert, toggle\nUse Absolute Time', 'chunk_index': 4}, vector=None, shard_key=None, order_value=None)]
[ 2025-08-10 22:51:05,247 ] test_main.py:82 root - INFO - Retrieved result for point ID: 323c1ea3-b288-44b0-8825-475a23907e9f
[ 2025-08-10 22:51:05,247 ] test_main.py:73 root - INFO - (Document(metadata={'_id': '65e3aa33-13d7-4688-98fd-7b6a24cbf91e', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='Workflow Designer\ncanvas.\nTo add alerts that send email notifications during the workflow, go to the\nAlerts\ntab in the\nWorkflow Setup panel\n.\nToggle\nEnable\nto turn the alert on or off. Select recipient email addresses from the user list. You can choose multiple recipients.\nWrite a custom alert message that is sent when the condition is met.\nWhen setting an execution time alert, toggle\nUse Absolute Time'), 0.2)
[ 2025-08-10 22:51:05,303 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-10 22:51:05,304 ] test_main.py:81 root - INFO - [Record(id='65e3aa33-13d7-4688-98fd-7b6a24cbf91e', payload={'url': 'https://infoveave-help.pages.dev/automation-v8/workflows/define-workflow/', 'title': 'define-workflow', 'section': 'automation', 'terminologies': ['Alerts', 'Automation', 'Infoveave', 'Measures', 'Query', 'Query Report', 'Value', 'Variables', 'View', 'View', 'Workflows'], 'char_count': 4476, 'word_count': 722, 'page_content': 'Workflow Designer\ncanvas.\nTo add alerts that send email notifications during the workflow, go to the\nAlerts\ntab in the\nWorkflow Setup panel\n.\nToggle\nEnable\nto turn the alert on or off. Select recipient email addresses from the user list. You can choose multiple recipients.\nWrite a custom alert message that is sent when the condition is met.\nWhen setting an execution time alert, toggle\nUse Absolute Time', 'chunk_index': 4}, vector=None, shard_key=None, order_value=None)]
[ 2025-08-10 22:51:05,304 ] test_main.py:82 root - INFO - Retrieved result for point ID: 65e3aa33-13d7-4688-98fd-7b6a24cbf91e
[ 2025-08-10 22:51:05,304 ] test_main.py:73 root - INFO - (Document(metadata={'_id': '2027003d-7c4e-4b6d-acd3-b391a775ae9a', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='Workflow Alerts | Infoveave Help\nSkip to content\nWorkflow Alerts'), 0.16666667)
[ 2025-08-10 22:51:05,379 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-10 22:51:05,380 ] test_main.py:81 root - INFO - [Record(id='2027003d-7c4e-4b6d-acd3-b391a775ae9a', payload={'url': 'https://infoveave-help.pages.dev/automation-v8/workflows/define-workflow/workflow-alerts-2/', 'title': 'workflow-alerts-2', 'section': 'automation', 'terminologies': ['Alerts', 'Infoveave', 'Workflows', 'Workflow Alerts'], 'char_count': 3832, 'word_count': 620, 'page_content': 'Workflow Alerts | Infoveave Help\nSkip to content\nWorkflow Alerts', 'chunk_index': 0}, vector=None, shard_key=None, order_value=None)]
[ 2025-08-10 22:51:05,380 ] test_main.py:82 root - INFO - Retrieved result for point ID: 2027003d-7c4e-4b6d-acd3-b391a775ae9a
[ 2025-08-10 22:51:05,380 ] test_main.py:73 root - INFO - (Document(metadata={'_id': '81a7ef81-eb12-4bcd-ad2e-403f547e7e50', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='Choose the days on which you want to execute the Workflow. By default, Infoveave sets it to every day. You can select specific days of the week, days of the month, or months.\nClick on the\nAdd'), 0.14285715)
[ 2025-08-10 22:51:05,449 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-10 22:51:05,450 ] test_main.py:81 root - INFO - [Record(id='81a7ef81-eb12-4bcd-ad2e-403f547e7e50', payload={'url': 'https://infoveave-help.pages.dev/automation-v8/jobs-v8/schedule-job/', 'title': 'schedule-job', 'section': 'automation', 'terminologies': ['Automation', 'Cron trigger', 'Emailhook trigger', 'Infoveave', 'Lists', 'Reports', 'Value', 'View', 'View', 'Webhook trigger', 'Workflows', 'Workflow Start trigger'], 'char_count': 5699, 'word_count': 937, 'page_content': 'Choose the days on which you want to execute the Workflow. By default, Infoveave sets it to every day. You can select specific days of the week, days of the month, or months.\nClick on the\nAdd', 'chunk_index': 5}, vector=None, shard_key=None, order_value=None)]
[ 2025-08-10 22:51:05,450 ] test_main.py:82 root - INFO - Retrieved result for point ID: 81a7ef81-eb12-4bcd-ad2e-403f547e7e50
[ 2025-08-10 22:51:05,450 ] test_main.py:73 root - INFO - (Document(metadata={'_id': '3989b1ef-a79d-4b1d-bce6-79cb5969aa26', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='Choose the days on which you want to execute the Workflow. By default, Infoveave sets it to every day. You can select specific days of the week, days of the month, or months.\nClick on the\nAdd'), 0.125)
[ 2025-08-10 22:51:05,511 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-10 22:51:05,512 ] test_main.py:81 root - INFO - [Record(id='3989b1ef-a79d-4b1d-bce6-79cb5969aa26', payload={'url': 'https://infoveave-help.pages.dev/automation-v8/workflows/define-workflow/workflow-start/', 'title': 'workflow-start', 'section': 'automation', 'terminologies': ['Automation', 'Cron trigger', 'Emailhook trigger', 'Infoveave', 'Lists', 'Reports', 'Value', 'View', 'View', 'Webhook trigger', 'Workflows', 'Workflow Start trigger'], 'char_count': 5699, 'word_count': 937, 'page_content': 'Choose the days on which you want to execute the Workflow. By default, Infoveave sets it to every day. You can select specific days of the week, days of the month, or months.\nClick on the\nAdd', 'chunk_index': 5}, vector=None, shard_key=None, order_value=None)]
[ 2025-08-10 22:51:05,512 ] test_main.py:82 root - INFO - Retrieved result for point ID: 3989b1ef-a79d-4b1d-bce6-79cb5969aa26
[ 2025-08-10 22:51:05,512 ] test_main.py:73 root - INFO - (Document(metadata={'_id': '3fd7ab5c-2d29-41ea-9ed7-0684f87b08e1', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='Add FTP Download Activity\n0:21\nConfigure FTP Download Activity\n0:31\nAdd Read Excel Files Activity\n0:35\nAdd Transform Activity using Javascript\n0:40\nAdd Round Numbers Activity\n0:46 Add Remove Duplicate Rows Activity\n0:52\nAdd Drop Columns Activity\n0:56\nAdd Rename Columns Activity\n1:01\nAdd Upload to Datasource Activity\n1:08\nExecute the Workflow and View Instance History'), 0.11111111)
[ 2025-08-10 22:51:05,585 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-10 22:51:05,586 ] test_main.py:81 root - INFO - [Record(id='3fd7ab5c-2d29-41ea-9ed7-0684f87b08e1', payload={'url': 'https://infoveave-help.pages.dev/automation-v8/jobs-v8/create-new-job/', 'title': 'create-new-job', 'section': 'automation', 'terminologies': ['Alerts', 'Automation', 'Infoveave', 'Measures', 'Query', 'Query Report', 'Value', 'Variables', 'View', 'View', 'Workflows'], 'char_count': 4476, 'word_count': 722, 'page_content': 'Add FTP Download Activity\n0:21\nConfigure FTP Download Activity\n0:31\nAdd Read Excel Files Activity\n0:35\nAdd Transform Activity using Javascript\n0:40\nAdd Round Numbers Activity\n0:46 Add Remove Duplicate Rows Activity\n0:52\nAdd Drop Columns Activity\n0:56\nAdd Rename Columns Activity\n1:01\nAdd Upload to Datasource Activity\n1:08\nExecute the Workflow and View Instance History', 'chunk_index': 1}, vector=None, shard_key=None, order_value=None)]
[ 2025-08-10 22:51:05,586 ] test_main.py:82 root - INFO - Retrieved result for point ID: 3fd7ab5c-2d29-41ea-9ed7-0684f87b08e1
[ 2025-08-10 22:51:05,586 ] test_main.py:73 root - INFO - (Document(metadata={'_id': '2adcd9bd-c3f6-41e9-8c27-26f07adfbe4c', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='Add FTP Download Activity\n0:21\nConfigure FTP Download Activity\n0:31\nAdd Read Excel Files Activity\n0:35\nAdd Transform Activity using Javascript\n0:40\nAdd Round Numbers Activity\n0:46 Add Remove Duplicate Rows Activity\n0:52\nAdd Drop Columns Activity\n0:56\nAdd Rename Columns Activity\n1:01\nAdd Upload to Datasource Activity\n1:08\nExecute the Workflow and View Instance History'), 0.1)
[ 2025-08-10 22:51:05,641 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-10 22:51:05,642 ] test_main.py:81 root - INFO - [Record(id='2adcd9bd-c3f6-41e9-8c27-26f07adfbe4c', payload={'url': 'https://infoveave-help.pages.dev/automation-v8/workflows/define-workflow/', 'title': 'define-workflow', 'section': 'automation', 'terminologies': ['Alerts', 'Automation', 'Infoveave', 'Measures', 'Query', 'Query Report', 'Value', 'Variables', 'View', 'View', 'Workflows'], 'char_count': 4476, 'word_count': 722, 'page_content': 'Add FTP Download Activity\n0:21\nConfigure FTP Download Activity\n0:31\nAdd Read Excel Files Activity\n0:35\nAdd Transform Activity using Javascript\n0:40\nAdd Round Numbers Activity\n0:46 Add Remove Duplicate Rows Activity\n0:52\nAdd Drop Columns Activity\n0:56\nAdd Rename Columns Activity\n1:01\nAdd Upload to Datasource Activity\n1:08\nExecute the Workflow and View Instance History', 'chunk_index': 1}, vector=None, shard_key=None, order_value=None)]
[ 2025-08-10 22:51:05,642 ] test_main.py:82 root - INFO - Retrieved result for point ID: 2adcd9bd-c3f6-41e9-8c27-26f07adfbe4c
[ 2025-08-10 22:51:05,642 ] test_main.py:73 root - INFO - (Document(metadata={'_id': 'bfe3c285-ffc2-4551-a19c-a5900bdd0aa3', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='E\nEmailhook trigger The Emailhook trigger initiates a Workflow based on incoming emails. You can set up specific email addresses that serve as Emailhooks. This allows for  automated processing of email-based activities or notifications . This trigger is useful for Workflows that involve email notifications or processing of data received via email.'), 0.09090909)
[ 2025-08-10 22:51:05,701 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-10 22:51:05,742 ] test_main.py:81 root - INFO - [Record(id='bfe3c285-ffc2-4551-a19c-a5900bdd0aa3', payload={'url': 'https://infoveave-help.pages.dev/introduction-to-infoveave/infoveave-terminologies/', 'title': 'infoveave-terminologies', 'section': 'introduction-to-infoveave', 'terminologies': ['Address Book', 'Alerts', 'Audit Log', 'Automation', 'Business Analysis', 'Calculated Columns', 'Calculated Measures', 'Catalogues', 'Client', 'Color Palette', 'Common Dimension filters', 'Component Panel', 'Component', 'Conditional Expressions', 'Connections', 'Control Centre', 'Creator', 'Cron trigger', 'Cube Designer', 'Custom Calendar', 'Custom Email', 'Database Connections', 'Datasources', 'Data Governance', 'Data Ingestion', 'Data Transformation', 'Data Visualization', 'Date Range Filter', 'Designer Canvas', 'Designer Layout', 'Dimensions', 'Domains', 'Emailhook trigger', 'Expression', 'Fixed Filters', 'Grid Layout', 'Hierarchies', 'Holiday Calendar', 'Infoboards', 'Infoboard Setup', 'Infoboard statistics', 'Infoveave', 'Infoveave menu', 'Insights', 'Lists', 'Linked Reports', 'Login statistics', 'Measures', 'ML Analysis', 'ML Model', 'My Organization', 'My Workspace', 'NGuage Forms', 'Query', 'Query Builder', 'Query Report', 'Reports', 'Retention Settings', 'Roles', 'SciPyR', 'Server Statistics', 'SMTP Settings', 'Statistical Analysis', 'Tags', 'Targets and Thresholds', 'Template Reports', 'Tenant', 'Tiers', 'Trash', 'Value', 'Variables', 'Version history', 'View', 'View', 'Viewer', 'Webhook trigger', 'What-If Analysis', 'What-If Formulae', 'Widget Configuration', 'Widget Customization', 'Widget statistics', 'Workflows', 'Workflow Alerts', 'Workflow Execution Status', 'Workflow Start trigger', 'Workflow Variables'], 'char_count': 25220, 'word_count': 3773, 'page_content': 'E\nEmailhook trigger The Emailhook trigger initiates a Workflow based on incoming emails. You can set up specific email addresses that serve as Emailhooks. This allows for  automated processing of email-based activities or notifications . This trigger is useful for Workflows that involve email notifications or processing of data received via email.', 'chunk_index': 13}, vector=None, shard_key=None, order_value=None)]
[ 2025-08-10 22:51:05,743 ] test_main.py:82 root - INFO - Retrieved result for point ID: bfe3c285-ffc2-4551-a19c-a5900bdd0aa3
[ 2025-08-10 22:51:05,743 ] test_main.py:124 root - INFO - Top context prepared for query rewriting.
[ 2025-08-10 22:51:05,743 ] test_main.py:103 root - INFO - Querying Neo4j for entities: ['Workflow Alerts', 'Tenant', 'My Workspace', 'Targets and Thresholds', 'Creator', 'Cron trigger', 'SciPyR', 'Common Dimension filters', 'Workflow Start trigger', 'Workflows', 'NGuage Forms', 'Value', 'Business Analysis', 'Designer Layout', 'Data Transformation', 'Query Report', 'Infoveave menu', 'Query', 'Query Builder', 'Retention Settings', 'Workflow Variables', 'Date Range Filter', 'Version history', 'My Organization', 'SMTP Settings', 'ML Model', 'Server Statistics', 'Variables', 'Datasources', 'Control Centre', 'Widget statistics', 'Designer Canvas', 'Custom Calendar', 'Infoboards', 'Viewer', 'Dimensions', 'Widget Configuration', 'Grid Layout', 'Client', 'Component Panel', 'Reports', 'Catalogues', 'Data Visualization', 'Template Reports', 'Infoveave', 'Widget Customization', 'Calculated Columns', 'Emailhook trigger', 'Lists', 'Measures', 'Database Connections', 'Roles', 'Component', 'Data Governance', 'Statistical Analysis', 'Hierarchies', 'Alerts', 'ML Analysis', 'Workflow Execution Status', 'Cube Designer', 'Infoboard Setup', 'Trash', 'What-If Formulae', 'Conditional Expressions', 'Automation', 'Holiday Calendar', 'What-If Analysis', 'Data Ingestion', 'Domains', 'Webhook trigger', 'Login statistics', 'Calculated Measures', 'Tiers', 'Audit Log', 'Connections', 'Tags', 'View', 'Linked Reports', 'Fixed Filters', 'Insights', 'Address Book', 'Infoboard statistics', 'Expression', 'Color Palette', 'Custom Email'] with hops=1 and top_n=50
[ 2025-08-10 22:51:06,991 ] test_main.py:161 root - ERROR - Error during query rewriting: {code: Neo.ClientError.Statement.ParameterMissing} {message: Expected parameter(s): name}
[ 2025-08-10 22:51:06,991 ] test_main.py:297 root - INFO - Rewritten query: Need to create a workflow, to run a query from oracle DB and send the query response as a report through Email
[ 2025-08-10 22:51:06,992 ] test_main.py:304 root - INFO - Rewritten query parts: ['Need to create a workflow, to run a query from oracle DB and send the query response as a report through Email']
[ 2025-08-10 22:51:06,992 ] test_main.py:313 root - INFO - Rewritten Query 1: Need to create a workflow, to run a query from oracle DB and send the query response as a report through Email
[ 2025-08-10 22:51:07,437 ] test_main.py:316 root - INFO - Embedding generated for query 1.
[ 2025-08-10 22:51:08,658 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points/query "HTTP/1.1 200 OK"
[ 2025-08-10 22:51:08,708 ] test_main.py:321 root - INFO - Processing query part 1: Need to create a workflow, to run a query from oracle DB and send the query response as a report through Email
[ 2025-08-10 22:51:08,730 ] test_main.py:71 root - INFO - Building context with metadata from documents...
[ 2025-08-10 22:51:08,730 ] test_main.py:73 root - INFO - (Document(metadata={'_id': '2a6c9297-ff5a-4139-bb0d-e87f53ace134', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content="Upload transformed file to destination database\nSetup the 'Oracle' connection, specify tables, and map columns\nSetup automated workflow summary notification\nEnable 'Send Workflow Summary' for email notifications on automated workflow execution\nSchedule and monitor  workflows Schedule or setup 'Webhooks' and 'Emails' to trigger workflows\nDone"), 0.5)
[ 2025-08-10 22:51:08,799 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-10 22:51:08,800 ] test_main.py:81 root - INFO - [Record(id='2a6c9297-ff5a-4139-bb0d-e87f53ace134', payload={'url': 'https://infoveave-help.pages.dev/journey/automate-workflows/', 'title': 'automate-workflows', 'section': 'automation', 'terminologies': ['Connections', 'Data Transformation', 'Infoveave', 'Workflows'], 'char_count': 978, 'word_count': 139, 'page_content': "Upload transformed file to destination database\nSetup the 'Oracle' connection, specify tables, and map columns\nSetup automated workflow summary notification\nEnable 'Send Workflow Summary' for email notifications on automated workflow execution\nSchedule and monitor  workflows Schedule or setup 'Webhooks' and 'Emails' to trigger workflows\nDone", 'chunk_index': 2}, vector=None, shard_key=None, order_value=None)]
[ 2025-08-10 22:51:08,800 ] test_main.py:82 root - INFO - Retrieved result for point ID: 2a6c9297-ff5a-4139-bb0d-e87f53ace134
[ 2025-08-10 22:51:08,800 ] test_main.py:73 root - INFO - (Document(metadata={'_id': 'df9d15c4-2094-450f-95e6-162e03d5828a', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='Creating Infoboard Using A Query\nCreate Infoboard Using A Query\nCreating Infoboard Using API\nCreate Infoboard Using API\nCreating Workflow in Infoveave\nCreating Workflows\nWorkflow Execution Status\nWorkflow Execution Status'), 0.33333334)
[ 2025-08-10 22:51:08,856 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-10 22:51:08,857 ] test_main.py:81 root - INFO - [Record(id='df9d15c4-2094-450f-95e6-162e03d5828a', payload={'url': 'https://infoveave-help.pages.dev/videos/', 'title': 'videos', 'section': 'videos', 'terminologies': ['Automation', 'Catalogues', 'Conditional Expressions', 'Custom Calendar', 'Datasources', 'Dimensions', 'Infoboards', 'Infoveave', 'Insights', 'Lists', 'Measures', 'My Organization', 'My Workspace', 'Query', 'Reports', 'SciPyR', 'What-If Analysis', 'What-If Formulae', 'Workflows', 'Workflow Execution Status'], 'char_count': 2430, 'word_count': 338, 'page_content': 'Creating Infoboard Using A Query\nCreate Infoboard Using A Query\nCreating Infoboard Using API\nCreate Infoboard Using API\nCreating Workflow in Infoveave\nCreating Workflows\nWorkflow Execution Status\nWorkflow Execution Status', 'chunk_index': 3}, vector=None, shard_key=None, order_value=None)]
[ 2025-08-10 22:51:08,857 ] test_main.py:82 root - INFO - Retrieved result for point ID: df9d15c4-2094-450f-95e6-162e03d5828a
[ 2025-08-10 22:51:08,857 ] test_main.py:73 root - INFO - (Document(metadata={'_id': '323c1ea3-b288-44b0-8825-475a23907e9f', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='Workflow Designer\ncanvas.\nTo add alerts that send email notifications during the workflow, go to the\nAlerts\ntab in the\nWorkflow Setup panel\n.\nToggle\nEnable\nto turn the alert on or off. Select recipient email addresses from the user list. You can choose multiple recipients.\nWrite a custom alert message that is sent when the condition is met.\nWhen setting an execution time alert, toggle\nUse Absolute Time'), 0.25)
[ 2025-08-10 22:51:08,929 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-10 22:51:08,934 ] test_main.py:81 root - INFO - [Record(id='323c1ea3-b288-44b0-8825-475a23907e9f', payload={'url': 'https://infoveave-help.pages.dev/automation-v8/jobs-v8/create-new-job/', 'title': 'create-new-job', 'section': 'automation', 'terminologies': ['Alerts', 'Automation', 'Infoveave', 'Measures', 'Query', 'Query Report', 'Value', 'Variables', 'View', 'View', 'Workflows'], 'char_count': 4476, 'word_count': 722, 'page_content': 'Workflow Designer\ncanvas.\nTo add alerts that send email notifications during the workflow, go to the\nAlerts\ntab in the\nWorkflow Setup panel\n.\nToggle\nEnable\nto turn the alert on or off. Select recipient email addresses from the user list. You can choose multiple recipients.\nWrite a custom alert message that is sent when the condition is met.\nWhen setting an execution time alert, toggle\nUse Absolute Time', 'chunk_index': 4}, vector=None, shard_key=None, order_value=None)]
[ 2025-08-10 22:51:08,934 ] test_main.py:82 root - INFO - Retrieved result for point ID: 323c1ea3-b288-44b0-8825-475a23907e9f
[ 2025-08-10 22:51:08,934 ] test_main.py:73 root - INFO - (Document(metadata={'_id': '65e3aa33-13d7-4688-98fd-7b6a24cbf91e', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='Workflow Designer\ncanvas.\nTo add alerts that send email notifications during the workflow, go to the\nAlerts\ntab in the\nWorkflow Setup panel\n.\nToggle\nEnable\nto turn the alert on or off. Select recipient email addresses from the user list. You can choose multiple recipients.\nWrite a custom alert message that is sent when the condition is met.\nWhen setting an execution time alert, toggle\nUse Absolute Time'), 0.2)
[ 2025-08-10 22:51:09,015 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-10 22:51:09,017 ] test_main.py:81 root - INFO - [Record(id='65e3aa33-13d7-4688-98fd-7b6a24cbf91e', payload={'url': 'https://infoveave-help.pages.dev/automation-v8/workflows/define-workflow/', 'title': 'define-workflow', 'section': 'automation', 'terminologies': ['Alerts', 'Automation', 'Infoveave', 'Measures', 'Query', 'Query Report', 'Value', 'Variables', 'View', 'View', 'Workflows'], 'char_count': 4476, 'word_count': 722, 'page_content': 'Workflow Designer\ncanvas.\nTo add alerts that send email notifications during the workflow, go to the\nAlerts\ntab in the\nWorkflow Setup panel\n.\nToggle\nEnable\nto turn the alert on or off. Select recipient email addresses from the user list. You can choose multiple recipients.\nWrite a custom alert message that is sent when the condition is met.\nWhen setting an execution time alert, toggle\nUse Absolute Time', 'chunk_index': 4}, vector=None, shard_key=None, order_value=None)]
[ 2025-08-10 22:51:09,017 ] test_main.py:82 root - INFO - Retrieved result for point ID: 65e3aa33-13d7-4688-98fd-7b6a24cbf91e
[ 2025-08-10 22:51:09,017 ] test_main.py:73 root - INFO - (Document(metadata={'_id': '2027003d-7c4e-4b6d-acd3-b391a775ae9a', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='Workflow Alerts | Infoveave Help\nSkip to content\nWorkflow Alerts'), 0.16666667)
[ 2025-08-10 22:51:09,089 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-10 22:51:09,090 ] test_main.py:81 root - INFO - [Record(id='2027003d-7c4e-4b6d-acd3-b391a775ae9a', payload={'url': 'https://infoveave-help.pages.dev/automation-v8/workflows/define-workflow/workflow-alerts-2/', 'title': 'workflow-alerts-2', 'section': 'automation', 'terminologies': ['Alerts', 'Infoveave', 'Workflows', 'Workflow Alerts'], 'char_count': 3832, 'word_count': 620, 'page_content': 'Workflow Alerts | Infoveave Help\nSkip to content\nWorkflow Alerts', 'chunk_index': 0}, vector=None, shard_key=None, order_value=None)]
[ 2025-08-10 22:51:09,090 ] test_main.py:82 root - INFO - Retrieved result for point ID: 2027003d-7c4e-4b6d-acd3-b391a775ae9a
[ 2025-08-10 22:51:09,090 ] test_main.py:73 root - INFO - (Document(metadata={'_id': '81a7ef81-eb12-4bcd-ad2e-403f547e7e50', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='Choose the days on which you want to execute the Workflow. By default, Infoveave sets it to every day. You can select specific days of the week, days of the month, or months.\nClick on the\nAdd'), 0.14285715)
[ 2025-08-10 22:51:09,156 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-10 22:51:09,157 ] test_main.py:81 root - INFO - [Record(id='81a7ef81-eb12-4bcd-ad2e-403f547e7e50', payload={'url': 'https://infoveave-help.pages.dev/automation-v8/jobs-v8/schedule-job/', 'title': 'schedule-job', 'section': 'automation', 'terminologies': ['Automation', 'Cron trigger', 'Emailhook trigger', 'Infoveave', 'Lists', 'Reports', 'Value', 'View', 'View', 'Webhook trigger', 'Workflows', 'Workflow Start trigger'], 'char_count': 5699, 'word_count': 937, 'page_content': 'Choose the days on which you want to execute the Workflow. By default, Infoveave sets it to every day. You can select specific days of the week, days of the month, or months.\nClick on the\nAdd', 'chunk_index': 5}, vector=None, shard_key=None, order_value=None)]
[ 2025-08-10 22:51:09,157 ] test_main.py:82 root - INFO - Retrieved result for point ID: 81a7ef81-eb12-4bcd-ad2e-403f547e7e50
[ 2025-08-10 22:51:09,157 ] test_main.py:73 root - INFO - (Document(metadata={'_id': '3989b1ef-a79d-4b1d-bce6-79cb5969aa26', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='Choose the days on which you want to execute the Workflow. By default, Infoveave sets it to every day. You can select specific days of the week, days of the month, or months.\nClick on the\nAdd'), 0.125)
[ 2025-08-10 22:51:09,210 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-10 22:51:09,211 ] test_main.py:81 root - INFO - [Record(id='3989b1ef-a79d-4b1d-bce6-79cb5969aa26', payload={'url': 'https://infoveave-help.pages.dev/automation-v8/workflows/define-workflow/workflow-start/', 'title': 'workflow-start', 'section': 'automation', 'terminologies': ['Automation', 'Cron trigger', 'Emailhook trigger', 'Infoveave', 'Lists', 'Reports', 'Value', 'View', 'View', 'Webhook trigger', 'Workflows', 'Workflow Start trigger'], 'char_count': 5699, 'word_count': 937, 'page_content': 'Choose the days on which you want to execute the Workflow. By default, Infoveave sets it to every day. You can select specific days of the week, days of the month, or months.\nClick on the\nAdd', 'chunk_index': 5}, vector=None, shard_key=None, order_value=None)]
[ 2025-08-10 22:51:09,212 ] test_main.py:82 root - INFO - Retrieved result for point ID: 3989b1ef-a79d-4b1d-bce6-79cb5969aa26
[ 2025-08-10 22:51:09,212 ] test_main.py:73 root - INFO - (Document(metadata={'_id': '3fd7ab5c-2d29-41ea-9ed7-0684f87b08e1', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='Add FTP Download Activity\n0:21\nConfigure FTP Download Activity\n0:31\nAdd Read Excel Files Activity\n0:35\nAdd Transform Activity using Javascript\n0:40\nAdd Round Numbers Activity\n0:46 Add Remove Duplicate Rows Activity\n0:52\nAdd Drop Columns Activity\n0:56\nAdd Rename Columns Activity\n1:01\nAdd Upload to Datasource Activity\n1:08\nExecute the Workflow and View Instance History'), 0.11111111)
[ 2025-08-10 22:51:09,280 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-10 22:51:09,281 ] test_main.py:81 root - INFO - [Record(id='3fd7ab5c-2d29-41ea-9ed7-0684f87b08e1', payload={'url': 'https://infoveave-help.pages.dev/automation-v8/jobs-v8/create-new-job/', 'title': 'create-new-job', 'section': 'automation', 'terminologies': ['Alerts', 'Automation', 'Infoveave', 'Measures', 'Query', 'Query Report', 'Value', 'Variables', 'View', 'View', 'Workflows'], 'char_count': 4476, 'word_count': 722, 'page_content': 'Add FTP Download Activity\n0:21\nConfigure FTP Download Activity\n0:31\nAdd Read Excel Files Activity\n0:35\nAdd Transform Activity using Javascript\n0:40\nAdd Round Numbers Activity\n0:46 Add Remove Duplicate Rows Activity\n0:52\nAdd Drop Columns Activity\n0:56\nAdd Rename Columns Activity\n1:01\nAdd Upload to Datasource Activity\n1:08\nExecute the Workflow and View Instance History', 'chunk_index': 1}, vector=None, shard_key=None, order_value=None)]
[ 2025-08-10 22:51:09,281 ] test_main.py:82 root - INFO - Retrieved result for point ID: 3fd7ab5c-2d29-41ea-9ed7-0684f87b08e1
[ 2025-08-10 22:51:09,281 ] test_main.py:73 root - INFO - (Document(metadata={'_id': '2adcd9bd-c3f6-41e9-8c27-26f07adfbe4c', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='Add FTP Download Activity\n0:21\nConfigure FTP Download Activity\n0:31\nAdd Read Excel Files Activity\n0:35\nAdd Transform Activity using Javascript\n0:40\nAdd Round Numbers Activity\n0:46 Add Remove Duplicate Rows Activity\n0:52\nAdd Drop Columns Activity\n0:56\nAdd Rename Columns Activity\n1:01\nAdd Upload to Datasource Activity\n1:08\nExecute the Workflow and View Instance History'), 0.1)
[ 2025-08-10 22:51:09,335 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-10 22:51:09,337 ] test_main.py:81 root - INFO - [Record(id='2adcd9bd-c3f6-41e9-8c27-26f07adfbe4c', payload={'url': 'https://infoveave-help.pages.dev/automation-v8/workflows/define-workflow/', 'title': 'define-workflow', 'section': 'automation', 'terminologies': ['Alerts', 'Automation', 'Infoveave', 'Measures', 'Query', 'Query Report', 'Value', 'Variables', 'View', 'View', 'Workflows'], 'char_count': 4476, 'word_count': 722, 'page_content': 'Add FTP Download Activity\n0:21\nConfigure FTP Download Activity\n0:31\nAdd Read Excel Files Activity\n0:35\nAdd Transform Activity using Javascript\n0:40\nAdd Round Numbers Activity\n0:46 Add Remove Duplicate Rows Activity\n0:52\nAdd Drop Columns Activity\n0:56\nAdd Rename Columns Activity\n1:01\nAdd Upload to Datasource Activity\n1:08\nExecute the Workflow and View Instance History', 'chunk_index': 1}, vector=None, shard_key=None, order_value=None)]
[ 2025-08-10 22:51:09,337 ] test_main.py:82 root - INFO - Retrieved result for point ID: 2adcd9bd-c3f6-41e9-8c27-26f07adfbe4c
[ 2025-08-10 22:51:09,337 ] test_main.py:73 root - INFO - (Document(metadata={'_id': 'bfe3c285-ffc2-4551-a19c-a5900bdd0aa3', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='E\nEmailhook trigger The Emailhook trigger initiates a Workflow based on incoming emails. You can set up specific email addresses that serve as Emailhooks. This allows for  automated processing of email-based activities or notifications . This trigger is useful for Workflows that involve email notifications or processing of data received via email.'), 0.09090909)
[ 2025-08-10 22:51:09,401 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-10 22:51:09,402 ] test_main.py:81 root - INFO - [Record(id='bfe3c285-ffc2-4551-a19c-a5900bdd0aa3', payload={'url': 'https://infoveave-help.pages.dev/introduction-to-infoveave/infoveave-terminologies/', 'title': 'infoveave-terminologies', 'section': 'introduction-to-infoveave', 'terminologies': ['Address Book', 'Alerts', 'Audit Log', 'Automation', 'Business Analysis', 'Calculated Columns', 'Calculated Measures', 'Catalogues', 'Client', 'Color Palette', 'Common Dimension filters', 'Component Panel', 'Component', 'Conditional Expressions', 'Connections', 'Control Centre', 'Creator', 'Cron trigger', 'Cube Designer', 'Custom Calendar', 'Custom Email', 'Database Connections', 'Datasources', 'Data Governance', 'Data Ingestion', 'Data Transformation', 'Data Visualization', 'Date Range Filter', 'Designer Canvas', 'Designer Layout', 'Dimensions', 'Domains', 'Emailhook trigger', 'Expression', 'Fixed Filters', 'Grid Layout', 'Hierarchies', 'Holiday Calendar', 'Infoboards', 'Infoboard Setup', 'Infoboard statistics', 'Infoveave', 'Infoveave menu', 'Insights', 'Lists', 'Linked Reports', 'Login statistics', 'Measures', 'ML Analysis', 'ML Model', 'My Organization', 'My Workspace', 'NGuage Forms', 'Query', 'Query Builder', 'Query Report', 'Reports', 'Retention Settings', 'Roles', 'SciPyR', 'Server Statistics', 'SMTP Settings', 'Statistical Analysis', 'Tags', 'Targets and Thresholds', 'Template Reports', 'Tenant', 'Tiers', 'Trash', 'Value', 'Variables', 'Version history', 'View', 'View', 'Viewer', 'Webhook trigger', 'What-If Analysis', 'What-If Formulae', 'Widget Configuration', 'Widget Customization', 'Widget statistics', 'Workflows', 'Workflow Alerts', 'Workflow Execution Status', 'Workflow Start trigger', 'Workflow Variables'], 'char_count': 25220, 'word_count': 3773, 'page_content': 'E\nEmailhook trigger The Emailhook trigger initiates a Workflow based on incoming emails. You can set up specific email addresses that serve as Emailhooks. This allows for  automated processing of email-based activities or notifications . This trigger is useful for Workflows that involve email notifications or processing of data received via email.', 'chunk_index': 13}, vector=None, shard_key=None, order_value=None)]
[ 2025-08-10 22:51:09,402 ] test_main.py:82 root - INFO - Retrieved result for point ID: bfe3c285-ffc2-4551-a19c-a5900bdd0aa3
[ 2025-08-10 22:51:09,402 ] test_main.py:182 root - INFO - Loaded rewritten query user prompt.
[ 2025-08-10 22:51:11,363 ] _client.py:1025 httpx - INFO - HTTP Request: POST https://api.groq.com/openai/v1/chat/completions "HTTP/1.1 200 OK"
[ 2025-08-10 22:51:11,365 ] test_main.py:324 root - INFO - Response for query part 1: Here's how to create a workflow in Infoveave to run a query from an Oracle database and send the results as an email report:

**1. Setup Your Oracle Connection:**

*   Go to the **Connections** section in Infoveave.
*   Click **Add Connection**.
*   Choose **Oracle** as the connection type.
*   Provide the necessary connection details:
    *   **Connection Name:** Give your connection a descriptive name (e.g., "MyOracleDB").
    *   **Host:** The hostname or IP address of your Oracle database server.
    *   **Port:** The port number your database is listening on (usually 1521).
    *   **SID:** The service identifier for your database.
    *   **Username:** Your Oracle database username.
    *   **Password:** Your Oracle database password.
*   Test the connection to ensure it's successful.

**2. Create Your Query:**

*   In Infoveave, navigate to the **Query** section.
*   Click **Create New Query**.
*   Choose your newly created Oracle connection from the dropdown.
*   Write your SQL query to retrieve the data you want in the report.

**3. Design Your Workflow:**

*   Go to the **Workflows** section and click **Create New Workflow**.
*   **Add Activities:**
    *   **Query Activity:** Add a Query activity and select your Oracle query from the dropdown.
    *   **Transform Activity (Optional):** If you need to modify the query results (e.g., format dates, calculate values), add a Transform activity using Javascript or other supported methods.
    *   **Report Generation Activity:** Add a Report Generation activity to format the query results into a report. You can choose from various report templates or create a custom one.
    *   **Email Activity:** Add an Email activity to send the generated report as an attachment. Configure the recipient email addresses, subject line, and body message.

**4. Schedule Your Workflow:**

*   Set up a schedule for your workflow to run automatically at desired intervals (e.g., daily, weekly). You can use Cron triggers, Emailhook triggers, or Webhook triggers.

**5. Test and Monitor:**

*   Execute your workflow manually to test the entire process.
*   Monitor the workflow execution history to track its progress and identify any issues.



Let me know if you have any other questions about Infoveave workflows!
[ 2025-08-10 22:51:11,365 ] test_main.py:327 root - INFO - [(Document(metadata={'_id': '2a6c9297-ff5a-4139-bb0d-e87f53ace134', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content="Upload transformed file to destination database\nSetup the 'Oracle' connection, specify tables, and map columns\nSetup automated workflow summary notification\nEnable 'Send Workflow Summary' for email notifications on automated workflow execution\nSchedule and monitor  workflows Schedule or setup 'Webhooks' and 'Emails' to trigger workflows\nDone"), 0.5), (Document(metadata={'_id': 'df9d15c4-2094-450f-95e6-162e03d5828a', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='Creating Infoboard Using A Query\nCreate Infoboard Using A Query\nCreating Infoboard Using API\nCreate Infoboard Using API\nCreating Workflow in Infoveave\nCreating Workflows\nWorkflow Execution Status\nWorkflow Execution Status'), 0.33333334), (Document(metadata={'_id': '323c1ea3-b288-44b0-8825-475a23907e9f', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='Workflow Designer\ncanvas.\nTo add alerts that send email notifications during the workflow, go to the\nAlerts\ntab in the\nWorkflow Setup panel\n.\nToggle\nEnable\nto turn the alert on or off. Select recipient email addresses from the user list. You can choose multiple recipients.\nWrite a custom alert message that is sent when the condition is met.\nWhen setting an execution time alert, toggle\nUse Absolute Time'), 0.25), (Document(metadata={'_id': '65e3aa33-13d7-4688-98fd-7b6a24cbf91e', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='Workflow Designer\ncanvas.\nTo add alerts that send email notifications during the workflow, go to the\nAlerts\ntab in the\nWorkflow Setup panel\n.\nToggle\nEnable\nto turn the alert on or off. Select recipient email addresses from the user list. You can choose multiple recipients.\nWrite a custom alert message that is sent when the condition is met.\nWhen setting an execution time alert, toggle\nUse Absolute Time'), 0.2), (Document(metadata={'_id': '2027003d-7c4e-4b6d-acd3-b391a775ae9a', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='Workflow Alerts | Infoveave Help\nSkip to content\nWorkflow Alerts'), 0.16666667), (Document(metadata={'_id': '81a7ef81-eb12-4bcd-ad2e-403f547e7e50', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='Choose the days on which you want to execute the Workflow. By default, Infoveave sets it to every day. You can select specific days of the week, days of the month, or months.\nClick on the\nAdd'), 0.14285715), (Document(metadata={'_id': '3989b1ef-a79d-4b1d-bce6-79cb5969aa26', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='Choose the days on which you want to execute the Workflow. By default, Infoveave sets it to every day. You can select specific days of the week, days of the month, or months.\nClick on the\nAdd'), 0.125), (Document(metadata={'_id': '3fd7ab5c-2d29-41ea-9ed7-0684f87b08e1', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='Add FTP Download Activity\n0:21\nConfigure FTP Download Activity\n0:31\nAdd Read Excel Files Activity\n0:35\nAdd Transform Activity using Javascript\n0:40\nAdd Round Numbers Activity\n0:46 Add Remove Duplicate Rows Activity\n0:52\nAdd Drop Columns Activity\n0:56\nAdd Rename Columns Activity\n1:01\nAdd Upload to Datasource Activity\n1:08\nExecute the Workflow and View Instance History'), 0.11111111), (Document(metadata={'_id': '2adcd9bd-c3f6-41e9-8c27-26f07adfbe4c', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='Add FTP Download Activity\n0:21\nConfigure FTP Download Activity\n0:31\nAdd Read Excel Files Activity\n0:35\nAdd Transform Activity using Javascript\n0:40\nAdd Round Numbers Activity\n0:46 Add Remove Duplicate Rows Activity\n0:52\nAdd Drop Columns Activity\n0:56\nAdd Rename Columns Activity\n1:01\nAdd Upload to Datasource Activity\n1:08\nExecute the Workflow and View Instance History'), 0.1), (Document(metadata={'_id': 'bfe3c285-ffc2-4551-a19c-a5900bdd0aa3', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='E\nEmailhook trigger The Emailhook trigger initiates a Workflow based on incoming emails. You can set up specific email addresses that serve as Emailhooks. This allows for  automated processing of email-based activities or notifications . This trigger is useful for Workflows that involve email notifications or processing of data received via email.'), 0.09090909)]
[ 2025-08-10 22:51:11,382 ] test_main.py:71 root - INFO - Building context with metadata from documents...
[ 2025-08-10 22:51:11,382 ] test_main.py:73 root - INFO - (Document(metadata={'_id': '2a6c9297-ff5a-4139-bb0d-e87f53ace134', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content="Upload transformed file to destination database\nSetup the 'Oracle' connection, specify tables, and map columns\nSetup automated workflow summary notification\nEnable 'Send Workflow Summary' for email notifications on automated workflow execution\nSchedule and monitor  workflows Schedule or setup 'Webhooks' and 'Emails' to trigger workflows\nDone"), 0.5)
[ 2025-08-10 22:51:11,453 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-10 22:51:11,454 ] test_main.py:81 root - INFO - [Record(id='2a6c9297-ff5a-4139-bb0d-e87f53ace134', payload={'url': 'https://infoveave-help.pages.dev/journey/automate-workflows/', 'title': 'automate-workflows', 'section': 'automation', 'terminologies': ['Connections', 'Data Transformation', 'Infoveave', 'Workflows'], 'char_count': 978, 'word_count': 139, 'page_content': "Upload transformed file to destination database\nSetup the 'Oracle' connection, specify tables, and map columns\nSetup automated workflow summary notification\nEnable 'Send Workflow Summary' for email notifications on automated workflow execution\nSchedule and monitor  workflows Schedule or setup 'Webhooks' and 'Emails' to trigger workflows\nDone", 'chunk_index': 2}, vector=None, shard_key=None, order_value=None)]
[ 2025-08-10 22:51:11,454 ] test_main.py:82 root - INFO - Retrieved result for point ID: 2a6c9297-ff5a-4139-bb0d-e87f53ace134
[ 2025-08-10 22:51:11,454 ] test_main.py:73 root - INFO - (Document(metadata={'_id': 'df9d15c4-2094-450f-95e6-162e03d5828a', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='Creating Infoboard Using A Query\nCreate Infoboard Using A Query\nCreating Infoboard Using API\nCreate Infoboard Using API\nCreating Workflow in Infoveave\nCreating Workflows\nWorkflow Execution Status\nWorkflow Execution Status'), 0.33333334)
[ 2025-08-10 22:51:11,533 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-10 22:51:11,533 ] test_main.py:81 root - INFO - [Record(id='df9d15c4-2094-450f-95e6-162e03d5828a', payload={'url': 'https://infoveave-help.pages.dev/videos/', 'title': 'videos', 'section': 'videos', 'terminologies': ['Automation', 'Catalogues', 'Conditional Expressions', 'Custom Calendar', 'Datasources', 'Dimensions', 'Infoboards', 'Infoveave', 'Insights', 'Lists', 'Measures', 'My Organization', 'My Workspace', 'Query', 'Reports', 'SciPyR', 'What-If Analysis', 'What-If Formulae', 'Workflows', 'Workflow Execution Status'], 'char_count': 2430, 'word_count': 338, 'page_content': 'Creating Infoboard Using A Query\nCreate Infoboard Using A Query\nCreating Infoboard Using API\nCreate Infoboard Using API\nCreating Workflow in Infoveave\nCreating Workflows\nWorkflow Execution Status\nWorkflow Execution Status', 'chunk_index': 3}, vector=None, shard_key=None, order_value=None)]
[ 2025-08-10 22:51:11,533 ] test_main.py:82 root - INFO - Retrieved result for point ID: df9d15c4-2094-450f-95e6-162e03d5828a
[ 2025-08-10 22:51:11,533 ] test_main.py:73 root - INFO - (Document(metadata={'_id': '323c1ea3-b288-44b0-8825-475a23907e9f', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='Workflow Designer\ncanvas.\nTo add alerts that send email notifications during the workflow, go to the\nAlerts\ntab in the\nWorkflow Setup panel\n.\nToggle\nEnable\nto turn the alert on or off. Select recipient email addresses from the user list. You can choose multiple recipients.\nWrite a custom alert message that is sent when the condition is met.\nWhen setting an execution time alert, toggle\nUse Absolute Time'), 0.25)
[ 2025-08-10 22:51:11,614 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-10 22:51:11,614 ] test_main.py:81 root - INFO - [Record(id='323c1ea3-b288-44b0-8825-475a23907e9f', payload={'url': 'https://infoveave-help.pages.dev/automation-v8/jobs-v8/create-new-job/', 'title': 'create-new-job', 'section': 'automation', 'terminologies': ['Alerts', 'Automation', 'Infoveave', 'Measures', 'Query', 'Query Report', 'Value', 'Variables', 'View', 'View', 'Workflows'], 'char_count': 4476, 'word_count': 722, 'page_content': 'Workflow Designer\ncanvas.\nTo add alerts that send email notifications during the workflow, go to the\nAlerts\ntab in the\nWorkflow Setup panel\n.\nToggle\nEnable\nto turn the alert on or off. Select recipient email addresses from the user list. You can choose multiple recipients.\nWrite a custom alert message that is sent when the condition is met.\nWhen setting an execution time alert, toggle\nUse Absolute Time', 'chunk_index': 4}, vector=None, shard_key=None, order_value=None)]
[ 2025-08-10 22:51:11,614 ] test_main.py:82 root - INFO - Retrieved result for point ID: 323c1ea3-b288-44b0-8825-475a23907e9f
[ 2025-08-10 22:51:11,614 ] test_main.py:73 root - INFO - (Document(metadata={'_id': '65e3aa33-13d7-4688-98fd-7b6a24cbf91e', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='Workflow Designer\ncanvas.\nTo add alerts that send email notifications during the workflow, go to the\nAlerts\ntab in the\nWorkflow Setup panel\n.\nToggle\nEnable\nto turn the alert on or off. Select recipient email addresses from the user list. You can choose multiple recipients.\nWrite a custom alert message that is sent when the condition is met.\nWhen setting an execution time alert, toggle\nUse Absolute Time'), 0.2)
[ 2025-08-10 22:51:11,683 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-10 22:51:11,685 ] test_main.py:81 root - INFO - [Record(id='65e3aa33-13d7-4688-98fd-7b6a24cbf91e', payload={'url': 'https://infoveave-help.pages.dev/automation-v8/workflows/define-workflow/', 'title': 'define-workflow', 'section': 'automation', 'terminologies': ['Alerts', 'Automation', 'Infoveave', 'Measures', 'Query', 'Query Report', 'Value', 'Variables', 'View', 'View', 'Workflows'], 'char_count': 4476, 'word_count': 722, 'page_content': 'Workflow Designer\ncanvas.\nTo add alerts that send email notifications during the workflow, go to the\nAlerts\ntab in the\nWorkflow Setup panel\n.\nToggle\nEnable\nto turn the alert on or off. Select recipient email addresses from the user list. You can choose multiple recipients.\nWrite a custom alert message that is sent when the condition is met.\nWhen setting an execution time alert, toggle\nUse Absolute Time', 'chunk_index': 4}, vector=None, shard_key=None, order_value=None)]
[ 2025-08-10 22:51:11,685 ] test_main.py:82 root - INFO - Retrieved result for point ID: 65e3aa33-13d7-4688-98fd-7b6a24cbf91e
[ 2025-08-10 22:51:11,685 ] test_main.py:73 root - INFO - (Document(metadata={'_id': '2027003d-7c4e-4b6d-acd3-b391a775ae9a', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='Workflow Alerts | Infoveave Help\nSkip to content\nWorkflow Alerts'), 0.16666667)
[ 2025-08-10 22:51:11,773 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-10 22:51:11,773 ] test_main.py:81 root - INFO - [Record(id='2027003d-7c4e-4b6d-acd3-b391a775ae9a', payload={'url': 'https://infoveave-help.pages.dev/automation-v8/workflows/define-workflow/workflow-alerts-2/', 'title': 'workflow-alerts-2', 'section': 'automation', 'terminologies': ['Alerts', 'Infoveave', 'Workflows', 'Workflow Alerts'], 'char_count': 3832, 'word_count': 620, 'page_content': 'Workflow Alerts | Infoveave Help\nSkip to content\nWorkflow Alerts', 'chunk_index': 0}, vector=None, shard_key=None, order_value=None)]
[ 2025-08-10 22:51:11,773 ] test_main.py:82 root - INFO - Retrieved result for point ID: 2027003d-7c4e-4b6d-acd3-b391a775ae9a
[ 2025-08-10 22:51:11,773 ] test_main.py:73 root - INFO - (Document(metadata={'_id': '81a7ef81-eb12-4bcd-ad2e-403f547e7e50', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='Choose the days on which you want to execute the Workflow. By default, Infoveave sets it to every day. You can select specific days of the week, days of the month, or months.\nClick on the\nAdd'), 0.14285715)
[ 2025-08-10 22:51:11,831 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-10 22:51:11,832 ] test_main.py:81 root - INFO - [Record(id='81a7ef81-eb12-4bcd-ad2e-403f547e7e50', payload={'url': 'https://infoveave-help.pages.dev/automation-v8/jobs-v8/schedule-job/', 'title': 'schedule-job', 'section': 'automation', 'terminologies': ['Automation', 'Cron trigger', 'Emailhook trigger', 'Infoveave', 'Lists', 'Reports', 'Value', 'View', 'View', 'Webhook trigger', 'Workflows', 'Workflow Start trigger'], 'char_count': 5699, 'word_count': 937, 'page_content': 'Choose the days on which you want to execute the Workflow. By default, Infoveave sets it to every day. You can select specific days of the week, days of the month, or months.\nClick on the\nAdd', 'chunk_index': 5}, vector=None, shard_key=None, order_value=None)]
[ 2025-08-10 22:51:11,832 ] test_main.py:82 root - INFO - Retrieved result for point ID: 81a7ef81-eb12-4bcd-ad2e-403f547e7e50
[ 2025-08-10 22:51:11,832 ] test_main.py:73 root - INFO - (Document(metadata={'_id': '3989b1ef-a79d-4b1d-bce6-79cb5969aa26', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='Choose the days on which you want to execute the Workflow. By default, Infoveave sets it to every day. You can select specific days of the week, days of the month, or months.\nClick on the\nAdd'), 0.125)
[ 2025-08-10 22:51:11,907 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-10 22:51:11,908 ] test_main.py:81 root - INFO - [Record(id='3989b1ef-a79d-4b1d-bce6-79cb5969aa26', payload={'url': 'https://infoveave-help.pages.dev/automation-v8/workflows/define-workflow/workflow-start/', 'title': 'workflow-start', 'section': 'automation', 'terminologies': ['Automation', 'Cron trigger', 'Emailhook trigger', 'Infoveave', 'Lists', 'Reports', 'Value', 'View', 'View', 'Webhook trigger', 'Workflows', 'Workflow Start trigger'], 'char_count': 5699, 'word_count': 937, 'page_content': 'Choose the days on which you want to execute the Workflow. By default, Infoveave sets it to every day. You can select specific days of the week, days of the month, or months.\nClick on the\nAdd', 'chunk_index': 5}, vector=None, shard_key=None, order_value=None)]
[ 2025-08-10 22:51:11,908 ] test_main.py:82 root - INFO - Retrieved result for point ID: 3989b1ef-a79d-4b1d-bce6-79cb5969aa26
[ 2025-08-10 22:51:11,908 ] test_main.py:73 root - INFO - (Document(metadata={'_id': '3fd7ab5c-2d29-41ea-9ed7-0684f87b08e1', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='Add FTP Download Activity\n0:21\nConfigure FTP Download Activity\n0:31\nAdd Read Excel Files Activity\n0:35\nAdd Transform Activity using Javascript\n0:40\nAdd Round Numbers Activity\n0:46 Add Remove Duplicate Rows Activity\n0:52\nAdd Drop Columns Activity\n0:56\nAdd Rename Columns Activity\n1:01\nAdd Upload to Datasource Activity\n1:08\nExecute the Workflow and View Instance History'), 0.11111111)
[ 2025-08-10 22:51:11,986 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-10 22:51:11,986 ] test_main.py:81 root - INFO - [Record(id='3fd7ab5c-2d29-41ea-9ed7-0684f87b08e1', payload={'url': 'https://infoveave-help.pages.dev/automation-v8/jobs-v8/create-new-job/', 'title': 'create-new-job', 'section': 'automation', 'terminologies': ['Alerts', 'Automation', 'Infoveave', 'Measures', 'Query', 'Query Report', 'Value', 'Variables', 'View', 'View', 'Workflows'], 'char_count': 4476, 'word_count': 722, 'page_content': 'Add FTP Download Activity\n0:21\nConfigure FTP Download Activity\n0:31\nAdd Read Excel Files Activity\n0:35\nAdd Transform Activity using Javascript\n0:40\nAdd Round Numbers Activity\n0:46 Add Remove Duplicate Rows Activity\n0:52\nAdd Drop Columns Activity\n0:56\nAdd Rename Columns Activity\n1:01\nAdd Upload to Datasource Activity\n1:08\nExecute the Workflow and View Instance History', 'chunk_index': 1}, vector=None, shard_key=None, order_value=None)]
[ 2025-08-10 22:51:11,986 ] test_main.py:82 root - INFO - Retrieved result for point ID: 3fd7ab5c-2d29-41ea-9ed7-0684f87b08e1
[ 2025-08-10 22:51:11,986 ] test_main.py:73 root - INFO - (Document(metadata={'_id': '2adcd9bd-c3f6-41e9-8c27-26f07adfbe4c', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='Add FTP Download Activity\n0:21\nConfigure FTP Download Activity\n0:31\nAdd Read Excel Files Activity\n0:35\nAdd Transform Activity using Javascript\n0:40\nAdd Round Numbers Activity\n0:46 Add Remove Duplicate Rows Activity\n0:52\nAdd Drop Columns Activity\n0:56\nAdd Rename Columns Activity\n1:01\nAdd Upload to Datasource Activity\n1:08\nExecute the Workflow and View Instance History'), 0.1)
[ 2025-08-10 22:51:12,062 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-10 22:51:12,062 ] test_main.py:81 root - INFO - [Record(id='2adcd9bd-c3f6-41e9-8c27-26f07adfbe4c', payload={'url': 'https://infoveave-help.pages.dev/automation-v8/workflows/define-workflow/', 'title': 'define-workflow', 'section': 'automation', 'terminologies': ['Alerts', 'Automation', 'Infoveave', 'Measures', 'Query', 'Query Report', 'Value', 'Variables', 'View', 'View', 'Workflows'], 'char_count': 4476, 'word_count': 722, 'page_content': 'Add FTP Download Activity\n0:21\nConfigure FTP Download Activity\n0:31\nAdd Read Excel Files Activity\n0:35\nAdd Transform Activity using Javascript\n0:40\nAdd Round Numbers Activity\n0:46 Add Remove Duplicate Rows Activity\n0:52\nAdd Drop Columns Activity\n0:56\nAdd Rename Columns Activity\n1:01\nAdd Upload to Datasource Activity\n1:08\nExecute the Workflow and View Instance History', 'chunk_index': 1}, vector=None, shard_key=None, order_value=None)]
[ 2025-08-10 22:51:12,063 ] test_main.py:82 root - INFO - Retrieved result for point ID: 2adcd9bd-c3f6-41e9-8c27-26f07adfbe4c
[ 2025-08-10 22:51:12,063 ] test_main.py:73 root - INFO - (Document(metadata={'_id': 'bfe3c285-ffc2-4551-a19c-a5900bdd0aa3', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='E\nEmailhook trigger The Emailhook trigger initiates a Workflow based on incoming emails. You can set up specific email addresses that serve as Emailhooks. This allows for  automated processing of email-based activities or notifications . This trigger is useful for Workflows that involve email notifications or processing of data received via email.'), 0.09090909)
[ 2025-08-10 22:51:12,132 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-10 22:51:12,133 ] test_main.py:81 root - INFO - [Record(id='bfe3c285-ffc2-4551-a19c-a5900bdd0aa3', payload={'url': 'https://infoveave-help.pages.dev/introduction-to-infoveave/infoveave-terminologies/', 'title': 'infoveave-terminologies', 'section': 'introduction-to-infoveave', 'terminologies': ['Address Book', 'Alerts', 'Audit Log', 'Automation', 'Business Analysis', 'Calculated Columns', 'Calculated Measures', 'Catalogues', 'Client', 'Color Palette', 'Common Dimension filters', 'Component Panel', 'Component', 'Conditional Expressions', 'Connections', 'Control Centre', 'Creator', 'Cron trigger', 'Cube Designer', 'Custom Calendar', 'Custom Email', 'Database Connections', 'Datasources', 'Data Governance', 'Data Ingestion', 'Data Transformation', 'Data Visualization', 'Date Range Filter', 'Designer Canvas', 'Designer Layout', 'Dimensions', 'Domains', 'Emailhook trigger', 'Expression', 'Fixed Filters', 'Grid Layout', 'Hierarchies', 'Holiday Calendar', 'Infoboards', 'Infoboard Setup', 'Infoboard statistics', 'Infoveave', 'Infoveave menu', 'Insights', 'Lists', 'Linked Reports', 'Login statistics', 'Measures', 'ML Analysis', 'ML Model', 'My Organization', 'My Workspace', 'NGuage Forms', 'Query', 'Query Builder', 'Query Report', 'Reports', 'Retention Settings', 'Roles', 'SciPyR', 'Server Statistics', 'SMTP Settings', 'Statistical Analysis', 'Tags', 'Targets and Thresholds', 'Template Reports', 'Tenant', 'Tiers', 'Trash', 'Value', 'Variables', 'Version history', 'View', 'View', 'Viewer', 'Webhook trigger', 'What-If Analysis', 'What-If Formulae', 'Widget Configuration', 'Widget Customization', 'Widget statistics', 'Workflows', 'Workflow Alerts', 'Workflow Execution Status', 'Workflow Start trigger', 'Workflow Variables'], 'char_count': 25220, 'word_count': 3773, 'page_content': 'E\nEmailhook trigger The Emailhook trigger initiates a Workflow based on incoming emails. You can set up specific email addresses that serve as Emailhooks. This allows for  automated processing of email-based activities or notifications . This trigger is useful for Workflows that involve email notifications or processing of data received via email.', 'chunk_index': 13}, vector=None, shard_key=None, order_value=None)]
[ 2025-08-10 22:51:12,134 ] test_main.py:82 root - INFO - Retrieved result for point ID: bfe3c285-ffc2-4551-a19c-a5900bdd0aa3
[ 2025-08-10 22:51:12,134 ] test_main.py:347 root - INFO - Found 1 final documents.
[ 2025-08-10 22:51:12,134 ] test_main.py:348 root - INFO - Context prepared for LLM response.
[ 2025-08-10 22:51:12,136 ] test_main.py:394 root - INFO - Single query part response:

[ 2025-08-10 22:51:12,136 ] test_main.py:395 root - INFO - Here's how to create a workflow in Infoveave to run a query from an Oracle database and send the results as an email report:

**1. Setup Your Oracle Connection:**

*   Go to the **Connections** section in Infoveave.
*   Click **Add Connection**.
*   Choose **Oracle** as the connection type.
*   Provide the necessary connection details:
    *   **Connection Name:** Give your connection a descriptive name (e.g., "MyOracleDB").
    *   **Host:** The hostname or IP address of your Oracle database server.
    *   **Port:** The port number your database is listening on (usually 1521).
    *   **SID:** The service identifier for your database.
    *   **Username:** Your Oracle database username.
    *   **Password:** Your Oracle database password.
*   Test the connection to ensure it's successful.

**2. Create Your Query:**

*   In Infoveave, navigate to the **Query** section.
*   Click **Create New Query**.
*   Choose your newly created Oracle connection from the dropdown.
*   Write your SQL query to retrieve the data you want in the report.

**3. Design Your Workflow:**

*   Go to the **Workflows** section and click **Create New Workflow**.
*   **Add Activities:**
    *   **Query Activity:** Add a Query activity and select your Oracle query from the dropdown.
    *   **Transform Activity (Optional):** If you need to modify the query results (e.g., format dates, calculate values), add a Transform activity using Javascript or other supported methods.
    *   **Report Generation Activity:** Add a Report Generation activity to format the query results into a report. You can choose from various report templates or create a custom one.
    *   **Email Activity:** Add an Email activity to send the generated report as an attachment. Configure the recipient email addresses, subject line, and body message.

**4. Schedule Your Workflow:**

*   Set up a schedule for your workflow to run automatically at desired intervals (e.g., daily, weekly). You can use Cron triggers, Emailhook triggers, or Webhook triggers.

**5. Test and Monitor:**

*   Execute your workflow manually to test the entire process.
*   Monitor the workflow execution history to track its progress and identify any issues.



Let me know if you have any other questions about Infoveave workflows!
[ 2025-08-10 22:55:12,244 ] test_main.py:196 root - INFO - .........................Starting Infoverve Helper Application.........................
[ 2025-08-10 22:55:12,244 ] test_main.py:212 root - INFO - GROQ_API_KEY loaded.
[ 2025-08-10 22:55:12,251 ] test_main.py:236 root - INFO - Embedding model initialized.
[ 2025-08-10 22:55:12,402 ] _client.py:1025 httpx - INFO - HTTP Request: GET http://ai.infoveave.cloud:6333 "HTTP/1.1 200 OK"
[ 2025-08-10 22:55:12,403 ] test_main.py:240 root - INFO - Connected to Qdrant.
[ 2025-08-10 22:55:12,516 ] _client.py:1025 httpx - INFO - HTTP Request: GET http://ai.infoveave.cloud:6333/collections "HTTP/1.1 200 OK"
[ 2025-08-10 22:55:12,517 ] test_main.py:244 root - INFO - Qdrant collections retrieved.
[ 2025-08-10 22:55:12,517 ] test_main.py:251 root - INFO - Using collection: infoverve_helper_docs_hybrid
[ 2025-08-10 22:55:13,907 ] test_main.py:254 root - INFO - Sparse embeddings initialized.
[ 2025-08-10 22:55:13,990 ] _client.py:1025 httpx - INFO - HTTP Request: GET http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid "HTTP/1.1 200 OK"
[ 2025-08-10 22:55:14,988 ] _client.py:1025 httpx - INFO - HTTP Request: GET http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid "HTTP/1.1 200 OK"
[ 2025-08-10 22:55:14,989 ] test_main.py:266 root - INFO - QdrantVectorStore initialized.
[ 2025-08-10 22:55:15,026 ] test_main.py:272 root - INFO - LLM initialized.
[ 2025-08-10 22:55:16,065 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points/query "HTTP/1.1 200 OK"
[ 2025-08-10 22:55:16,818 ] test_main.py:294 root - INFO - Original query embedding generated.
[ 2025-08-10 22:55:16,843 ] test_main.py:71 root - INFO - Building context with metadata from documents...
[ 2025-08-10 22:55:16,843 ] test_main.py:73 root - INFO - (Document(metadata={'_id': '2a6c9297-ff5a-4139-bb0d-e87f53ace134', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content="Upload transformed file to destination database\nSetup the 'Oracle' connection, specify tables, and map columns\nSetup automated workflow summary notification\nEnable 'Send Workflow Summary' for email notifications on automated workflow execution\nSchedule and monitor  workflows Schedule or setup 'Webhooks' and 'Emails' to trigger workflows\nDone"), 0.5)
[ 2025-08-10 22:55:16,902 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-10 22:55:16,903 ] test_main.py:81 root - INFO - [Record(id='2a6c9297-ff5a-4139-bb0d-e87f53ace134', payload={'url': 'https://infoveave-help.pages.dev/journey/automate-workflows/', 'title': 'automate-workflows', 'section': 'automation', 'terminologies': ['Connections', 'Data Transformation', 'Infoveave', 'Workflows'], 'char_count': 978, 'word_count': 139, 'page_content': "Upload transformed file to destination database\nSetup the 'Oracle' connection, specify tables, and map columns\nSetup automated workflow summary notification\nEnable 'Send Workflow Summary' for email notifications on automated workflow execution\nSchedule and monitor  workflows Schedule or setup 'Webhooks' and 'Emails' to trigger workflows\nDone", 'chunk_index': 2}, vector=None, shard_key=None, order_value=None)]
[ 2025-08-10 22:55:16,903 ] test_main.py:82 root - INFO - Retrieved result for point ID: 2a6c9297-ff5a-4139-bb0d-e87f53ace134
[ 2025-08-10 22:55:16,903 ] test_main.py:73 root - INFO - (Document(metadata={'_id': 'df9d15c4-2094-450f-95e6-162e03d5828a', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='Creating Infoboard Using A Query\nCreate Infoboard Using A Query\nCreating Infoboard Using API\nCreate Infoboard Using API\nCreating Workflow in Infoveave\nCreating Workflows\nWorkflow Execution Status\nWorkflow Execution Status'), 0.33333334)
[ 2025-08-10 22:55:16,975 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-10 22:55:16,976 ] test_main.py:81 root - INFO - [Record(id='df9d15c4-2094-450f-95e6-162e03d5828a', payload={'url': 'https://infoveave-help.pages.dev/videos/', 'title': 'videos', 'section': 'videos', 'terminologies': ['Automation', 'Catalogues', 'Conditional Expressions', 'Custom Calendar', 'Datasources', 'Dimensions', 'Infoboards', 'Infoveave', 'Insights', 'Lists', 'Measures', 'My Organization', 'My Workspace', 'Query', 'Reports', 'SciPyR', 'What-If Analysis', 'What-If Formulae', 'Workflows', 'Workflow Execution Status'], 'char_count': 2430, 'word_count': 338, 'page_content': 'Creating Infoboard Using A Query\nCreate Infoboard Using A Query\nCreating Infoboard Using API\nCreate Infoboard Using API\nCreating Workflow in Infoveave\nCreating Workflows\nWorkflow Execution Status\nWorkflow Execution Status', 'chunk_index': 3}, vector=None, shard_key=None, order_value=None)]
[ 2025-08-10 22:55:16,976 ] test_main.py:82 root - INFO - Retrieved result for point ID: df9d15c4-2094-450f-95e6-162e03d5828a
[ 2025-08-10 22:55:16,976 ] test_main.py:73 root - INFO - (Document(metadata={'_id': '323c1ea3-b288-44b0-8825-475a23907e9f', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='Workflow Designer\ncanvas.\nTo add alerts that send email notifications during the workflow, go to the\nAlerts\ntab in the\nWorkflow Setup panel\n.\nToggle\nEnable\nto turn the alert on or off. Select recipient email addresses from the user list. You can choose multiple recipients.\nWrite a custom alert message that is sent when the condition is met.\nWhen setting an execution time alert, toggle\nUse Absolute Time'), 0.25)
[ 2025-08-10 22:55:17,036 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-10 22:55:17,037 ] test_main.py:81 root - INFO - [Record(id='323c1ea3-b288-44b0-8825-475a23907e9f', payload={'url': 'https://infoveave-help.pages.dev/automation-v8/jobs-v8/create-new-job/', 'title': 'create-new-job', 'section': 'automation', 'terminologies': ['Alerts', 'Automation', 'Infoveave', 'Measures', 'Query', 'Query Report', 'Value', 'Variables', 'View', 'View', 'Workflows'], 'char_count': 4476, 'word_count': 722, 'page_content': 'Workflow Designer\ncanvas.\nTo add alerts that send email notifications during the workflow, go to the\nAlerts\ntab in the\nWorkflow Setup panel\n.\nToggle\nEnable\nto turn the alert on or off. Select recipient email addresses from the user list. You can choose multiple recipients.\nWrite a custom alert message that is sent when the condition is met.\nWhen setting an execution time alert, toggle\nUse Absolute Time', 'chunk_index': 4}, vector=None, shard_key=None, order_value=None)]
[ 2025-08-10 22:55:17,037 ] test_main.py:82 root - INFO - Retrieved result for point ID: 323c1ea3-b288-44b0-8825-475a23907e9f
[ 2025-08-10 22:55:17,037 ] test_main.py:73 root - INFO - (Document(metadata={'_id': '65e3aa33-13d7-4688-98fd-7b6a24cbf91e', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='Workflow Designer\ncanvas.\nTo add alerts that send email notifications during the workflow, go to the\nAlerts\ntab in the\nWorkflow Setup panel\n.\nToggle\nEnable\nto turn the alert on or off. Select recipient email addresses from the user list. You can choose multiple recipients.\nWrite a custom alert message that is sent when the condition is met.\nWhen setting an execution time alert, toggle\nUse Absolute Time'), 0.2)
[ 2025-08-10 22:55:17,100 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-10 22:55:17,101 ] test_main.py:81 root - INFO - [Record(id='65e3aa33-13d7-4688-98fd-7b6a24cbf91e', payload={'url': 'https://infoveave-help.pages.dev/automation-v8/workflows/define-workflow/', 'title': 'define-workflow', 'section': 'automation', 'terminologies': ['Alerts', 'Automation', 'Infoveave', 'Measures', 'Query', 'Query Report', 'Value', 'Variables', 'View', 'View', 'Workflows'], 'char_count': 4476, 'word_count': 722, 'page_content': 'Workflow Designer\ncanvas.\nTo add alerts that send email notifications during the workflow, go to the\nAlerts\ntab in the\nWorkflow Setup panel\n.\nToggle\nEnable\nto turn the alert on or off. Select recipient email addresses from the user list. You can choose multiple recipients.\nWrite a custom alert message that is sent when the condition is met.\nWhen setting an execution time alert, toggle\nUse Absolute Time', 'chunk_index': 4}, vector=None, shard_key=None, order_value=None)]
[ 2025-08-10 22:55:17,101 ] test_main.py:82 root - INFO - Retrieved result for point ID: 65e3aa33-13d7-4688-98fd-7b6a24cbf91e
[ 2025-08-10 22:55:17,101 ] test_main.py:73 root - INFO - (Document(metadata={'_id': '2027003d-7c4e-4b6d-acd3-b391a775ae9a', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='Workflow Alerts | Infoveave Help\nSkip to content\nWorkflow Alerts'), 0.16666667)
[ 2025-08-10 22:55:17,164 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-10 22:55:17,165 ] test_main.py:81 root - INFO - [Record(id='2027003d-7c4e-4b6d-acd3-b391a775ae9a', payload={'url': 'https://infoveave-help.pages.dev/automation-v8/workflows/define-workflow/workflow-alerts-2/', 'title': 'workflow-alerts-2', 'section': 'automation', 'terminologies': ['Alerts', 'Infoveave', 'Workflows', 'Workflow Alerts'], 'char_count': 3832, 'word_count': 620, 'page_content': 'Workflow Alerts | Infoveave Help\nSkip to content\nWorkflow Alerts', 'chunk_index': 0}, vector=None, shard_key=None, order_value=None)]
[ 2025-08-10 22:55:17,166 ] test_main.py:82 root - INFO - Retrieved result for point ID: 2027003d-7c4e-4b6d-acd3-b391a775ae9a
[ 2025-08-10 22:55:17,166 ] test_main.py:73 root - INFO - (Document(metadata={'_id': '81a7ef81-eb12-4bcd-ad2e-403f547e7e50', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='Choose the days on which you want to execute the Workflow. By default, Infoveave sets it to every day. You can select specific days of the week, days of the month, or months.\nClick on the\nAdd'), 0.14285715)
[ 2025-08-10 22:55:17,228 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-10 22:55:17,229 ] test_main.py:81 root - INFO - [Record(id='81a7ef81-eb12-4bcd-ad2e-403f547e7e50', payload={'url': 'https://infoveave-help.pages.dev/automation-v8/jobs-v8/schedule-job/', 'title': 'schedule-job', 'section': 'automation', 'terminologies': ['Automation', 'Cron trigger', 'Emailhook trigger', 'Infoveave', 'Lists', 'Reports', 'Value', 'View', 'View', 'Webhook trigger', 'Workflows', 'Workflow Start trigger'], 'char_count': 5699, 'word_count': 937, 'page_content': 'Choose the days on which you want to execute the Workflow. By default, Infoveave sets it to every day. You can select specific days of the week, days of the month, or months.\nClick on the\nAdd', 'chunk_index': 5}, vector=None, shard_key=None, order_value=None)]
[ 2025-08-10 22:55:17,230 ] test_main.py:82 root - INFO - Retrieved result for point ID: 81a7ef81-eb12-4bcd-ad2e-403f547e7e50
[ 2025-08-10 22:55:17,230 ] test_main.py:73 root - INFO - (Document(metadata={'_id': '3989b1ef-a79d-4b1d-bce6-79cb5969aa26', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='Choose the days on which you want to execute the Workflow. By default, Infoveave sets it to every day. You can select specific days of the week, days of the month, or months.\nClick on the\nAdd'), 0.125)
[ 2025-08-10 22:55:17,300 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-10 22:55:17,301 ] test_main.py:81 root - INFO - [Record(id='3989b1ef-a79d-4b1d-bce6-79cb5969aa26', payload={'url': 'https://infoveave-help.pages.dev/automation-v8/workflows/define-workflow/workflow-start/', 'title': 'workflow-start', 'section': 'automation', 'terminologies': ['Automation', 'Cron trigger', 'Emailhook trigger', 'Infoveave', 'Lists', 'Reports', 'Value', 'View', 'View', 'Webhook trigger', 'Workflows', 'Workflow Start trigger'], 'char_count': 5699, 'word_count': 937, 'page_content': 'Choose the days on which you want to execute the Workflow. By default, Infoveave sets it to every day. You can select specific days of the week, days of the month, or months.\nClick on the\nAdd', 'chunk_index': 5}, vector=None, shard_key=None, order_value=None)]
[ 2025-08-10 22:55:17,302 ] test_main.py:82 root - INFO - Retrieved result for point ID: 3989b1ef-a79d-4b1d-bce6-79cb5969aa26
[ 2025-08-10 22:55:17,302 ] test_main.py:73 root - INFO - (Document(metadata={'_id': '3fd7ab5c-2d29-41ea-9ed7-0684f87b08e1', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='Add FTP Download Activity\n0:21\nConfigure FTP Download Activity\n0:31\nAdd Read Excel Files Activity\n0:35\nAdd Transform Activity using Javascript\n0:40\nAdd Round Numbers Activity\n0:46 Add Remove Duplicate Rows Activity\n0:52\nAdd Drop Columns Activity\n0:56\nAdd Rename Columns Activity\n1:01\nAdd Upload to Datasource Activity\n1:08\nExecute the Workflow and View Instance History'), 0.11111111)
[ 2025-08-10 22:55:17,378 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-10 22:55:17,379 ] test_main.py:81 root - INFO - [Record(id='3fd7ab5c-2d29-41ea-9ed7-0684f87b08e1', payload={'url': 'https://infoveave-help.pages.dev/automation-v8/jobs-v8/create-new-job/', 'title': 'create-new-job', 'section': 'automation', 'terminologies': ['Alerts', 'Automation', 'Infoveave', 'Measures', 'Query', 'Query Report', 'Value', 'Variables', 'View', 'View', 'Workflows'], 'char_count': 4476, 'word_count': 722, 'page_content': 'Add FTP Download Activity\n0:21\nConfigure FTP Download Activity\n0:31\nAdd Read Excel Files Activity\n0:35\nAdd Transform Activity using Javascript\n0:40\nAdd Round Numbers Activity\n0:46 Add Remove Duplicate Rows Activity\n0:52\nAdd Drop Columns Activity\n0:56\nAdd Rename Columns Activity\n1:01\nAdd Upload to Datasource Activity\n1:08\nExecute the Workflow and View Instance History', 'chunk_index': 1}, vector=None, shard_key=None, order_value=None)]
[ 2025-08-10 22:55:17,380 ] test_main.py:82 root - INFO - Retrieved result for point ID: 3fd7ab5c-2d29-41ea-9ed7-0684f87b08e1
[ 2025-08-10 22:55:17,380 ] test_main.py:73 root - INFO - (Document(metadata={'_id': '2adcd9bd-c3f6-41e9-8c27-26f07adfbe4c', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='Add FTP Download Activity\n0:21\nConfigure FTP Download Activity\n0:31\nAdd Read Excel Files Activity\n0:35\nAdd Transform Activity using Javascript\n0:40\nAdd Round Numbers Activity\n0:46 Add Remove Duplicate Rows Activity\n0:52\nAdd Drop Columns Activity\n0:56\nAdd Rename Columns Activity\n1:01\nAdd Upload to Datasource Activity\n1:08\nExecute the Workflow and View Instance History'), 0.1)
[ 2025-08-10 22:55:17,435 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-10 22:55:17,436 ] test_main.py:81 root - INFO - [Record(id='2adcd9bd-c3f6-41e9-8c27-26f07adfbe4c', payload={'url': 'https://infoveave-help.pages.dev/automation-v8/workflows/define-workflow/', 'title': 'define-workflow', 'section': 'automation', 'terminologies': ['Alerts', 'Automation', 'Infoveave', 'Measures', 'Query', 'Query Report', 'Value', 'Variables', 'View', 'View', 'Workflows'], 'char_count': 4476, 'word_count': 722, 'page_content': 'Add FTP Download Activity\n0:21\nConfigure FTP Download Activity\n0:31\nAdd Read Excel Files Activity\n0:35\nAdd Transform Activity using Javascript\n0:40\nAdd Round Numbers Activity\n0:46 Add Remove Duplicate Rows Activity\n0:52\nAdd Drop Columns Activity\n0:56\nAdd Rename Columns Activity\n1:01\nAdd Upload to Datasource Activity\n1:08\nExecute the Workflow and View Instance History', 'chunk_index': 1}, vector=None, shard_key=None, order_value=None)]
[ 2025-08-10 22:55:17,436 ] test_main.py:82 root - INFO - Retrieved result for point ID: 2adcd9bd-c3f6-41e9-8c27-26f07adfbe4c
[ 2025-08-10 22:55:17,436 ] test_main.py:73 root - INFO - (Document(metadata={'_id': 'bfe3c285-ffc2-4551-a19c-a5900bdd0aa3', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='E\nEmailhook trigger The Emailhook trigger initiates a Workflow based on incoming emails. You can set up specific email addresses that serve as Emailhooks. This allows for  automated processing of email-based activities or notifications . This trigger is useful for Workflows that involve email notifications or processing of data received via email.'), 0.09090909)
[ 2025-08-10 22:55:17,517 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-10 22:55:17,586 ] test_main.py:81 root - INFO - [Record(id='bfe3c285-ffc2-4551-a19c-a5900bdd0aa3', payload={'url': 'https://infoveave-help.pages.dev/introduction-to-infoveave/infoveave-terminologies/', 'title': 'infoveave-terminologies', 'section': 'introduction-to-infoveave', 'terminologies': ['Address Book', 'Alerts', 'Audit Log', 'Automation', 'Business Analysis', 'Calculated Columns', 'Calculated Measures', 'Catalogues', 'Client', 'Color Palette', 'Common Dimension filters', 'Component Panel', 'Component', 'Conditional Expressions', 'Connections', 'Control Centre', 'Creator', 'Cron trigger', 'Cube Designer', 'Custom Calendar', 'Custom Email', 'Database Connections', 'Datasources', 'Data Governance', 'Data Ingestion', 'Data Transformation', 'Data Visualization', 'Date Range Filter', 'Designer Canvas', 'Designer Layout', 'Dimensions', 'Domains', 'Emailhook trigger', 'Expression', 'Fixed Filters', 'Grid Layout', 'Hierarchies', 'Holiday Calendar', 'Infoboards', 'Infoboard Setup', 'Infoboard statistics', 'Infoveave', 'Infoveave menu', 'Insights', 'Lists', 'Linked Reports', 'Login statistics', 'Measures', 'ML Analysis', 'ML Model', 'My Organization', 'My Workspace', 'NGuage Forms', 'Query', 'Query Builder', 'Query Report', 'Reports', 'Retention Settings', 'Roles', 'SciPyR', 'Server Statistics', 'SMTP Settings', 'Statistical Analysis', 'Tags', 'Targets and Thresholds', 'Template Reports', 'Tenant', 'Tiers', 'Trash', 'Value', 'Variables', 'Version history', 'View', 'View', 'Viewer', 'Webhook trigger', 'What-If Analysis', 'What-If Formulae', 'Widget Configuration', 'Widget Customization', 'Widget statistics', 'Workflows', 'Workflow Alerts', 'Workflow Execution Status', 'Workflow Start trigger', 'Workflow Variables'], 'char_count': 25220, 'word_count': 3773, 'page_content': 'E\nEmailhook trigger The Emailhook trigger initiates a Workflow based on incoming emails. You can set up specific email addresses that serve as Emailhooks. This allows for  automated processing of email-based activities or notifications . This trigger is useful for Workflows that involve email notifications or processing of data received via email.', 'chunk_index': 13}, vector=None, shard_key=None, order_value=None)]
[ 2025-08-10 22:55:17,587 ] test_main.py:82 root - INFO - Retrieved result for point ID: bfe3c285-ffc2-4551-a19c-a5900bdd0aa3
[ 2025-08-10 22:55:17,587 ] test_main.py:126 root - INFO - Top context prepared for query rewriting.
[ 2025-08-10 22:55:17,587 ] test_main.py:103 root - INFO - Querying Neo4j for entities: ['Workflow Alerts', 'Tenant', 'My Workspace', 'Targets and Thresholds', 'Creator', 'Cron trigger', 'SciPyR', 'Common Dimension filters', 'Workflow Start trigger', 'Workflows', 'NGuage Forms', 'Value', 'Business Analysis', 'Designer Layout', 'Data Transformation', 'Query Report', 'Infoveave menu', 'Query', 'Query Builder', 'Retention Settings', 'Workflow Variables', 'Date Range Filter', 'Version history', 'My Organization', 'SMTP Settings', 'ML Model', 'Server Statistics', 'Variables', 'Datasources', 'Control Centre', 'Widget statistics', 'Designer Canvas', 'Custom Calendar', 'Infoboards', 'Viewer', 'Dimensions', 'Widget Configuration', 'Grid Layout', 'Client', 'Component Panel', 'Reports', 'Catalogues', 'Data Visualization', 'Template Reports', 'Infoveave', 'Widget Customization', 'Calculated Columns', 'Emailhook trigger', 'Lists', 'Measures', 'Database Connections', 'Roles', 'Component', 'Data Governance', 'Statistical Analysis', 'Hierarchies', 'Alerts', 'ML Analysis', 'Workflow Execution Status', 'Cube Designer', 'Infoboard Setup', 'Trash', 'What-If Formulae', 'Conditional Expressions', 'Automation', 'Holiday Calendar', 'What-If Analysis', 'Data Ingestion', 'Domains', 'Webhook trigger', 'Login statistics', 'Calculated Measures', 'Tiers', 'Audit Log', 'Connections', 'Tags', 'View', 'Linked Reports', 'Fixed Filters', 'Insights', 'Address Book', 'Infoboard statistics', 'Expression', 'Color Palette', 'Custom Email'] with hops=1 and top_n=50
[ 2025-08-10 22:55:19,023 ] result.py:337 neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: type)} {position: line: 5, column: 46, offset: 129} for query: '\n    UNWIND $names AS n\n    UNWIND $entities AS ent\n    MATCH (e {name: n})-[r]-(m)\n    RETURN e.name AS head, type(r) AS rel, r.type AS rel_type, m.name as tail, COUNT(*) as freq\n    LIMIT $limit\n    '
[ 2025-08-10 22:55:19,024 ] test_main.py:118 root - INFO - Retrieved 0 triplets from Neo4j.
[ 2025-08-10 22:55:19,024 ] test_main.py:134 root - INFO - Retrieved 0 related triplets from Neo4j.
[ 2025-08-10 22:55:19,024 ] test_main.py:139 root - INFO - Knowledge graph facts prepared for query rewriting.
[ 2025-08-10 22:55:19,026 ] test_main.py:144 root - INFO - Loaded rewritten query system prompt.
[ 2025-08-10 22:55:19,027 ] test_main.py:157 root - INFO - Loaded rewritten query user prompt.
[ 2025-08-10 22:55:20,036 ] _client.py:1025 httpx - INFO - HTTP Request: POST https://api.groq.com/openai/v1/chat/completions "HTTP/1.1 200 OK"
[ 2025-08-10 22:55:20,040 ] test_main.py:299 root - INFO - Rewritten query: Execute Query| Send Email
[ 2025-08-10 22:55:20,040 ] test_main.py:306 root - INFO - Rewritten query parts: ['Execute Query', 'Send Email']
[ 2025-08-10 22:55:20,040 ] test_main.py:315 root - INFO - Rewritten Query 1: Execute Query
[ 2025-08-10 22:55:20,620 ] test_main.py:318 root - INFO - Embedding generated for query 1.
[ 2025-08-10 22:55:21,828 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points/query "HTTP/1.1 200 OK"
[ 2025-08-10 22:55:21,882 ] test_main.py:323 root - INFO - Processing query part 1: Execute Query
[ 2025-08-10 22:55:21,902 ] test_main.py:71 root - INFO - Building context with metadata from documents...
[ 2025-08-10 22:55:21,903 ] test_main.py:73 root - INFO - (Document(metadata={'_id': '4bf7f9a7-fc4e-49bc-9caf-4fd89d8160ab', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='Execute Query | Infoveave Help\nSkip to content\nExecute Query\nDescription\nThe\nExecute Query'), 0.5)
[ 2025-08-10 22:55:21,968 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-10 22:55:21,968 ] test_main.py:81 root - INFO - [Record(id='4bf7f9a7-fc4e-49bc-9caf-4fd89d8160ab', payload={'url': 'https://infoveave-help.pages.dev/automation-v8/activities/execute-query/', 'title': 'execute-query', 'section': 'automation', 'terminologies': ['Infoveave', 'Query', 'Reports', 'Value'], 'char_count': 2330, 'word_count': 363, 'page_content': 'Execute Query | Infoveave Help\nSkip to content\nExecute Query\nDescription\nThe\nExecute Query', 'chunk_index': 0}, vector=None, shard_key=None, order_value=None)]
[ 2025-08-10 22:55:21,968 ] test_main.py:82 root - INFO - Retrieved result for point ID: 4bf7f9a7-fc4e-49bc-9caf-4fd89d8160ab
[ 2025-08-10 22:55:21,968 ] test_main.py:73 root - INFO - (Document(metadata={'_id': 'c4316ab6-9c63-42af-b504-74f8cdbc37df', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='This activity connects to your Google Cloud project, runs the specified query, and returns the results in tabular format. It is ideal for pulling real-time analytics, data transformations, or integrating cloud data into your workflow pipelines.\nUse case\n: Fetch customer order data by region for the last quarter directly from BigQuery to feed a dashboard or analytics engine.\nInput\nNot Applicable\nOutput\nOutput Type\nFormat\nDescription\nData\nTable Output of the executed BigQuery SQL query.\nConfiguration Fields\nField Name\nDescription\nConnection\nGoogle BigQuery connection (OAuth or service account). Required for access.\nProject\nGoogle Cloud Project ID containing the BigQuery datasets.\nQuery The SQL query string to be executed. Supports standard SQL syntax.\nSample Input\nNot Applicable\nSample Configuration\nField\nValue\nConnection\nGoogle BigQuery OAuth\nProject\ncustomer-data-analytics\nQuery'), 0.33333334)
[ 2025-08-10 22:55:22,034 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-10 22:55:22,080 ] test_main.py:81 root - INFO - [Record(id='c4316ab6-9c63-42af-b504-74f8cdbc37df', payload={'url': 'https://infoveave-help.pages.dev/automation-v8/activities/fetch-from-bigquery/', 'title': 'fetch-from-bigquery', 'section': 'automation', 'terminologies': ['Infoveave', 'Query', 'Value'], 'char_count': 1338, 'word_count': 194, 'page_content': 'This activity connects to your Google Cloud project, runs the specified query, and returns the results in tabular format. It is ideal for pulling real-time analytics, data transformations, or integrating cloud data into your workflow pipelines.\nUse case\n: Fetch customer order data by region for the last quarter directly from BigQuery to feed a dashboard or analytics engine.\nInput\nNot Applicable\nOutput\nOutput Type\nFormat\nDescription\nData\nTable Output of the executed BigQuery SQL query.\nConfiguration Fields\nField Name\nDescription\nConnection\nGoogle BigQuery connection (OAuth or service account). Required for access.\nProject\nGoogle Cloud Project ID containing the BigQuery datasets.\nQuery The SQL query string to be executed. Supports standard SQL syntax.\nSample Input\nNot Applicable\nSample Configuration\nField\nValue\nConnection\nGoogle BigQuery OAuth\nProject\ncustomer-data-analytics\nQuery', 'chunk_index': 1}, vector=None, shard_key=None, order_value=None)]
[ 2025-08-10 22:55:22,080 ] test_main.py:82 root - INFO - Retrieved result for point ID: c4316ab6-9c63-42af-b504-74f8cdbc37df
[ 2025-08-10 22:55:22,080 ] test_main.py:73 root - INFO - (Document(metadata={'_id': '21c3607e-54d8-44a9-b1b6-12646396ca58', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='activity executes a structured query (e.g., SQL) against a configured data source such as a relational database, data warehouse, or cloud storage engine . You can retrieve the results directly as tabular output or optionally save them to a file using configurable export settings. This activity is especially useful for dynamically pulling data into a workflow, generating reports, or integrating external data systems. When saving results to a file, it also supports advanced formatting using templates, encryption, and partitioning logic. Use this activity to:\nQuery databases and bring live data into workflows\nExport query results as Excel or CSV files\nApply formatting using templates and control sheet/row structure\nSecure output files with encryption and filename customization\nUse case\n: A data analyst can use this activity to run a sales report query on a PostgreSQL database. The output can be formatted using a template Excel file, encrypted using a secret key, and saved with a filename pattern that includes a timestamp.\nInput Type\nDescription\nData\nOptional incoming data used to influence the query or filenames (if dynamic).\nOutput\nOutput Type\nFormat\nDescription\nData\nTable or File Query results, either in-memory (as table) or written to file(s).\nConfiguration Fields\nField Name\nDescription\nDatasource Id Select the connection representing the data source (e.g., MySQL, SQL Server, Snowflake) where the query will run.\nQuery The query string (SQL or supported query language) to be executed on the selected data source. Supports variables if dynamic queries are needed.\nSave As File Enable this option to save the query result to a file instead of returning it as in-memory table data.\nSecret Key\nRequired only when “Save As File” is enabled. This encryption key secures the generated file’s content.'), 0.25)
[ 2025-08-10 22:55:22,154 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-10 22:55:22,155 ] test_main.py:81 root - INFO - [Record(id='21c3607e-54d8-44a9-b1b6-12646396ca58', payload={'url': 'https://infoveave-help.pages.dev/automation-v8/activities/query-datasource/', 'title': 'query-datasource', 'section': 'automation', 'terminologies': ['Infoveave', 'Query', 'Reports', 'Value', 'Variables', 'Workflows'], 'char_count': 3756, 'word_count': 590, 'page_content': 'activity executes a structured query (e.g., SQL) against a configured data source such as a relational database, data warehouse, or cloud storage engine . You can retrieve the results directly as tabular output or optionally save them to a file using configurable export settings. This activity is especially useful for dynamically pulling data into a workflow, generating reports, or integrating external data systems. When saving results to a file, it also supports advanced formatting using templates, encryption, and partitioning logic. Use this activity to:\nQuery databases and bring live data into workflows\nExport query results as Excel or CSV files\nApply formatting using templates and control sheet/row structure\nSecure output files with encryption and filename customization\nUse case\n: A data analyst can use this activity to run a sales report query on a PostgreSQL database. The output can be formatted using a template Excel file, encrypted using a secret key, and saved with a filename pattern that includes a timestamp.\nInput Type\nDescription\nData\nOptional incoming data used to influence the query or filenames (if dynamic).\nOutput\nOutput Type\nFormat\nDescription\nData\nTable or File Query results, either in-memory (as table) or written to file(s).\nConfiguration Fields\nField Name\nDescription\nDatasource Id Select the connection representing the data source (e.g., MySQL, SQL Server, Snowflake) where the query will run.\nQuery The query string (SQL or supported query language) to be executed on the selected data source. Supports variables if dynamic queries are needed.\nSave As File Enable this option to save the query result to a file instead of returning it as in-memory table data.\nSecret Key\nRequired only when “Save As File” is enabled. This encryption key secures the generated file’s content.', 'chunk_index': 1}, vector=None, shard_key=None, order_value=None)]
[ 2025-08-10 22:55:22,155 ] test_main.py:82 root - INFO - Retrieved result for point ID: 21c3607e-54d8-44a9-b1b6-12646396ca58
[ 2025-08-10 22:55:22,155 ] test_main.py:73 root - INFO - (Document(metadata={'_id': '65f1fed2-a4bd-4a52-aa8a-cc0e2c0490f2', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content="activity allows users to execute SQL queries on files or data stored in a connected data source (e.g., database, storage, or file-based system). This activity supports dynamic queries, and optionally allows saving the results to files with encryption, formatting, and custom output configuration.\nUse this activity to:\nExecute ad hoc or parameterized SQL queries on uploaded or connected data Retrieve transformed or filtered data for further processing\nGenerate reports or structured data files from query results\nUse Case\n: Useful in scenarios where data needs to be filtered, joined, aggregated, or reshaped before it’s used in reporting, validation, or export.\nInput\nType\nDescription\nFiles\nFiles/data available in the connection\nOutput\nType Format\nDescription\nData / File\nTable / File\nQuery result as a table or downloadable file\nConfiguration Fields\nField Name\nRequired\nDescription\nConnection\nYes\nConnection to the data source where the query should be executed.\nQuery Yes\nSQL query to be executed on the connected data source.\nSave As File\nNo\nIf enabled, the query result will be saved as a file.\nSecret Key\nConditional Encryption key used to secure the generated output file (enabled only if Save As File is true).\nFile Pattern\nConditional\nPattern for naming the generated files.\nSheet Name\nConditional Sheet name to use in the generated file (for Excel formats).\nFile\nConditional\nTemplate file to structure the output.\nSplit by Column\nConditional\nColumn name used to split the query result into multiple output files.\nStarting Row Conditional\nRow index in the template file from where data insertion begins.\nStarting Column\nConditional\nColumn index in the template file from where data insertion begins.\nSample Input\nNot applicable\n— data is pulled from the connected data source. Sample Configuration\nField\nValue\nConnection\nAzureBlobConnection\nQuery\nSELECT * FROM SalesData WHERE Region = 'East'\nSave As File\ntrue\nSecret Key\nEncrypt@123\nFile Pattern\nSales_Report_[Region]"), 0.2)
[ 2025-08-10 22:55:22,210 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-10 22:55:22,212 ] test_main.py:81 root - INFO - [Record(id='65f1fed2-a4bd-4a52-aa8a-cc0e2c0490f2', payload={'url': 'https://infoveave-help.pages.dev/automation-v8/activities/execute-query/', 'title': 'execute-query', 'section': 'automation', 'terminologies': ['Infoveave', 'Query', 'Reports', 'Value'], 'char_count': 2330, 'word_count': 363, 'page_content': "activity allows users to execute SQL queries on files or data stored in a connected data source (e.g., database, storage, or file-based system). This activity supports dynamic queries, and optionally allows saving the results to files with encryption, formatting, and custom output configuration.\nUse this activity to:\nExecute ad hoc or parameterized SQL queries on uploaded or connected data Retrieve transformed or filtered data for further processing\nGenerate reports or structured data files from query results\nUse Case\n: Useful in scenarios where data needs to be filtered, joined, aggregated, or reshaped before it’s used in reporting, validation, or export.\nInput\nType\nDescription\nFiles\nFiles/data available in the connection\nOutput\nType Format\nDescription\nData / File\nTable / File\nQuery result as a table or downloadable file\nConfiguration Fields\nField Name\nRequired\nDescription\nConnection\nYes\nConnection to the data source where the query should be executed.\nQuery Yes\nSQL query to be executed on the connected data source.\nSave As File\nNo\nIf enabled, the query result will be saved as a file.\nSecret Key\nConditional Encryption key used to secure the generated output file (enabled only if Save As File is true).\nFile Pattern\nConditional\nPattern for naming the generated files.\nSheet Name\nConditional Sheet name to use in the generated file (for Excel formats).\nFile\nConditional\nTemplate file to structure the output.\nSplit by Column\nConditional\nColumn name used to split the query result into multiple output files.\nStarting Row Conditional\nRow index in the template file from where data insertion begins.\nStarting Column\nConditional\nColumn index in the template file from where data insertion begins.\nSample Input\nNot applicable\n— data is pulled from the connected data source. Sample Configuration\nField\nValue\nConnection\nAzureBlobConnection\nQuery\nSELECT * FROM SalesData WHERE Region = 'East'\nSave As File\ntrue\nSecret Key\nEncrypt@123\nFile Pattern\nSales_Report_[Region]", 'chunk_index': 1}, vector=None, shard_key=None, order_value=None)]
[ 2025-08-10 22:55:22,212 ] test_main.py:82 root - INFO - Retrieved result for point ID: 65f1fed2-a4bd-4a52-aa8a-cc0e2c0490f2
[ 2025-08-10 22:55:22,212 ] test_main.py:73 root - INFO - (Document(metadata={'_id': '16772a9b-c89a-4370-ae9b-911286a37769', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content=').\nQuery Column Name\nColumn name to store the query string (portion after\n?\n) without parsing key-value pairs.\nFragment Column Name\nColumn name to store the fragment identifier (portion after\n#\n, if any). Note\n: This activity does not split the query string into key-value pairs — use the\nSplit HTTP Query\nactivity if you need that level of detail.\nSample Input\nemployee_id\nname\nurl\nE001\nJohn Doe'), 0.16666667)
[ 2025-08-10 22:55:22,282 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-10 22:55:22,283 ] test_main.py:81 root - INFO - [Record(id='16772a9b-c89a-4370-ae9b-911286a37769', payload={'url': 'https://infoveave-help.pages.dev/automation-v8/activities/split-url/', 'title': 'split-url', 'section': 'automation', 'terminologies': ['Infoveave', 'Query', 'Reports', 'Value'], 'char_count': 3191, 'word_count': 408, 'page_content': ').\nQuery Column Name\nColumn name to store the query string (portion after\n?\n) without parsing key-value pairs.\nFragment Column Name\nColumn name to store the fragment identifier (portion after\n#\n, if any). Note\n: This activity does not split the query string into key-value pairs — use the\nSplit HTTP Query\nactivity if you need that level of detail.\nSample Input\nemployee_id\nname\nurl\nE001\nJohn Doe', 'chunk_index': 2}, vector=None, shard_key=None, order_value=None)]
[ 2025-08-10 22:55:22,283 ] test_main.py:82 root - INFO - Retrieved result for point ID: 16772a9b-c89a-4370-ae9b-911286a37769
[ 2025-08-10 22:55:22,283 ] test_main.py:184 root - INFO - Loaded rewritten query user prompt.
[ 2025-08-10 22:55:23,208 ] _client.py:1025 httpx - INFO - HTTP Request: POST https://api.groq.com/openai/v1/chat/completions "HTTP/1.1 200 OK"
[ 2025-08-10 22:55:23,216 ] test_main.py:326 root - INFO - Response for query part 1: The **Execute Query** activity in Infoveave allows you to run SQL queries against your connected data sources.  

Here's a breakdown:

* **Purpose:** This activity is designed to retrieve data from databases, data warehouses, or cloud storage engines by executing SQL queries.

* **Use Cases:**
    * **Real-time Analytics:** Fetch up-to-date data for dashboards or reporting.
    * **Data Transformations:**  Modify and reshape data within your workflow.
    * **Data Integration:**  Bring external data into your Infoveave pipelines.

* **Key Features:**
    * **Connection:** You'll need to specify a connection to your data source (e.g., MySQL, PostgreSQL, BigQuery).
    * **Query:**  Enter your SQL query string. The activity supports standard SQL syntax.
    * **Output:** The results of your query are returned as a tabular dataset.

* **Where to Find More Information:**
    [https://infoveave-help.pages.dev/automation-v8/activities/execute-query/](https://infoveave-help.pages.dev/automation-v8/activities/execute-query/) 



Let me know if you have any other questions about the Execute Query activity or need help with a specific use case!
[ 2025-08-10 22:55:23,216 ] test_main.py:329 root - INFO - [(Document(metadata={'_id': '4bf7f9a7-fc4e-49bc-9caf-4fd89d8160ab', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='Execute Query | Infoveave Help\nSkip to content\nExecute Query\nDescription\nThe\nExecute Query'), 0.5), (Document(metadata={'_id': 'c4316ab6-9c63-42af-b504-74f8cdbc37df', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='This activity connects to your Google Cloud project, runs the specified query, and returns the results in tabular format. It is ideal for pulling real-time analytics, data transformations, or integrating cloud data into your workflow pipelines.\nUse case\n: Fetch customer order data by region for the last quarter directly from BigQuery to feed a dashboard or analytics engine.\nInput\nNot Applicable\nOutput\nOutput Type\nFormat\nDescription\nData\nTable Output of the executed BigQuery SQL query.\nConfiguration Fields\nField Name\nDescription\nConnection\nGoogle BigQuery connection (OAuth or service account). Required for access.\nProject\nGoogle Cloud Project ID containing the BigQuery datasets.\nQuery The SQL query string to be executed. Supports standard SQL syntax.\nSample Input\nNot Applicable\nSample Configuration\nField\nValue\nConnection\nGoogle BigQuery OAuth\nProject\ncustomer-data-analytics\nQuery'), 0.33333334), (Document(metadata={'_id': '21c3607e-54d8-44a9-b1b6-12646396ca58', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='activity executes a structured query (e.g., SQL) against a configured data source such as a relational database, data warehouse, or cloud storage engine . You can retrieve the results directly as tabular output or optionally save them to a file using configurable export settings. This activity is especially useful for dynamically pulling data into a workflow, generating reports, or integrating external data systems. When saving results to a file, it also supports advanced formatting using templates, encryption, and partitioning logic. Use this activity to:\nQuery databases and bring live data into workflows\nExport query results as Excel or CSV files\nApply formatting using templates and control sheet/row structure\nSecure output files with encryption and filename customization\nUse case\n: A data analyst can use this activity to run a sales report query on a PostgreSQL database. The output can be formatted using a template Excel file, encrypted using a secret key, and saved with a filename pattern that includes a timestamp.\nInput Type\nDescription\nData\nOptional incoming data used to influence the query or filenames (if dynamic).\nOutput\nOutput Type\nFormat\nDescription\nData\nTable or File Query results, either in-memory (as table) or written to file(s).\nConfiguration Fields\nField Name\nDescription\nDatasource Id Select the connection representing the data source (e.g., MySQL, SQL Server, Snowflake) where the query will run.\nQuery The query string (SQL or supported query language) to be executed on the selected data source. Supports variables if dynamic queries are needed.\nSave As File Enable this option to save the query result to a file instead of returning it as in-memory table data.\nSecret Key\nRequired only when “Save As File” is enabled. This encryption key secures the generated file’s content.'), 0.25), (Document(metadata={'_id': '65f1fed2-a4bd-4a52-aa8a-cc0e2c0490f2', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content="activity allows users to execute SQL queries on files or data stored in a connected data source (e.g., database, storage, or file-based system). This activity supports dynamic queries, and optionally allows saving the results to files with encryption, formatting, and custom output configuration.\nUse this activity to:\nExecute ad hoc or parameterized SQL queries on uploaded or connected data Retrieve transformed or filtered data for further processing\nGenerate reports or structured data files from query results\nUse Case\n: Useful in scenarios where data needs to be filtered, joined, aggregated, or reshaped before it’s used in reporting, validation, or export.\nInput\nType\nDescription\nFiles\nFiles/data available in the connection\nOutput\nType Format\nDescription\nData / File\nTable / File\nQuery result as a table or downloadable file\nConfiguration Fields\nField Name\nRequired\nDescription\nConnection\nYes\nConnection to the data source where the query should be executed.\nQuery Yes\nSQL query to be executed on the connected data source.\nSave As File\nNo\nIf enabled, the query result will be saved as a file.\nSecret Key\nConditional Encryption key used to secure the generated output file (enabled only if Save As File is true).\nFile Pattern\nConditional\nPattern for naming the generated files.\nSheet Name\nConditional Sheet name to use in the generated file (for Excel formats).\nFile\nConditional\nTemplate file to structure the output.\nSplit by Column\nConditional\nColumn name used to split the query result into multiple output files.\nStarting Row Conditional\nRow index in the template file from where data insertion begins.\nStarting Column\nConditional\nColumn index in the template file from where data insertion begins.\nSample Input\nNot applicable\n— data is pulled from the connected data source. Sample Configuration\nField\nValue\nConnection\nAzureBlobConnection\nQuery\nSELECT * FROM SalesData WHERE Region = 'East'\nSave As File\ntrue\nSecret Key\nEncrypt@123\nFile Pattern\nSales_Report_[Region]"), 0.2), (Document(metadata={'_id': '16772a9b-c89a-4370-ae9b-911286a37769', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content=').\nQuery Column Name\nColumn name to store the query string (portion after\n?\n) without parsing key-value pairs.\nFragment Column Name\nColumn name to store the fragment identifier (portion after\n#\n, if any). Note\n: This activity does not split the query string into key-value pairs — use the\nSplit HTTP Query\nactivity if you need that level of detail.\nSample Input\nemployee_id\nname\nurl\nE001\nJohn Doe'), 0.16666667)]
[ 2025-08-10 22:55:23,235 ] test_main.py:71 root - INFO - Building context with metadata from documents...
[ 2025-08-10 22:55:23,235 ] test_main.py:73 root - INFO - (Document(metadata={'_id': '4bf7f9a7-fc4e-49bc-9caf-4fd89d8160ab', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='Execute Query | Infoveave Help\nSkip to content\nExecute Query\nDescription\nThe\nExecute Query'), 0.5)
[ 2025-08-10 22:55:23,294 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-10 22:55:23,295 ] test_main.py:81 root - INFO - [Record(id='4bf7f9a7-fc4e-49bc-9caf-4fd89d8160ab', payload={'url': 'https://infoveave-help.pages.dev/automation-v8/activities/execute-query/', 'title': 'execute-query', 'section': 'automation', 'terminologies': ['Infoveave', 'Query', 'Reports', 'Value'], 'char_count': 2330, 'word_count': 363, 'page_content': 'Execute Query | Infoveave Help\nSkip to content\nExecute Query\nDescription\nThe\nExecute Query', 'chunk_index': 0}, vector=None, shard_key=None, order_value=None)]
[ 2025-08-10 22:55:23,295 ] test_main.py:82 root - INFO - Retrieved result for point ID: 4bf7f9a7-fc4e-49bc-9caf-4fd89d8160ab
[ 2025-08-10 22:55:23,295 ] test_main.py:73 root - INFO - (Document(metadata={'_id': 'c4316ab6-9c63-42af-b504-74f8cdbc37df', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='This activity connects to your Google Cloud project, runs the specified query, and returns the results in tabular format. It is ideal for pulling real-time analytics, data transformations, or integrating cloud data into your workflow pipelines.\nUse case\n: Fetch customer order data by region for the last quarter directly from BigQuery to feed a dashboard or analytics engine.\nInput\nNot Applicable\nOutput\nOutput Type\nFormat\nDescription\nData\nTable Output of the executed BigQuery SQL query.\nConfiguration Fields\nField Name\nDescription\nConnection\nGoogle BigQuery connection (OAuth or service account). Required for access.\nProject\nGoogle Cloud Project ID containing the BigQuery datasets.\nQuery The SQL query string to be executed. Supports standard SQL syntax.\nSample Input\nNot Applicable\nSample Configuration\nField\nValue\nConnection\nGoogle BigQuery OAuth\nProject\ncustomer-data-analytics\nQuery'), 0.33333334)
[ 2025-08-10 22:55:23,350 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-10 22:55:23,351 ] test_main.py:81 root - INFO - [Record(id='c4316ab6-9c63-42af-b504-74f8cdbc37df', payload={'url': 'https://infoveave-help.pages.dev/automation-v8/activities/fetch-from-bigquery/', 'title': 'fetch-from-bigquery', 'section': 'automation', 'terminologies': ['Infoveave', 'Query', 'Value'], 'char_count': 1338, 'word_count': 194, 'page_content': 'This activity connects to your Google Cloud project, runs the specified query, and returns the results in tabular format. It is ideal for pulling real-time analytics, data transformations, or integrating cloud data into your workflow pipelines.\nUse case\n: Fetch customer order data by region for the last quarter directly from BigQuery to feed a dashboard or analytics engine.\nInput\nNot Applicable\nOutput\nOutput Type\nFormat\nDescription\nData\nTable Output of the executed BigQuery SQL query.\nConfiguration Fields\nField Name\nDescription\nConnection\nGoogle BigQuery connection (OAuth or service account). Required for access.\nProject\nGoogle Cloud Project ID containing the BigQuery datasets.\nQuery The SQL query string to be executed. Supports standard SQL syntax.\nSample Input\nNot Applicable\nSample Configuration\nField\nValue\nConnection\nGoogle BigQuery OAuth\nProject\ncustomer-data-analytics\nQuery', 'chunk_index': 1}, vector=None, shard_key=None, order_value=None)]
[ 2025-08-10 22:55:23,351 ] test_main.py:82 root - INFO - Retrieved result for point ID: c4316ab6-9c63-42af-b504-74f8cdbc37df
[ 2025-08-10 22:55:23,351 ] test_main.py:73 root - INFO - (Document(metadata={'_id': '21c3607e-54d8-44a9-b1b6-12646396ca58', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='activity executes a structured query (e.g., SQL) against a configured data source such as a relational database, data warehouse, or cloud storage engine . You can retrieve the results directly as tabular output or optionally save them to a file using configurable export settings. This activity is especially useful for dynamically pulling data into a workflow, generating reports, or integrating external data systems. When saving results to a file, it also supports advanced formatting using templates, encryption, and partitioning logic. Use this activity to:\nQuery databases and bring live data into workflows\nExport query results as Excel or CSV files\nApply formatting using templates and control sheet/row structure\nSecure output files with encryption and filename customization\nUse case\n: A data analyst can use this activity to run a sales report query on a PostgreSQL database. The output can be formatted using a template Excel file, encrypted using a secret key, and saved with a filename pattern that includes a timestamp.\nInput Type\nDescription\nData\nOptional incoming data used to influence the query or filenames (if dynamic).\nOutput\nOutput Type\nFormat\nDescription\nData\nTable or File Query results, either in-memory (as table) or written to file(s).\nConfiguration Fields\nField Name\nDescription\nDatasource Id Select the connection representing the data source (e.g., MySQL, SQL Server, Snowflake) where the query will run.\nQuery The query string (SQL or supported query language) to be executed on the selected data source. Supports variables if dynamic queries are needed.\nSave As File Enable this option to save the query result to a file instead of returning it as in-memory table data.\nSecret Key\nRequired only when “Save As File” is enabled. This encryption key secures the generated file’s content.'), 0.25)
[ 2025-08-10 22:55:23,408 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-10 22:55:23,409 ] test_main.py:81 root - INFO - [Record(id='21c3607e-54d8-44a9-b1b6-12646396ca58', payload={'url': 'https://infoveave-help.pages.dev/automation-v8/activities/query-datasource/', 'title': 'query-datasource', 'section': 'automation', 'terminologies': ['Infoveave', 'Query', 'Reports', 'Value', 'Variables', 'Workflows'], 'char_count': 3756, 'word_count': 590, 'page_content': 'activity executes a structured query (e.g., SQL) against a configured data source such as a relational database, data warehouse, or cloud storage engine . You can retrieve the results directly as tabular output or optionally save them to a file using configurable export settings. This activity is especially useful for dynamically pulling data into a workflow, generating reports, or integrating external data systems. When saving results to a file, it also supports advanced formatting using templates, encryption, and partitioning logic. Use this activity to:\nQuery databases and bring live data into workflows\nExport query results as Excel or CSV files\nApply formatting using templates and control sheet/row structure\nSecure output files with encryption and filename customization\nUse case\n: A data analyst can use this activity to run a sales report query on a PostgreSQL database. The output can be formatted using a template Excel file, encrypted using a secret key, and saved with a filename pattern that includes a timestamp.\nInput Type\nDescription\nData\nOptional incoming data used to influence the query or filenames (if dynamic).\nOutput\nOutput Type\nFormat\nDescription\nData\nTable or File Query results, either in-memory (as table) or written to file(s).\nConfiguration Fields\nField Name\nDescription\nDatasource Id Select the connection representing the data source (e.g., MySQL, SQL Server, Snowflake) where the query will run.\nQuery The query string (SQL or supported query language) to be executed on the selected data source. Supports variables if dynamic queries are needed.\nSave As File Enable this option to save the query result to a file instead of returning it as in-memory table data.\nSecret Key\nRequired only when “Save As File” is enabled. This encryption key secures the generated file’s content.', 'chunk_index': 1}, vector=None, shard_key=None, order_value=None)]
[ 2025-08-10 22:55:23,409 ] test_main.py:82 root - INFO - Retrieved result for point ID: 21c3607e-54d8-44a9-b1b6-12646396ca58
[ 2025-08-10 22:55:23,409 ] test_main.py:73 root - INFO - (Document(metadata={'_id': '65f1fed2-a4bd-4a52-aa8a-cc0e2c0490f2', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content="activity allows users to execute SQL queries on files or data stored in a connected data source (e.g., database, storage, or file-based system). This activity supports dynamic queries, and optionally allows saving the results to files with encryption, formatting, and custom output configuration.\nUse this activity to:\nExecute ad hoc or parameterized SQL queries on uploaded or connected data Retrieve transformed or filtered data for further processing\nGenerate reports or structured data files from query results\nUse Case\n: Useful in scenarios where data needs to be filtered, joined, aggregated, or reshaped before it’s used in reporting, validation, or export.\nInput\nType\nDescription\nFiles\nFiles/data available in the connection\nOutput\nType Format\nDescription\nData / File\nTable / File\nQuery result as a table or downloadable file\nConfiguration Fields\nField Name\nRequired\nDescription\nConnection\nYes\nConnection to the data source where the query should be executed.\nQuery Yes\nSQL query to be executed on the connected data source.\nSave As File\nNo\nIf enabled, the query result will be saved as a file.\nSecret Key\nConditional Encryption key used to secure the generated output file (enabled only if Save As File is true).\nFile Pattern\nConditional\nPattern for naming the generated files.\nSheet Name\nConditional Sheet name to use in the generated file (for Excel formats).\nFile\nConditional\nTemplate file to structure the output.\nSplit by Column\nConditional\nColumn name used to split the query result into multiple output files.\nStarting Row Conditional\nRow index in the template file from where data insertion begins.\nStarting Column\nConditional\nColumn index in the template file from where data insertion begins.\nSample Input\nNot applicable\n— data is pulled from the connected data source. Sample Configuration\nField\nValue\nConnection\nAzureBlobConnection\nQuery\nSELECT * FROM SalesData WHERE Region = 'East'\nSave As File\ntrue\nSecret Key\nEncrypt@123\nFile Pattern\nSales_Report_[Region]"), 0.2)
[ 2025-08-10 22:55:23,496 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-10 22:55:23,497 ] test_main.py:81 root - INFO - [Record(id='65f1fed2-a4bd-4a52-aa8a-cc0e2c0490f2', payload={'url': 'https://infoveave-help.pages.dev/automation-v8/activities/execute-query/', 'title': 'execute-query', 'section': 'automation', 'terminologies': ['Infoveave', 'Query', 'Reports', 'Value'], 'char_count': 2330, 'word_count': 363, 'page_content': "activity allows users to execute SQL queries on files or data stored in a connected data source (e.g., database, storage, or file-based system). This activity supports dynamic queries, and optionally allows saving the results to files with encryption, formatting, and custom output configuration.\nUse this activity to:\nExecute ad hoc or parameterized SQL queries on uploaded or connected data Retrieve transformed or filtered data for further processing\nGenerate reports or structured data files from query results\nUse Case\n: Useful in scenarios where data needs to be filtered, joined, aggregated, or reshaped before it’s used in reporting, validation, or export.\nInput\nType\nDescription\nFiles\nFiles/data available in the connection\nOutput\nType Format\nDescription\nData / File\nTable / File\nQuery result as a table or downloadable file\nConfiguration Fields\nField Name\nRequired\nDescription\nConnection\nYes\nConnection to the data source where the query should be executed.\nQuery Yes\nSQL query to be executed on the connected data source.\nSave As File\nNo\nIf enabled, the query result will be saved as a file.\nSecret Key\nConditional Encryption key used to secure the generated output file (enabled only if Save As File is true).\nFile Pattern\nConditional\nPattern for naming the generated files.\nSheet Name\nConditional Sheet name to use in the generated file (for Excel formats).\nFile\nConditional\nTemplate file to structure the output.\nSplit by Column\nConditional\nColumn name used to split the query result into multiple output files.\nStarting Row Conditional\nRow index in the template file from where data insertion begins.\nStarting Column\nConditional\nColumn index in the template file from where data insertion begins.\nSample Input\nNot applicable\n— data is pulled from the connected data source. Sample Configuration\nField\nValue\nConnection\nAzureBlobConnection\nQuery\nSELECT * FROM SalesData WHERE Region = 'East'\nSave As File\ntrue\nSecret Key\nEncrypt@123\nFile Pattern\nSales_Report_[Region]", 'chunk_index': 1}, vector=None, shard_key=None, order_value=None)]
[ 2025-08-10 22:55:23,497 ] test_main.py:82 root - INFO - Retrieved result for point ID: 65f1fed2-a4bd-4a52-aa8a-cc0e2c0490f2
[ 2025-08-10 22:55:23,497 ] test_main.py:73 root - INFO - (Document(metadata={'_id': '16772a9b-c89a-4370-ae9b-911286a37769', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content=').\nQuery Column Name\nColumn name to store the query string (portion after\n?\n) without parsing key-value pairs.\nFragment Column Name\nColumn name to store the fragment identifier (portion after\n#\n, if any). Note\n: This activity does not split the query string into key-value pairs — use the\nSplit HTTP Query\nactivity if you need that level of detail.\nSample Input\nemployee_id\nname\nurl\nE001\nJohn Doe'), 0.16666667)
[ 2025-08-10 22:55:23,554 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-10 22:55:23,554 ] test_main.py:81 root - INFO - [Record(id='16772a9b-c89a-4370-ae9b-911286a37769', payload={'url': 'https://infoveave-help.pages.dev/automation-v8/activities/split-url/', 'title': 'split-url', 'section': 'automation', 'terminologies': ['Infoveave', 'Query', 'Reports', 'Value'], 'char_count': 3191, 'word_count': 408, 'page_content': ').\nQuery Column Name\nColumn name to store the query string (portion after\n?\n) without parsing key-value pairs.\nFragment Column Name\nColumn name to store the fragment identifier (portion after\n#\n, if any). Note\n: This activity does not split the query string into key-value pairs — use the\nSplit HTTP Query\nactivity if you need that level of detail.\nSample Input\nemployee_id\nname\nurl\nE001\nJohn Doe', 'chunk_index': 2}, vector=None, shard_key=None, order_value=None)]
[ 2025-08-10 22:55:23,555 ] test_main.py:82 root - INFO - Retrieved result for point ID: 16772a9b-c89a-4370-ae9b-911286a37769
[ 2025-08-10 22:55:23,555 ] test_main.py:315 root - INFO - Rewritten Query 2: Send Email
[ 2025-08-10 22:55:24,016 ] test_main.py:318 root - INFO - Embedding generated for query 2.
[ 2025-08-10 22:55:25,227 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points/query "HTTP/1.1 200 OK"
[ 2025-08-10 22:55:25,266 ] test_main.py:323 root - INFO - Processing query part 2: Send Email
[ 2025-08-10 22:55:25,290 ] test_main.py:71 root - INFO - Building context with metadata from documents...
[ 2025-08-10 22:55:25,290 ] test_main.py:73 root - INFO - (Document(metadata={'_id': 'b0c2000b-2a94-480e-8ade-5ccb489ed9ea', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='Send Email | Infoveave Help\nSkip to content\nSend Email\nDescription\nThe\nSend Email'), 0.5)
[ 2025-08-10 22:55:25,346 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-10 22:55:25,347 ] test_main.py:81 root - INFO - [Record(id='b0c2000b-2a94-480e-8ade-5ccb489ed9ea', payload={'url': 'https://infoveave-help.pages.dev/automation-v8/activities/send-email/', 'title': 'send-email', 'section': 'automation', 'terminologies': ['Infoveave', 'Value'], 'char_count': 3312, 'word_count': 495, 'page_content': 'Send Email | Infoveave Help\nSkip to content\nSend Email\nDescription\nThe\nSend Email', 'chunk_index': 0}, vector=None, shard_key=None, order_value=None)]
[ 2025-08-10 22:55:25,347 ] test_main.py:82 root - INFO - Retrieved result for point ID: b0c2000b-2a94-480e-8ade-5ccb489ed9ea
[ 2025-08-10 22:55:25,347 ] test_main.py:73 root - INFO - (Document(metadata={'_id': 'de5e3b97-dd0f-4d05-8da9-ae3c750c78cc', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='activity allows you to compose and send emails as part of a workflow. You can configure recipient addresses, subject, body content, and attachments . The activity also supports dynamic emailing using fields from input data, and allows the use of pre-designed Infoveave templates for styling and formatting consistency. Use this activity to:\nSend individual or bulk emails based on incoming data\nAttach files generated in the workflow\nFormat emails using templates for consistency\nEmbed processed data directly into the email body\nUse case\n: A workflow generates a monthly sales report and automatically sends personalized emails to each regional manager with their region’s data attached and included in the body.\nInput\nType\nDescription\nData'), 0.33333334)
[ 2025-08-10 22:55:25,406 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-10 22:55:25,455 ] test_main.py:81 root - INFO - [Record(id='de5e3b97-dd0f-4d05-8da9-ae3c750c78cc', payload={'url': 'https://infoveave-help.pages.dev/automation-v8/activities/send-email/', 'title': 'send-email', 'section': 'automation', 'terminologies': ['Infoveave', 'Value'], 'char_count': 3312, 'word_count': 495, 'page_content': 'activity allows you to compose and send emails as part of a workflow. You can configure recipient addresses, subject, body content, and attachments . The activity also supports dynamic emailing using fields from input data, and allows the use of pre-designed Infoveave templates for styling and formatting consistency. Use this activity to:\nSend individual or bulk emails based on incoming data\nAttach files generated in the workflow\nFormat emails using templates for consistency\nEmbed processed data directly into the email body\nUse case\n: A workflow generates a monthly sales report and automatically sends personalized emails to each regional manager with their region’s data attached and included in the body.\nInput\nType\nDescription\nData', 'chunk_index': 1}, vector=None, shard_key=None, order_value=None)]
[ 2025-08-10 22:55:25,456 ] test_main.py:82 root - INFO - Retrieved result for point ID: de5e3b97-dd0f-4d05-8da9-ae3c750c78cc
[ 2025-08-10 22:55:25,456 ] test_main.py:73 root - INFO - (Document(metadata={'_id': '79fddbc7-ebeb-4a13-9afb-02e3c3ec7774', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='(Optional) Tabular data used to populate dynamic fields like email addresses, template content, or attachment grouping.\nOutput\nOutput Type\nFormat\nDescription\nEmail Info\nTable Status of sent emails including recipient, success, and any errors encountered.\nConfiguration Fields\nField Name\nDescription\nConnection\nMail server connection to send emails (OAuth or SMTP supported).\nUse Default Credentials If enabled, uses Infoveave’s default email credentials. Disable to use custom authentication.\nUse Email Address From Data\nIf enabled, pulls recipient addresses from a specified column in the input data.\nEmail Column The column in the data containing the recipient’s email address (required if using email from data).\nEmail To Address\nStatic recipient(s) for the “To” field (comma-separated).\nEmail CC Address Email addresses for the “CC” field (comma-separated).\nEmail BCC Address\nEmail addresses for the “BCC” field.\nSubject\nSubject line of the email. Can be static or mapped from input data.\nContent The main body content of the email. Supports plain text or HTML.\nUse Infoveave Template\nWhen enabled, applies an Infoveave-designed template to the email layout.\nRerun Template Ensures template consistency across multiple emails in the same run.\nAttachment Name\nName of the attachment file (e.g.,\nSalesReport_May2025.xlsx\n).\nSplit By Column Splits data into separate attachments based on values in this column (used in bulk personalization).\nSheet Name\nThe name of the worksheet in the template used for formatting the attachment content.\nSend Data In Email Body If enabled, includes input data as a formatted table within the body of the email.\nAttachment File Pattern\nPattern to identify which files to attach from prior activities (e.g.,\n"*.pdf"\n).\nCombine\nSplit By Column with\nEmail Column\nto send a unique email with corresponding data and attachment per recipient.\nSample Input\nNot applicable\n(used only if sending emails dynamically per row or attaching generated data).\nSample Configuration\nField\nValue'), 0.25)
[ 2025-08-10 22:55:25,519 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-10 22:55:25,586 ] test_main.py:81 root - INFO - [Record(id='79fddbc7-ebeb-4a13-9afb-02e3c3ec7774', payload={'url': 'https://infoveave-help.pages.dev/automation-v8/activities/send-email/', 'title': 'send-email', 'section': 'automation', 'terminologies': ['Infoveave', 'Value'], 'char_count': 3312, 'word_count': 495, 'page_content': '(Optional) Tabular data used to populate dynamic fields like email addresses, template content, or attachment grouping.\nOutput\nOutput Type\nFormat\nDescription\nEmail Info\nTable Status of sent emails including recipient, success, and any errors encountered.\nConfiguration Fields\nField Name\nDescription\nConnection\nMail server connection to send emails (OAuth or SMTP supported).\nUse Default Credentials If enabled, uses Infoveave’s default email credentials. Disable to use custom authentication.\nUse Email Address From Data\nIf enabled, pulls recipient addresses from a specified column in the input data.\nEmail Column The column in the data containing the recipient’s email address (required if using email from data).\nEmail To Address\nStatic recipient(s) for the “To” field (comma-separated).\nEmail CC Address Email addresses for the “CC” field (comma-separated).\nEmail BCC Address\nEmail addresses for the “BCC” field.\nSubject\nSubject line of the email. Can be static or mapped from input data.\nContent The main body content of the email. Supports plain text or HTML.\nUse Infoveave Template\nWhen enabled, applies an Infoveave-designed template to the email layout.\nRerun Template Ensures template consistency across multiple emails in the same run.\nAttachment Name\nName of the attachment file (e.g.,\nSalesReport_May2025.xlsx\n).\nSplit By Column Splits data into separate attachments based on values in this column (used in bulk personalization).\nSheet Name\nThe name of the worksheet in the template used for formatting the attachment content.\nSend Data In Email Body If enabled, includes input data as a formatted table within the body of the email.\nAttachment File Pattern\nPattern to identify which files to attach from prior activities (e.g.,\n"*.pdf"\n).\nCombine\nSplit By Column with\nEmail Column\nto send a unique email with corresponding data and attachment per recipient.\nSample Input\nNot applicable\n(used only if sending emails dynamically per row or attaching generated data).\nSample Configuration\nField\nValue', 'chunk_index': 2}, vector=None, shard_key=None, order_value=None)]
[ 2025-08-10 22:55:25,586 ] test_main.py:82 root - INFO - Retrieved result for point ID: 79fddbc7-ebeb-4a13-9afb-02e3c3ec7774
[ 2025-08-10 22:55:25,586 ] test_main.py:73 root - INFO - (Document(metadata={'_id': 'ea0e4e86-0f23-462b-a182-48cedad8fdd9', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='2025-07-01T10:05:00Z\njohn@example.com\nWelcome Email\n18KB\nonboarding\nev1235\nopened\n2025-07-01T10:08:00Z jane@example.com\nPromo Offer\n22KB\npromotions\nFor\nMessages\nEntity (JSON):\n{\n"headers"\n: {\n"message-id"\n:\n"\n<abc@mailgun.org>'), 0.2)
[ 2025-08-10 22:55:25,642 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-10 22:55:25,643 ] test_main.py:81 root - INFO - [Record(id='ea0e4e86-0f23-462b-a182-48cedad8fdd9', payload={'url': 'https://infoveave-help.pages.dev/automation-v8/activities/mailgun/', 'title': 'mailgun', 'section': 'automation', 'terminologies': ['Infoveave', 'Tags', 'Value', 'Workflows'], 'char_count': 3213, 'word_count': 485, 'page_content': '2025-07-01T10:05:00Z\njohn@example.com\nWelcome Email\n18KB\nonboarding\nev1235\nopened\n2025-07-01T10:08:00Z jane@example.com\nPromo Offer\n22KB\npromotions\nFor\nMessages\nEntity (JSON):\n{\n"headers"\n: {\n"message-id"\n:\n"\n<abc@mailgun.org>', 'chunk_index': 3}, vector=None, shard_key=None, order_value=None)]
[ 2025-08-10 22:55:25,643 ] test_main.py:82 root - INFO - Retrieved result for point ID: ea0e4e86-0f23-462b-a182-48cedad8fdd9
[ 2025-08-10 22:55:25,643 ] test_main.py:73 root - INFO - (Document(metadata={'_id': 'b6d38099-c9de-471f-973c-0f9d734b02ec', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='Activity Step\nReplaced Values\nSendEmail_12345\nStep 1\nCustomerName: John Doe\nSendEmail_67890\nStep 2\nCustomerName: Jane Smith'), 0.16666667)
[ 2025-08-10 22:55:25,700 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-10 22:55:25,701 ] test_main.py:81 root - INFO - [Record(id='b6d38099-c9de-471f-973c-0f9d734b02ec', payload={'url': 'https://infoveave-help.pages.dev/automation-v8/activities/start-iteration/', 'title': 'start-iteration', 'section': 'automation', 'terminologies': ['Infoveave', 'Value'], 'char_count': 2180, 'word_count': 314, 'page_content': 'Activity Step\nReplaced Values\nSendEmail_12345\nStep 1\nCustomerName: John Doe\nSendEmail_67890\nStep 2\nCustomerName: Jane Smith', 'chunk_index': 2}, vector=None, shard_key=None, order_value=None)]
[ 2025-08-10 22:55:25,702 ] test_main.py:82 root - INFO - Retrieved result for point ID: b6d38099-c9de-471f-973c-0f9d734b02ec
[ 2025-08-10 22:55:25,702 ] test_main.py:184 root - INFO - Loaded rewritten query user prompt.
[ 2025-08-10 22:55:27,151 ] _client.py:1025 httpx - INFO - HTTP Request: POST https://api.groq.com/openai/v1/chat/completions "HTTP/1.1 200 OK"
[ 2025-08-10 22:55:27,157 ] test_main.py:326 root - INFO - Response for query part 2: The **Send Email** activity in Infoveave allows you to compose and send emails as part of a workflow. 

You can configure recipient addresses, subject, body content, and attachments. The activity also supports dynamic emailing using fields from input data, and allows the use of pre-designed Infoveave templates for styling and formatting consistency. 

Here's a breakdown of how it works:

**Use Cases:**

* Send individual or bulk emails based on incoming data
* Attach files generated in the workflow
* Format emails using templates for consistency
* Embed processed data directly into the email body

**Input:**

* **Data:** (Optional) Tabular data used to populate dynamic fields like email addresses, template content, or attachment grouping.

**Output:**

* **Email Info:** Table Status of sent emails including recipient, success, and any errors encountered.

**Configuration Fields:**

* **Connection:** Mail server connection to send emails (OAuth or SMTP supported).
* **Use Default Credentials:** If enabled, uses Infoveave’s default email credentials. Disable to use custom authentication.
* **Use Email Address From Data:** If enabled, pulls recipient addresses from a specified column in the input data.
* **Email Column:** The column in the data containing the recipient’s email address (required if using email from data).
* **Email To Address:** Static recipient(s) for the “To” field (comma-separated).
* **Email CC Address:** Email addresses for the “CC” field (comma-separated).
* **Email BCC Address:** Email addresses for the “BCC” field.
* **Subject:** Subject line of the email. Can be static or mapped from input data.
* **Content:** The main body content of the email. Supports plain text or HTML.
* **Use Infoveave Template:** When enabled, applies an Infoveave-designed template to the email layout.
* **Rerun Template:** Ensures template consistency across multiple emails in the same run.
* **Attachment Name:** Name of the attachment file (e.g., SalesReport_May2025.xlsx).
* **Split By Column:** Splits data into separate attachments based on values in this column (used in bulk personalization).
* **Sheet Name:** The name of the worksheet in the template used for formatting the attachment content.
* **Send Data In Email Body:** If enabled, includes input data as a formatted table within the body of the email.
* **Attachment File Pattern:** Pattern to identify which files to attach from prior activities (e.g., "*.pdf").

**Combining Features:**

You can combine `Split By Column` with `Email Column` to send a unique email with corresponding data and attachment per recipient.
[ 2025-08-10 22:55:27,157 ] test_main.py:329 root - INFO - [(Document(metadata={'_id': 'b0c2000b-2a94-480e-8ade-5ccb489ed9ea', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='Send Email | Infoveave Help\nSkip to content\nSend Email\nDescription\nThe\nSend Email'), 0.5), (Document(metadata={'_id': 'de5e3b97-dd0f-4d05-8da9-ae3c750c78cc', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='activity allows you to compose and send emails as part of a workflow. You can configure recipient addresses, subject, body content, and attachments . The activity also supports dynamic emailing using fields from input data, and allows the use of pre-designed Infoveave templates for styling and formatting consistency. Use this activity to:\nSend individual or bulk emails based on incoming data\nAttach files generated in the workflow\nFormat emails using templates for consistency\nEmbed processed data directly into the email body\nUse case\n: A workflow generates a monthly sales report and automatically sends personalized emails to each regional manager with their region’s data attached and included in the body.\nInput\nType\nDescription\nData'), 0.33333334), (Document(metadata={'_id': '79fddbc7-ebeb-4a13-9afb-02e3c3ec7774', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='(Optional) Tabular data used to populate dynamic fields like email addresses, template content, or attachment grouping.\nOutput\nOutput Type\nFormat\nDescription\nEmail Info\nTable Status of sent emails including recipient, success, and any errors encountered.\nConfiguration Fields\nField Name\nDescription\nConnection\nMail server connection to send emails (OAuth or SMTP supported).\nUse Default Credentials If enabled, uses Infoveave’s default email credentials. Disable to use custom authentication.\nUse Email Address From Data\nIf enabled, pulls recipient addresses from a specified column in the input data.\nEmail Column The column in the data containing the recipient’s email address (required if using email from data).\nEmail To Address\nStatic recipient(s) for the “To” field (comma-separated).\nEmail CC Address Email addresses for the “CC” field (comma-separated).\nEmail BCC Address\nEmail addresses for the “BCC” field.\nSubject\nSubject line of the email. Can be static or mapped from input data.\nContent The main body content of the email. Supports plain text or HTML.\nUse Infoveave Template\nWhen enabled, applies an Infoveave-designed template to the email layout.\nRerun Template Ensures template consistency across multiple emails in the same run.\nAttachment Name\nName of the attachment file (e.g.,\nSalesReport_May2025.xlsx\n).\nSplit By Column Splits data into separate attachments based on values in this column (used in bulk personalization).\nSheet Name\nThe name of the worksheet in the template used for formatting the attachment content.\nSend Data In Email Body If enabled, includes input data as a formatted table within the body of the email.\nAttachment File Pattern\nPattern to identify which files to attach from prior activities (e.g.,\n"*.pdf"\n).\nCombine\nSplit By Column with\nEmail Column\nto send a unique email with corresponding data and attachment per recipient.\nSample Input\nNot applicable\n(used only if sending emails dynamically per row or attaching generated data).\nSample Configuration\nField\nValue'), 0.25), (Document(metadata={'_id': 'ea0e4e86-0f23-462b-a182-48cedad8fdd9', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='2025-07-01T10:05:00Z\njohn@example.com\nWelcome Email\n18KB\nonboarding\nev1235\nopened\n2025-07-01T10:08:00Z jane@example.com\nPromo Offer\n22KB\npromotions\nFor\nMessages\nEntity (JSON):\n{\n"headers"\n: {\n"message-id"\n:\n"\n<abc@mailgun.org>'), 0.2), (Document(metadata={'_id': 'b6d38099-c9de-471f-973c-0f9d734b02ec', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='Activity Step\nReplaced Values\nSendEmail_12345\nStep 1\nCustomerName: John Doe\nSendEmail_67890\nStep 2\nCustomerName: Jane Smith'), 0.16666667)]
[ 2025-08-10 22:55:27,182 ] test_main.py:71 root - INFO - Building context with metadata from documents...
[ 2025-08-10 22:55:27,182 ] test_main.py:73 root - INFO - (Document(metadata={'_id': 'b0c2000b-2a94-480e-8ade-5ccb489ed9ea', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='Send Email | Infoveave Help\nSkip to content\nSend Email\nDescription\nThe\nSend Email'), 0.5)
[ 2025-08-10 22:55:27,234 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-10 22:55:27,234 ] test_main.py:81 root - INFO - [Record(id='b0c2000b-2a94-480e-8ade-5ccb489ed9ea', payload={'url': 'https://infoveave-help.pages.dev/automation-v8/activities/send-email/', 'title': 'send-email', 'section': 'automation', 'terminologies': ['Infoveave', 'Value'], 'char_count': 3312, 'word_count': 495, 'page_content': 'Send Email | Infoveave Help\nSkip to content\nSend Email\nDescription\nThe\nSend Email', 'chunk_index': 0}, vector=None, shard_key=None, order_value=None)]
[ 2025-08-10 22:55:27,235 ] test_main.py:82 root - INFO - Retrieved result for point ID: b0c2000b-2a94-480e-8ade-5ccb489ed9ea
[ 2025-08-10 22:55:27,235 ] test_main.py:73 root - INFO - (Document(metadata={'_id': 'de5e3b97-dd0f-4d05-8da9-ae3c750c78cc', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='activity allows you to compose and send emails as part of a workflow. You can configure recipient addresses, subject, body content, and attachments . The activity also supports dynamic emailing using fields from input data, and allows the use of pre-designed Infoveave templates for styling and formatting consistency. Use this activity to:\nSend individual or bulk emails based on incoming data\nAttach files generated in the workflow\nFormat emails using templates for consistency\nEmbed processed data directly into the email body\nUse case\n: A workflow generates a monthly sales report and automatically sends personalized emails to each regional manager with their region’s data attached and included in the body.\nInput\nType\nDescription\nData'), 0.33333334)
[ 2025-08-10 22:55:27,283 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-10 22:55:27,321 ] test_main.py:81 root - INFO - [Record(id='de5e3b97-dd0f-4d05-8da9-ae3c750c78cc', payload={'url': 'https://infoveave-help.pages.dev/automation-v8/activities/send-email/', 'title': 'send-email', 'section': 'automation', 'terminologies': ['Infoveave', 'Value'], 'char_count': 3312, 'word_count': 495, 'page_content': 'activity allows you to compose and send emails as part of a workflow. You can configure recipient addresses, subject, body content, and attachments . The activity also supports dynamic emailing using fields from input data, and allows the use of pre-designed Infoveave templates for styling and formatting consistency. Use this activity to:\nSend individual or bulk emails based on incoming data\nAttach files generated in the workflow\nFormat emails using templates for consistency\nEmbed processed data directly into the email body\nUse case\n: A workflow generates a monthly sales report and automatically sends personalized emails to each regional manager with their region’s data attached and included in the body.\nInput\nType\nDescription\nData', 'chunk_index': 1}, vector=None, shard_key=None, order_value=None)]
[ 2025-08-10 22:55:27,321 ] test_main.py:82 root - INFO - Retrieved result for point ID: de5e3b97-dd0f-4d05-8da9-ae3c750c78cc
[ 2025-08-10 22:55:27,322 ] test_main.py:73 root - INFO - (Document(metadata={'_id': '79fddbc7-ebeb-4a13-9afb-02e3c3ec7774', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='(Optional) Tabular data used to populate dynamic fields like email addresses, template content, or attachment grouping.\nOutput\nOutput Type\nFormat\nDescription\nEmail Info\nTable Status of sent emails including recipient, success, and any errors encountered.\nConfiguration Fields\nField Name\nDescription\nConnection\nMail server connection to send emails (OAuth or SMTP supported).\nUse Default Credentials If enabled, uses Infoveave’s default email credentials. Disable to use custom authentication.\nUse Email Address From Data\nIf enabled, pulls recipient addresses from a specified column in the input data.\nEmail Column The column in the data containing the recipient’s email address (required if using email from data).\nEmail To Address\nStatic recipient(s) for the “To” field (comma-separated).\nEmail CC Address Email addresses for the “CC” field (comma-separated).\nEmail BCC Address\nEmail addresses for the “BCC” field.\nSubject\nSubject line of the email. Can be static or mapped from input data.\nContent The main body content of the email. Supports plain text or HTML.\nUse Infoveave Template\nWhen enabled, applies an Infoveave-designed template to the email layout.\nRerun Template Ensures template consistency across multiple emails in the same run.\nAttachment Name\nName of the attachment file (e.g.,\nSalesReport_May2025.xlsx\n).\nSplit By Column Splits data into separate attachments based on values in this column (used in bulk personalization).\nSheet Name\nThe name of the worksheet in the template used for formatting the attachment content.\nSend Data In Email Body If enabled, includes input data as a formatted table within the body of the email.\nAttachment File Pattern\nPattern to identify which files to attach from prior activities (e.g.,\n"*.pdf"\n).\nCombine\nSplit By Column with\nEmail Column\nto send a unique email with corresponding data and attachment per recipient.\nSample Input\nNot applicable\n(used only if sending emails dynamically per row or attaching generated data).\nSample Configuration\nField\nValue'), 0.25)
[ 2025-08-10 22:55:27,393 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-10 22:55:27,432 ] test_main.py:81 root - INFO - [Record(id='79fddbc7-ebeb-4a13-9afb-02e3c3ec7774', payload={'url': 'https://infoveave-help.pages.dev/automation-v8/activities/send-email/', 'title': 'send-email', 'section': 'automation', 'terminologies': ['Infoveave', 'Value'], 'char_count': 3312, 'word_count': 495, 'page_content': '(Optional) Tabular data used to populate dynamic fields like email addresses, template content, or attachment grouping.\nOutput\nOutput Type\nFormat\nDescription\nEmail Info\nTable Status of sent emails including recipient, success, and any errors encountered.\nConfiguration Fields\nField Name\nDescription\nConnection\nMail server connection to send emails (OAuth or SMTP supported).\nUse Default Credentials If enabled, uses Infoveave’s default email credentials. Disable to use custom authentication.\nUse Email Address From Data\nIf enabled, pulls recipient addresses from a specified column in the input data.\nEmail Column The column in the data containing the recipient’s email address (required if using email from data).\nEmail To Address\nStatic recipient(s) for the “To” field (comma-separated).\nEmail CC Address Email addresses for the “CC” field (comma-separated).\nEmail BCC Address\nEmail addresses for the “BCC” field.\nSubject\nSubject line of the email. Can be static or mapped from input data.\nContent The main body content of the email. Supports plain text or HTML.\nUse Infoveave Template\nWhen enabled, applies an Infoveave-designed template to the email layout.\nRerun Template Ensures template consistency across multiple emails in the same run.\nAttachment Name\nName of the attachment file (e.g.,\nSalesReport_May2025.xlsx\n).\nSplit By Column Splits data into separate attachments based on values in this column (used in bulk personalization).\nSheet Name\nThe name of the worksheet in the template used for formatting the attachment content.\nSend Data In Email Body If enabled, includes input data as a formatted table within the body of the email.\nAttachment File Pattern\nPattern to identify which files to attach from prior activities (e.g.,\n"*.pdf"\n).\nCombine\nSplit By Column with\nEmail Column\nto send a unique email with corresponding data and attachment per recipient.\nSample Input\nNot applicable\n(used only if sending emails dynamically per row or attaching generated data).\nSample Configuration\nField\nValue', 'chunk_index': 2}, vector=None, shard_key=None, order_value=None)]
[ 2025-08-10 22:55:27,432 ] test_main.py:82 root - INFO - Retrieved result for point ID: 79fddbc7-ebeb-4a13-9afb-02e3c3ec7774
[ 2025-08-10 22:55:27,433 ] test_main.py:73 root - INFO - (Document(metadata={'_id': 'ea0e4e86-0f23-462b-a182-48cedad8fdd9', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='2025-07-01T10:05:00Z\njohn@example.com\nWelcome Email\n18KB\nonboarding\nev1235\nopened\n2025-07-01T10:08:00Z jane@example.com\nPromo Offer\n22KB\npromotions\nFor\nMessages\nEntity (JSON):\n{\n"headers"\n: {\n"message-id"\n:\n"\n<abc@mailgun.org>'), 0.2)
[ 2025-08-10 22:55:27,487 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-10 22:55:27,488 ] test_main.py:81 root - INFO - [Record(id='ea0e4e86-0f23-462b-a182-48cedad8fdd9', payload={'url': 'https://infoveave-help.pages.dev/automation-v8/activities/mailgun/', 'title': 'mailgun', 'section': 'automation', 'terminologies': ['Infoveave', 'Tags', 'Value', 'Workflows'], 'char_count': 3213, 'word_count': 485, 'page_content': '2025-07-01T10:05:00Z\njohn@example.com\nWelcome Email\n18KB\nonboarding\nev1235\nopened\n2025-07-01T10:08:00Z jane@example.com\nPromo Offer\n22KB\npromotions\nFor\nMessages\nEntity (JSON):\n{\n"headers"\n: {\n"message-id"\n:\n"\n<abc@mailgun.org>', 'chunk_index': 3}, vector=None, shard_key=None, order_value=None)]
[ 2025-08-10 22:55:27,488 ] test_main.py:82 root - INFO - Retrieved result for point ID: ea0e4e86-0f23-462b-a182-48cedad8fdd9
[ 2025-08-10 22:55:27,488 ] test_main.py:73 root - INFO - (Document(metadata={'_id': 'b6d38099-c9de-471f-973c-0f9d734b02ec', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='Activity Step\nReplaced Values\nSendEmail_12345\nStep 1\nCustomerName: John Doe\nSendEmail_67890\nStep 2\nCustomerName: Jane Smith'), 0.16666667)
[ 2025-08-10 22:55:27,540 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-10 22:55:27,541 ] test_main.py:81 root - INFO - [Record(id='b6d38099-c9de-471f-973c-0f9d734b02ec', payload={'url': 'https://infoveave-help.pages.dev/automation-v8/activities/start-iteration/', 'title': 'start-iteration', 'section': 'automation', 'terminologies': ['Infoveave', 'Value'], 'char_count': 2180, 'word_count': 314, 'page_content': 'Activity Step\nReplaced Values\nSendEmail_12345\nStep 1\nCustomerName: John Doe\nSendEmail_67890\nStep 2\nCustomerName: Jane Smith', 'chunk_index': 2}, vector=None, shard_key=None, order_value=None)]
[ 2025-08-10 22:55:27,541 ] test_main.py:82 root - INFO - Retrieved result for point ID: b6d38099-c9de-471f-973c-0f9d734b02ec
[ 2025-08-10 22:55:27,541 ] test_main.py:349 root - INFO - Found 2 final documents.
[ 2025-08-10 22:55:27,541 ] test_main.py:350 root - INFO - Context prepared for LLM response.
[ 2025-08-10 22:55:27,562 ] test_main.py:378 root - INFO - Generating final answer using LLM...
[ 2025-08-10 22:55:29,218 ] _client.py:1025 httpx - INFO - HTTP Request: POST https://api.groq.com/openai/v1/chat/completions "HTTP/1.1 200 OK"
[ 2025-08-10 22:55:29,219 ] test_main.py:380 root - INFO - Final LLM Response:

[ 2025-08-10 22:55:29,219 ] test_main.py:381 root - INFO - Let's break down how to create a workflow in Infoveave to run an Oracle DB query and send the results as an email report.

**1. The `Execute Query` Activity**

The `Execute Query` activity is your starting point for fetching data from your Oracle database.  

Here's how it works:

* **Connection:** You'll need to establish a connection to your Oracle database within Infoveave. This involves providing connection details like the database server address, port, username, and password.

* **Query:**  Craft your SQL query to retrieve the specific data you want to include in your report.  For example:

   ```sql
   SELECT customer_name, order_date, total_amount
   FROM orders
   WHERE order_date BETWEEN '2023-01-01' AND '2023-12-31';
   ```

* **Output:** The `Execute Query` activity returns the results of your query as a tabular dataset. This dataset will be used as input for the `Send Email` activity.

**2. The `Send Email` Activity**

This activity takes the data from the `Execute Query` activity and formats it into an email report.

* **Connection:**  Configure the `Send Email` activity to use your desired email service. Infoveave supports various options like Gmail, Outlook, or your own SMTP server.

* **Recipient:** Specify the email address(es) you want to send the report to. You can use a static email address or pull recipient information from your input data.

* **Subject:**  Set a clear and concise subject line for your email.

* **Content:**  Compose the body of your email. You can include static text, dynamic fields from your data, or even use pre-designed Infoveave email templates for a professional look.

* **Attachments:**  Attach the tabular data from the `Execute Query` activity as a file (e.g., CSV, Excel).

**Putting it Together**

1. **Create a New Workflow:** In Infoveave, start a new workflow.

2. **Add the `Execute Query` Activity:** Drag and drop the `Execute Query` activity onto your workflow canvas. Configure the connection to your Oracle database and paste your SQL query.

3. **Add the `Send Email` Activity:**  Add the `Send Email` activity after the `Execute Query` activity. Configure the email service connection, recipient, subject, content, and attach the output from the `Execute Query` activity.

4. **Test and Deploy:**  Test your workflow thoroughly to ensure it runs as expected. Once you're satisfied, deploy it to automate your report generation and email delivery.



Let me know if you have any more questions or want to explore specific aspects of these activities in more detail!


[ 2025-08-10 22:55:29,220 ] test_main.py:388 root - INFO - LLM response saved to ./data/results/infoverve_helper_response.md
[ 2025-08-10 23:03:22,193 ] test_main.py:197 root - INFO - .........................Starting Infoverve Helper Application.........................
[ 2025-08-10 23:03:22,193 ] test_main.py:213 root - INFO - GROQ_API_KEY loaded.
[ 2025-08-10 23:03:22,200 ] test_main.py:237 root - INFO - Embedding model initialized.
[ 2025-08-10 23:03:22,519 ] _client.py:1025 httpx - INFO - HTTP Request: GET http://ai.infoveave.cloud:6333 "HTTP/1.1 200 OK"
[ 2025-08-10 23:03:22,521 ] test_main.py:241 root - INFO - Connected to Qdrant.
[ 2025-08-10 23:03:22,638 ] _client.py:1025 httpx - INFO - HTTP Request: GET http://ai.infoveave.cloud:6333/collections "HTTP/1.1 200 OK"
[ 2025-08-10 23:03:22,639 ] test_main.py:245 root - INFO - Qdrant collections retrieved.
[ 2025-08-10 23:03:22,639 ] test_main.py:252 root - INFO - Using collection: infoverve_helper_docs_hybrid
[ 2025-08-10 23:03:24,186 ] test_main.py:255 root - INFO - Sparse embeddings initialized.
[ 2025-08-10 23:03:24,262 ] _client.py:1025 httpx - INFO - HTTP Request: GET http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid "HTTP/1.1 200 OK"
[ 2025-08-10 23:03:25,150 ] _client.py:1025 httpx - INFO - HTTP Request: GET http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid "HTTP/1.1 200 OK"
[ 2025-08-10 23:03:25,152 ] test_main.py:267 root - INFO - QdrantVectorStore initialized.
[ 2025-08-10 23:03:25,186 ] test_main.py:273 root - INFO - LLM initialized.
[ 2025-08-10 23:03:26,605 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points/query "HTTP/1.1 200 OK"
[ 2025-08-10 23:03:27,415 ] test_main.py:295 root - INFO - Original query embedding generated.
[ 2025-08-10 23:03:27,437 ] test_main.py:71 root - INFO - Building context with metadata from documents...
[ 2025-08-10 23:03:27,437 ] test_main.py:73 root - INFO - (Document(metadata={'_id': '2a6c9297-ff5a-4139-bb0d-e87f53ace134', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content="Upload transformed file to destination database\nSetup the 'Oracle' connection, specify tables, and map columns\nSetup automated workflow summary notification\nEnable 'Send Workflow Summary' for email notifications on automated workflow execution\nSchedule and monitor  workflows Schedule or setup 'Webhooks' and 'Emails' to trigger workflows\nDone"), 0.5)
[ 2025-08-10 23:03:27,496 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-10 23:03:27,497 ] test_main.py:81 root - INFO - [Record(id='2a6c9297-ff5a-4139-bb0d-e87f53ace134', payload={'url': 'https://infoveave-help.pages.dev/journey/automate-workflows/', 'title': 'automate-workflows', 'section': 'automation', 'terminologies': ['Connections', 'Data Transformation', 'Infoveave', 'Workflows'], 'char_count': 978, 'word_count': 139, 'page_content': "Upload transformed file to destination database\nSetup the 'Oracle' connection, specify tables, and map columns\nSetup automated workflow summary notification\nEnable 'Send Workflow Summary' for email notifications on automated workflow execution\nSchedule and monitor  workflows Schedule or setup 'Webhooks' and 'Emails' to trigger workflows\nDone", 'chunk_index': 2}, vector=None, shard_key=None, order_value=None)]
[ 2025-08-10 23:03:27,497 ] test_main.py:82 root - INFO - Retrieved result for point ID: 2a6c9297-ff5a-4139-bb0d-e87f53ace134
[ 2025-08-10 23:03:27,497 ] test_main.py:73 root - INFO - (Document(metadata={'_id': 'df9d15c4-2094-450f-95e6-162e03d5828a', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='Creating Infoboard Using A Query\nCreate Infoboard Using A Query\nCreating Infoboard Using API\nCreate Infoboard Using API\nCreating Workflow in Infoveave\nCreating Workflows\nWorkflow Execution Status\nWorkflow Execution Status'), 0.33333334)
[ 2025-08-10 23:03:27,565 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-10 23:03:27,566 ] test_main.py:81 root - INFO - [Record(id='df9d15c4-2094-450f-95e6-162e03d5828a', payload={'url': 'https://infoveave-help.pages.dev/videos/', 'title': 'videos', 'section': 'videos', 'terminologies': ['Automation', 'Catalogues', 'Conditional Expressions', 'Custom Calendar', 'Datasources', 'Dimensions', 'Infoboards', 'Infoveave', 'Insights', 'Lists', 'Measures', 'My Organization', 'My Workspace', 'Query', 'Reports', 'SciPyR', 'What-If Analysis', 'What-If Formulae', 'Workflows', 'Workflow Execution Status'], 'char_count': 2430, 'word_count': 338, 'page_content': 'Creating Infoboard Using A Query\nCreate Infoboard Using A Query\nCreating Infoboard Using API\nCreate Infoboard Using API\nCreating Workflow in Infoveave\nCreating Workflows\nWorkflow Execution Status\nWorkflow Execution Status', 'chunk_index': 3}, vector=None, shard_key=None, order_value=None)]
[ 2025-08-10 23:03:27,566 ] test_main.py:82 root - INFO - Retrieved result for point ID: df9d15c4-2094-450f-95e6-162e03d5828a
[ 2025-08-10 23:03:27,567 ] test_main.py:73 root - INFO - (Document(metadata={'_id': '323c1ea3-b288-44b0-8825-475a23907e9f', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='Workflow Designer\ncanvas.\nTo add alerts that send email notifications during the workflow, go to the\nAlerts\ntab in the\nWorkflow Setup panel\n.\nToggle\nEnable\nto turn the alert on or off. Select recipient email addresses from the user list. You can choose multiple recipients.\nWrite a custom alert message that is sent when the condition is met.\nWhen setting an execution time alert, toggle\nUse Absolute Time'), 0.25)
[ 2025-08-10 23:03:27,624 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-10 23:03:27,629 ] test_main.py:81 root - INFO - [Record(id='323c1ea3-b288-44b0-8825-475a23907e9f', payload={'url': 'https://infoveave-help.pages.dev/automation-v8/jobs-v8/create-new-job/', 'title': 'create-new-job', 'section': 'automation', 'terminologies': ['Alerts', 'Automation', 'Infoveave', 'Measures', 'Query', 'Query Report', 'Value', 'Variables', 'View', 'View', 'Workflows'], 'char_count': 4476, 'word_count': 722, 'page_content': 'Workflow Designer\ncanvas.\nTo add alerts that send email notifications during the workflow, go to the\nAlerts\ntab in the\nWorkflow Setup panel\n.\nToggle\nEnable\nto turn the alert on or off. Select recipient email addresses from the user list. You can choose multiple recipients.\nWrite a custom alert message that is sent when the condition is met.\nWhen setting an execution time alert, toggle\nUse Absolute Time', 'chunk_index': 4}, vector=None, shard_key=None, order_value=None)]
[ 2025-08-10 23:03:27,629 ] test_main.py:82 root - INFO - Retrieved result for point ID: 323c1ea3-b288-44b0-8825-475a23907e9f
[ 2025-08-10 23:03:27,629 ] test_main.py:73 root - INFO - (Document(metadata={'_id': '65e3aa33-13d7-4688-98fd-7b6a24cbf91e', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='Workflow Designer\ncanvas.\nTo add alerts that send email notifications during the workflow, go to the\nAlerts\ntab in the\nWorkflow Setup panel\n.\nToggle\nEnable\nto turn the alert on or off. Select recipient email addresses from the user list. You can choose multiple recipients.\nWrite a custom alert message that is sent when the condition is met.\nWhen setting an execution time alert, toggle\nUse Absolute Time'), 0.2)
[ 2025-08-10 23:03:27,698 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-10 23:03:27,700 ] test_main.py:81 root - INFO - [Record(id='65e3aa33-13d7-4688-98fd-7b6a24cbf91e', payload={'url': 'https://infoveave-help.pages.dev/automation-v8/workflows/define-workflow/', 'title': 'define-workflow', 'section': 'automation', 'terminologies': ['Alerts', 'Automation', 'Infoveave', 'Measures', 'Query', 'Query Report', 'Value', 'Variables', 'View', 'View', 'Workflows'], 'char_count': 4476, 'word_count': 722, 'page_content': 'Workflow Designer\ncanvas.\nTo add alerts that send email notifications during the workflow, go to the\nAlerts\ntab in the\nWorkflow Setup panel\n.\nToggle\nEnable\nto turn the alert on or off. Select recipient email addresses from the user list. You can choose multiple recipients.\nWrite a custom alert message that is sent when the condition is met.\nWhen setting an execution time alert, toggle\nUse Absolute Time', 'chunk_index': 4}, vector=None, shard_key=None, order_value=None)]
[ 2025-08-10 23:03:27,700 ] test_main.py:82 root - INFO - Retrieved result for point ID: 65e3aa33-13d7-4688-98fd-7b6a24cbf91e
[ 2025-08-10 23:03:27,700 ] test_main.py:73 root - INFO - (Document(metadata={'_id': '2027003d-7c4e-4b6d-acd3-b391a775ae9a', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='Workflow Alerts | Infoveave Help\nSkip to content\nWorkflow Alerts'), 0.16666667)
[ 2025-08-10 23:03:27,758 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-10 23:03:27,759 ] test_main.py:81 root - INFO - [Record(id='2027003d-7c4e-4b6d-acd3-b391a775ae9a', payload={'url': 'https://infoveave-help.pages.dev/automation-v8/workflows/define-workflow/workflow-alerts-2/', 'title': 'workflow-alerts-2', 'section': 'automation', 'terminologies': ['Alerts', 'Infoveave', 'Workflows', 'Workflow Alerts'], 'char_count': 3832, 'word_count': 620, 'page_content': 'Workflow Alerts | Infoveave Help\nSkip to content\nWorkflow Alerts', 'chunk_index': 0}, vector=None, shard_key=None, order_value=None)]
[ 2025-08-10 23:03:27,760 ] test_main.py:82 root - INFO - Retrieved result for point ID: 2027003d-7c4e-4b6d-acd3-b391a775ae9a
[ 2025-08-10 23:03:27,760 ] test_main.py:73 root - INFO - (Document(metadata={'_id': '81a7ef81-eb12-4bcd-ad2e-403f547e7e50', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='Choose the days on which you want to execute the Workflow. By default, Infoveave sets it to every day. You can select specific days of the week, days of the month, or months.\nClick on the\nAdd'), 0.14285715)
[ 2025-08-10 23:03:27,816 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-10 23:03:27,817 ] test_main.py:81 root - INFO - [Record(id='81a7ef81-eb12-4bcd-ad2e-403f547e7e50', payload={'url': 'https://infoveave-help.pages.dev/automation-v8/jobs-v8/schedule-job/', 'title': 'schedule-job', 'section': 'automation', 'terminologies': ['Automation', 'Cron trigger', 'Emailhook trigger', 'Infoveave', 'Lists', 'Reports', 'Value', 'View', 'View', 'Webhook trigger', 'Workflows', 'Workflow Start trigger'], 'char_count': 5699, 'word_count': 937, 'page_content': 'Choose the days on which you want to execute the Workflow. By default, Infoveave sets it to every day. You can select specific days of the week, days of the month, or months.\nClick on the\nAdd', 'chunk_index': 5}, vector=None, shard_key=None, order_value=None)]
[ 2025-08-10 23:03:27,817 ] test_main.py:82 root - INFO - Retrieved result for point ID: 81a7ef81-eb12-4bcd-ad2e-403f547e7e50
[ 2025-08-10 23:03:27,817 ] test_main.py:73 root - INFO - (Document(metadata={'_id': '3989b1ef-a79d-4b1d-bce6-79cb5969aa26', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='Choose the days on which you want to execute the Workflow. By default, Infoveave sets it to every day. You can select specific days of the week, days of the month, or months.\nClick on the\nAdd'), 0.125)
[ 2025-08-10 23:03:27,873 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-10 23:03:27,874 ] test_main.py:81 root - INFO - [Record(id='3989b1ef-a79d-4b1d-bce6-79cb5969aa26', payload={'url': 'https://infoveave-help.pages.dev/automation-v8/workflows/define-workflow/workflow-start/', 'title': 'workflow-start', 'section': 'automation', 'terminologies': ['Automation', 'Cron trigger', 'Emailhook trigger', 'Infoveave', 'Lists', 'Reports', 'Value', 'View', 'View', 'Webhook trigger', 'Workflows', 'Workflow Start trigger'], 'char_count': 5699, 'word_count': 937, 'page_content': 'Choose the days on which you want to execute the Workflow. By default, Infoveave sets it to every day. You can select specific days of the week, days of the month, or months.\nClick on the\nAdd', 'chunk_index': 5}, vector=None, shard_key=None, order_value=None)]
[ 2025-08-10 23:03:27,875 ] test_main.py:82 root - INFO - Retrieved result for point ID: 3989b1ef-a79d-4b1d-bce6-79cb5969aa26
[ 2025-08-10 23:03:27,875 ] test_main.py:73 root - INFO - (Document(metadata={'_id': '3fd7ab5c-2d29-41ea-9ed7-0684f87b08e1', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='Add FTP Download Activity\n0:21\nConfigure FTP Download Activity\n0:31\nAdd Read Excel Files Activity\n0:35\nAdd Transform Activity using Javascript\n0:40\nAdd Round Numbers Activity\n0:46 Add Remove Duplicate Rows Activity\n0:52\nAdd Drop Columns Activity\n0:56\nAdd Rename Columns Activity\n1:01\nAdd Upload to Datasource Activity\n1:08\nExecute the Workflow and View Instance History'), 0.11111111)
[ 2025-08-10 23:03:27,945 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-10 23:03:27,946 ] test_main.py:81 root - INFO - [Record(id='3fd7ab5c-2d29-41ea-9ed7-0684f87b08e1', payload={'url': 'https://infoveave-help.pages.dev/automation-v8/jobs-v8/create-new-job/', 'title': 'create-new-job', 'section': 'automation', 'terminologies': ['Alerts', 'Automation', 'Infoveave', 'Measures', 'Query', 'Query Report', 'Value', 'Variables', 'View', 'View', 'Workflows'], 'char_count': 4476, 'word_count': 722, 'page_content': 'Add FTP Download Activity\n0:21\nConfigure FTP Download Activity\n0:31\nAdd Read Excel Files Activity\n0:35\nAdd Transform Activity using Javascript\n0:40\nAdd Round Numbers Activity\n0:46 Add Remove Duplicate Rows Activity\n0:52\nAdd Drop Columns Activity\n0:56\nAdd Rename Columns Activity\n1:01\nAdd Upload to Datasource Activity\n1:08\nExecute the Workflow and View Instance History', 'chunk_index': 1}, vector=None, shard_key=None, order_value=None)]
[ 2025-08-10 23:03:27,946 ] test_main.py:82 root - INFO - Retrieved result for point ID: 3fd7ab5c-2d29-41ea-9ed7-0684f87b08e1
[ 2025-08-10 23:03:27,947 ] test_main.py:73 root - INFO - (Document(metadata={'_id': '2adcd9bd-c3f6-41e9-8c27-26f07adfbe4c', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='Add FTP Download Activity\n0:21\nConfigure FTP Download Activity\n0:31\nAdd Read Excel Files Activity\n0:35\nAdd Transform Activity using Javascript\n0:40\nAdd Round Numbers Activity\n0:46 Add Remove Duplicate Rows Activity\n0:52\nAdd Drop Columns Activity\n0:56\nAdd Rename Columns Activity\n1:01\nAdd Upload to Datasource Activity\n1:08\nExecute the Workflow and View Instance History'), 0.1)
[ 2025-08-10 23:03:28,016 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-10 23:03:28,017 ] test_main.py:81 root - INFO - [Record(id='2adcd9bd-c3f6-41e9-8c27-26f07adfbe4c', payload={'url': 'https://infoveave-help.pages.dev/automation-v8/workflows/define-workflow/', 'title': 'define-workflow', 'section': 'automation', 'terminologies': ['Alerts', 'Automation', 'Infoveave', 'Measures', 'Query', 'Query Report', 'Value', 'Variables', 'View', 'View', 'Workflows'], 'char_count': 4476, 'word_count': 722, 'page_content': 'Add FTP Download Activity\n0:21\nConfigure FTP Download Activity\n0:31\nAdd Read Excel Files Activity\n0:35\nAdd Transform Activity using Javascript\n0:40\nAdd Round Numbers Activity\n0:46 Add Remove Duplicate Rows Activity\n0:52\nAdd Drop Columns Activity\n0:56\nAdd Rename Columns Activity\n1:01\nAdd Upload to Datasource Activity\n1:08\nExecute the Workflow and View Instance History', 'chunk_index': 1}, vector=None, shard_key=None, order_value=None)]
[ 2025-08-10 23:03:28,017 ] test_main.py:82 root - INFO - Retrieved result for point ID: 2adcd9bd-c3f6-41e9-8c27-26f07adfbe4c
[ 2025-08-10 23:03:28,018 ] test_main.py:73 root - INFO - (Document(metadata={'_id': 'bfe3c285-ffc2-4551-a19c-a5900bdd0aa3', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='E\nEmailhook trigger The Emailhook trigger initiates a Workflow based on incoming emails. You can set up specific email addresses that serve as Emailhooks. This allows for  automated processing of email-based activities or notifications . This trigger is useful for Workflows that involve email notifications or processing of data received via email.'), 0.09090909)
[ 2025-08-10 23:03:28,071 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-10 23:03:28,124 ] test_main.py:81 root - INFO - [Record(id='bfe3c285-ffc2-4551-a19c-a5900bdd0aa3', payload={'url': 'https://infoveave-help.pages.dev/introduction-to-infoveave/infoveave-terminologies/', 'title': 'infoveave-terminologies', 'section': 'introduction-to-infoveave', 'terminologies': ['Address Book', 'Alerts', 'Audit Log', 'Automation', 'Business Analysis', 'Calculated Columns', 'Calculated Measures', 'Catalogues', 'Client', 'Color Palette', 'Common Dimension filters', 'Component Panel', 'Component', 'Conditional Expressions', 'Connections', 'Control Centre', 'Creator', 'Cron trigger', 'Cube Designer', 'Custom Calendar', 'Custom Email', 'Database Connections', 'Datasources', 'Data Governance', 'Data Ingestion', 'Data Transformation', 'Data Visualization', 'Date Range Filter', 'Designer Canvas', 'Designer Layout', 'Dimensions', 'Domains', 'Emailhook trigger', 'Expression', 'Fixed Filters', 'Grid Layout', 'Hierarchies', 'Holiday Calendar', 'Infoboards', 'Infoboard Setup', 'Infoboard statistics', 'Infoveave', 'Infoveave menu', 'Insights', 'Lists', 'Linked Reports', 'Login statistics', 'Measures', 'ML Analysis', 'ML Model', 'My Organization', 'My Workspace', 'NGuage Forms', 'Query', 'Query Builder', 'Query Report', 'Reports', 'Retention Settings', 'Roles', 'SciPyR', 'Server Statistics', 'SMTP Settings', 'Statistical Analysis', 'Tags', 'Targets and Thresholds', 'Template Reports', 'Tenant', 'Tiers', 'Trash', 'Value', 'Variables', 'Version history', 'View', 'View', 'Viewer', 'Webhook trigger', 'What-If Analysis', 'What-If Formulae', 'Widget Configuration', 'Widget Customization', 'Widget statistics', 'Workflows', 'Workflow Alerts', 'Workflow Execution Status', 'Workflow Start trigger', 'Workflow Variables'], 'char_count': 25220, 'word_count': 3773, 'page_content': 'E\nEmailhook trigger The Emailhook trigger initiates a Workflow based on incoming emails. You can set up specific email addresses that serve as Emailhooks. This allows for  automated processing of email-based activities or notifications . This trigger is useful for Workflows that involve email notifications or processing of data received via email.', 'chunk_index': 13}, vector=None, shard_key=None, order_value=None)]
[ 2025-08-10 23:03:28,124 ] test_main.py:82 root - INFO - Retrieved result for point ID: bfe3c285-ffc2-4551-a19c-a5900bdd0aa3
[ 2025-08-10 23:03:28,124 ] test_main.py:127 root - INFO - Top context prepared for query rewriting.
[ 2025-08-10 23:03:28,125 ] test_main.py:103 root - INFO - Querying Neo4j for entities: ['Workflow Alerts', 'Tenant', 'My Workspace', 'Targets and Thresholds', 'Creator', 'Cron trigger', 'SciPyR', 'Common Dimension filters', 'Workflow Start trigger', 'Workflows', 'NGuage Forms', 'Value', 'Business Analysis', 'Designer Layout', 'Data Transformation', 'Query Report', 'Infoveave menu', 'Query', 'Query Builder', 'Retention Settings', 'Workflow Variables', 'Date Range Filter', 'Version history', 'My Organization', 'SMTP Settings', 'ML Model', 'Server Statistics', 'Variables', 'Datasources', 'Control Centre', 'Widget statistics', 'Designer Canvas', 'Custom Calendar', 'Infoboards', 'Viewer', 'Dimensions', 'Widget Configuration', 'Grid Layout', 'Client', 'Component Panel', 'Reports', 'Catalogues', 'Data Visualization', 'Template Reports', 'Infoveave', 'Widget Customization', 'Calculated Columns', 'Emailhook trigger', 'Lists', 'Measures', 'Database Connections', 'Roles', 'Component', 'Data Governance', 'Statistical Analysis', 'Hierarchies', 'Alerts', 'ML Analysis', 'Workflow Execution Status', 'Cube Designer', 'Infoboard Setup', 'Trash', 'What-If Formulae', 'Conditional Expressions', 'Automation', 'Holiday Calendar', 'What-If Analysis', 'Data Ingestion', 'Domains', 'Webhook trigger', 'Login statistics', 'Calculated Measures', 'Tiers', 'Audit Log', 'Connections', 'Tags', 'View', 'Linked Reports', 'Fixed Filters', 'Insights', 'Address Book', 'Infoboard statistics', 'Expression', 'Color Palette', 'Custom Email'] with hops=1 and top_n=50
[ 2025-08-10 23:03:29,374 ] test_main.py:119 root - INFO - Retrieved 0 triplets from Neo4j.
[ 2025-08-10 23:03:29,374 ] test_main.py:135 root - INFO - Retrieved 0 related triplets from Neo4j.
[ 2025-08-10 23:03:29,374 ] test_main.py:140 root - INFO - Knowledge graph facts prepared for query rewriting.
[ 2025-08-10 23:03:29,374 ] test_main.py:145 root - INFO - Loaded rewritten query system prompt.
[ 2025-08-10 23:03:29,375 ] test_main.py:158 root - INFO - Loaded rewritten query user prompt.
[ 2025-08-10 23:03:30,093 ] _client.py:1025 httpx - INFO - HTTP Request: POST https://api.groq.com/openai/v1/chat/completions "HTTP/1.1 200 OK"
[ 2025-08-10 23:03:30,097 ] test_main.py:300 root - INFO - Rewritten query: Execute Query| Send Email
[ 2025-08-10 23:03:30,097 ] test_main.py:307 root - INFO - Rewritten query parts: ['Execute Query', 'Send Email']
[ 2025-08-10 23:03:30,097 ] test_main.py:316 root - INFO - Rewritten Query 1: Execute Query
[ 2025-08-10 23:03:30,573 ] test_main.py:319 root - INFO - Embedding generated for query 1.
[ 2025-08-10 23:03:31,800 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points/query "HTTP/1.1 200 OK"
[ 2025-08-10 23:03:31,839 ] test_main.py:324 root - INFO - Processing query part 1: Execute Query
[ 2025-08-10 23:03:31,862 ] test_main.py:71 root - INFO - Building context with metadata from documents...
[ 2025-08-10 23:03:31,862 ] test_main.py:73 root - INFO - (Document(metadata={'_id': '4bf7f9a7-fc4e-49bc-9caf-4fd89d8160ab', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='Execute Query | Infoveave Help\nSkip to content\nExecute Query\nDescription\nThe\nExecute Query'), 0.5)
[ 2025-08-10 23:03:31,916 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-10 23:03:31,918 ] test_main.py:81 root - INFO - [Record(id='4bf7f9a7-fc4e-49bc-9caf-4fd89d8160ab', payload={'url': 'https://infoveave-help.pages.dev/automation-v8/activities/execute-query/', 'title': 'execute-query', 'section': 'automation', 'terminologies': ['Infoveave', 'Query', 'Reports', 'Value'], 'char_count': 2330, 'word_count': 363, 'page_content': 'Execute Query | Infoveave Help\nSkip to content\nExecute Query\nDescription\nThe\nExecute Query', 'chunk_index': 0}, vector=None, shard_key=None, order_value=None)]
[ 2025-08-10 23:03:31,918 ] test_main.py:82 root - INFO - Retrieved result for point ID: 4bf7f9a7-fc4e-49bc-9caf-4fd89d8160ab
[ 2025-08-10 23:03:31,918 ] test_main.py:73 root - INFO - (Document(metadata={'_id': 'c4316ab6-9c63-42af-b504-74f8cdbc37df', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='This activity connects to your Google Cloud project, runs the specified query, and returns the results in tabular format. It is ideal for pulling real-time analytics, data transformations, or integrating cloud data into your workflow pipelines.\nUse case\n: Fetch customer order data by region for the last quarter directly from BigQuery to feed a dashboard or analytics engine.\nInput\nNot Applicable\nOutput\nOutput Type\nFormat\nDescription\nData\nTable Output of the executed BigQuery SQL query.\nConfiguration Fields\nField Name\nDescription\nConnection\nGoogle BigQuery connection (OAuth or service account). Required for access.\nProject\nGoogle Cloud Project ID containing the BigQuery datasets.\nQuery The SQL query string to be executed. Supports standard SQL syntax.\nSample Input\nNot Applicable\nSample Configuration\nField\nValue\nConnection\nGoogle BigQuery OAuth\nProject\ncustomer-data-analytics\nQuery'), 0.33333334)
[ 2025-08-10 23:03:31,973 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-10 23:03:32,015 ] test_main.py:81 root - INFO - [Record(id='c4316ab6-9c63-42af-b504-74f8cdbc37df', payload={'url': 'https://infoveave-help.pages.dev/automation-v8/activities/fetch-from-bigquery/', 'title': 'fetch-from-bigquery', 'section': 'automation', 'terminologies': ['Infoveave', 'Query', 'Value'], 'char_count': 1338, 'word_count': 194, 'page_content': 'This activity connects to your Google Cloud project, runs the specified query, and returns the results in tabular format. It is ideal for pulling real-time analytics, data transformations, or integrating cloud data into your workflow pipelines.\nUse case\n: Fetch customer order data by region for the last quarter directly from BigQuery to feed a dashboard or analytics engine.\nInput\nNot Applicable\nOutput\nOutput Type\nFormat\nDescription\nData\nTable Output of the executed BigQuery SQL query.\nConfiguration Fields\nField Name\nDescription\nConnection\nGoogle BigQuery connection (OAuth or service account). Required for access.\nProject\nGoogle Cloud Project ID containing the BigQuery datasets.\nQuery The SQL query string to be executed. Supports standard SQL syntax.\nSample Input\nNot Applicable\nSample Configuration\nField\nValue\nConnection\nGoogle BigQuery OAuth\nProject\ncustomer-data-analytics\nQuery', 'chunk_index': 1}, vector=None, shard_key=None, order_value=None)]
[ 2025-08-10 23:03:32,016 ] test_main.py:82 root - INFO - Retrieved result for point ID: c4316ab6-9c63-42af-b504-74f8cdbc37df
[ 2025-08-10 23:03:32,016 ] test_main.py:73 root - INFO - (Document(metadata={'_id': '21c3607e-54d8-44a9-b1b6-12646396ca58', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='activity executes a structured query (e.g., SQL) against a configured data source such as a relational database, data warehouse, or cloud storage engine . You can retrieve the results directly as tabular output or optionally save them to a file using configurable export settings. This activity is especially useful for dynamically pulling data into a workflow, generating reports, or integrating external data systems. When saving results to a file, it also supports advanced formatting using templates, encryption, and partitioning logic. Use this activity to:\nQuery databases and bring live data into workflows\nExport query results as Excel or CSV files\nApply formatting using templates and control sheet/row structure\nSecure output files with encryption and filename customization\nUse case\n: A data analyst can use this activity to run a sales report query on a PostgreSQL database. The output can be formatted using a template Excel file, encrypted using a secret key, and saved with a filename pattern that includes a timestamp.\nInput Type\nDescription\nData\nOptional incoming data used to influence the query or filenames (if dynamic).\nOutput\nOutput Type\nFormat\nDescription\nData\nTable or File Query results, either in-memory (as table) or written to file(s).\nConfiguration Fields\nField Name\nDescription\nDatasource Id Select the connection representing the data source (e.g., MySQL, SQL Server, Snowflake) where the query will run.\nQuery The query string (SQL or supported query language) to be executed on the selected data source. Supports variables if dynamic queries are needed.\nSave As File Enable this option to save the query result to a file instead of returning it as in-memory table data.\nSecret Key\nRequired only when “Save As File” is enabled. This encryption key secures the generated file’s content.'), 0.25)
[ 2025-08-10 23:03:32,087 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-10 23:03:32,124 ] test_main.py:81 root - INFO - [Record(id='21c3607e-54d8-44a9-b1b6-12646396ca58', payload={'url': 'https://infoveave-help.pages.dev/automation-v8/activities/query-datasource/', 'title': 'query-datasource', 'section': 'automation', 'terminologies': ['Infoveave', 'Query', 'Reports', 'Value', 'Variables', 'Workflows'], 'char_count': 3756, 'word_count': 590, 'page_content': 'activity executes a structured query (e.g., SQL) against a configured data source such as a relational database, data warehouse, or cloud storage engine . You can retrieve the results directly as tabular output or optionally save them to a file using configurable export settings. This activity is especially useful for dynamically pulling data into a workflow, generating reports, or integrating external data systems. When saving results to a file, it also supports advanced formatting using templates, encryption, and partitioning logic. Use this activity to:\nQuery databases and bring live data into workflows\nExport query results as Excel or CSV files\nApply formatting using templates and control sheet/row structure\nSecure output files with encryption and filename customization\nUse case\n: A data analyst can use this activity to run a sales report query on a PostgreSQL database. The output can be formatted using a template Excel file, encrypted using a secret key, and saved with a filename pattern that includes a timestamp.\nInput Type\nDescription\nData\nOptional incoming data used to influence the query or filenames (if dynamic).\nOutput\nOutput Type\nFormat\nDescription\nData\nTable or File Query results, either in-memory (as table) or written to file(s).\nConfiguration Fields\nField Name\nDescription\nDatasource Id Select the connection representing the data source (e.g., MySQL, SQL Server, Snowflake) where the query will run.\nQuery The query string (SQL or supported query language) to be executed on the selected data source. Supports variables if dynamic queries are needed.\nSave As File Enable this option to save the query result to a file instead of returning it as in-memory table data.\nSecret Key\nRequired only when “Save As File” is enabled. This encryption key secures the generated file’s content.', 'chunk_index': 1}, vector=None, shard_key=None, order_value=None)]
[ 2025-08-10 23:03:32,125 ] test_main.py:82 root - INFO - Retrieved result for point ID: 21c3607e-54d8-44a9-b1b6-12646396ca58
[ 2025-08-10 23:03:32,125 ] test_main.py:73 root - INFO - (Document(metadata={'_id': '65f1fed2-a4bd-4a52-aa8a-cc0e2c0490f2', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content="activity allows users to execute SQL queries on files or data stored in a connected data source (e.g., database, storage, or file-based system). This activity supports dynamic queries, and optionally allows saving the results to files with encryption, formatting, and custom output configuration.\nUse this activity to:\nExecute ad hoc or parameterized SQL queries on uploaded or connected data Retrieve transformed or filtered data for further processing\nGenerate reports or structured data files from query results\nUse Case\n: Useful in scenarios where data needs to be filtered, joined, aggregated, or reshaped before it’s used in reporting, validation, or export.\nInput\nType\nDescription\nFiles\nFiles/data available in the connection\nOutput\nType Format\nDescription\nData / File\nTable / File\nQuery result as a table or downloadable file\nConfiguration Fields\nField Name\nRequired\nDescription\nConnection\nYes\nConnection to the data source where the query should be executed.\nQuery Yes\nSQL query to be executed on the connected data source.\nSave As File\nNo\nIf enabled, the query result will be saved as a file.\nSecret Key\nConditional Encryption key used to secure the generated output file (enabled only if Save As File is true).\nFile Pattern\nConditional\nPattern for naming the generated files.\nSheet Name\nConditional Sheet name to use in the generated file (for Excel formats).\nFile\nConditional\nTemplate file to structure the output.\nSplit by Column\nConditional\nColumn name used to split the query result into multiple output files.\nStarting Row Conditional\nRow index in the template file from where data insertion begins.\nStarting Column\nConditional\nColumn index in the template file from where data insertion begins.\nSample Input\nNot applicable\n— data is pulled from the connected data source. Sample Configuration\nField\nValue\nConnection\nAzureBlobConnection\nQuery\nSELECT * FROM SalesData WHERE Region = 'East'\nSave As File\ntrue\nSecret Key\nEncrypt@123\nFile Pattern\nSales_Report_[Region]"), 0.2)
[ 2025-08-10 23:03:32,193 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-10 23:03:32,235 ] test_main.py:81 root - INFO - [Record(id='65f1fed2-a4bd-4a52-aa8a-cc0e2c0490f2', payload={'url': 'https://infoveave-help.pages.dev/automation-v8/activities/execute-query/', 'title': 'execute-query', 'section': 'automation', 'terminologies': ['Infoveave', 'Query', 'Reports', 'Value'], 'char_count': 2330, 'word_count': 363, 'page_content': "activity allows users to execute SQL queries on files or data stored in a connected data source (e.g., database, storage, or file-based system). This activity supports dynamic queries, and optionally allows saving the results to files with encryption, formatting, and custom output configuration.\nUse this activity to:\nExecute ad hoc or parameterized SQL queries on uploaded or connected data Retrieve transformed or filtered data for further processing\nGenerate reports or structured data files from query results\nUse Case\n: Useful in scenarios where data needs to be filtered, joined, aggregated, or reshaped before it’s used in reporting, validation, or export.\nInput\nType\nDescription\nFiles\nFiles/data available in the connection\nOutput\nType Format\nDescription\nData / File\nTable / File\nQuery result as a table or downloadable file\nConfiguration Fields\nField Name\nRequired\nDescription\nConnection\nYes\nConnection to the data source where the query should be executed.\nQuery Yes\nSQL query to be executed on the connected data source.\nSave As File\nNo\nIf enabled, the query result will be saved as a file.\nSecret Key\nConditional Encryption key used to secure the generated output file (enabled only if Save As File is true).\nFile Pattern\nConditional\nPattern for naming the generated files.\nSheet Name\nConditional Sheet name to use in the generated file (for Excel formats).\nFile\nConditional\nTemplate file to structure the output.\nSplit by Column\nConditional\nColumn name used to split the query result into multiple output files.\nStarting Row Conditional\nRow index in the template file from where data insertion begins.\nStarting Column\nConditional\nColumn index in the template file from where data insertion begins.\nSample Input\nNot applicable\n— data is pulled from the connected data source. Sample Configuration\nField\nValue\nConnection\nAzureBlobConnection\nQuery\nSELECT * FROM SalesData WHERE Region = 'East'\nSave As File\ntrue\nSecret Key\nEncrypt@123\nFile Pattern\nSales_Report_[Region]", 'chunk_index': 1}, vector=None, shard_key=None, order_value=None)]
[ 2025-08-10 23:03:32,235 ] test_main.py:82 root - INFO - Retrieved result for point ID: 65f1fed2-a4bd-4a52-aa8a-cc0e2c0490f2
[ 2025-08-10 23:03:32,235 ] test_main.py:73 root - INFO - (Document(metadata={'_id': '16772a9b-c89a-4370-ae9b-911286a37769', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content=').\nQuery Column Name\nColumn name to store the query string (portion after\n?\n) without parsing key-value pairs.\nFragment Column Name\nColumn name to store the fragment identifier (portion after\n#\n, if any). Note\n: This activity does not split the query string into key-value pairs — use the\nSplit HTTP Query\nactivity if you need that level of detail.\nSample Input\nemployee_id\nname\nurl\nE001\nJohn Doe'), 0.16666667)
[ 2025-08-10 23:03:32,296 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-10 23:03:32,297 ] test_main.py:81 root - INFO - [Record(id='16772a9b-c89a-4370-ae9b-911286a37769', payload={'url': 'https://infoveave-help.pages.dev/automation-v8/activities/split-url/', 'title': 'split-url', 'section': 'automation', 'terminologies': ['Infoveave', 'Query', 'Reports', 'Value'], 'char_count': 3191, 'word_count': 408, 'page_content': ').\nQuery Column Name\nColumn name to store the query string (portion after\n?\n) without parsing key-value pairs.\nFragment Column Name\nColumn name to store the fragment identifier (portion after\n#\n, if any). Note\n: This activity does not split the query string into key-value pairs — use the\nSplit HTTP Query\nactivity if you need that level of detail.\nSample Input\nemployee_id\nname\nurl\nE001\nJohn Doe', 'chunk_index': 2}, vector=None, shard_key=None, order_value=None)]
[ 2025-08-10 23:03:32,298 ] test_main.py:82 root - INFO - Retrieved result for point ID: 16772a9b-c89a-4370-ae9b-911286a37769
[ 2025-08-10 23:03:32,298 ] test_main.py:185 root - INFO - Loaded rewritten query user prompt.
[ 2025-08-10 23:03:33,561 ] _client.py:1025 httpx - INFO - HTTP Request: POST https://api.groq.com/openai/v1/chat/completions "HTTP/1.1 200 OK"
[ 2025-08-10 23:03:33,565 ] test_main.py:327 root - INFO - Response for query part 1: The **Execute Query** activity in Infoveave allows you to run SQL queries against your connected data sources.  

Here's a breakdown:

* **Purpose:** This activity is designed to retrieve data from databases, data warehouses, or cloud storage engines by executing SQL queries.

* **Use Cases:**
    * **Real-time Analytics:** Fetch up-to-date data for dashboards or reporting.
    * **Data Transformations:**  Modify and reshape data within your workflow.
    * **Data Integration:**  Bring external data into your Infoveave pipelines.

* **Key Features:**
    * **Connection:** You'll need to specify a connection to your data source (e.g., MySQL, PostgreSQL, BigQuery).
    * **Query:**  Enter your SQL query string. The activity supports standard SQL syntax.
    * **Output:** The results of your query are returned as a tabular data structure.

* **Where to Find More Information:**
    [https://infoveave-help.pages.dev/automation-v8/activities/execute-query/](https://infoveave-help.pages.dev/automation-v8/activities/execute-query/) 



Let me know if you have any other questions about the Execute Query activity or need help with specific aspects of using it!
[ 2025-08-10 23:03:33,565 ] test_main.py:330 root - INFO - [(Document(metadata={'_id': '4bf7f9a7-fc4e-49bc-9caf-4fd89d8160ab', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='Execute Query | Infoveave Help\nSkip to content\nExecute Query\nDescription\nThe\nExecute Query'), 0.5), (Document(metadata={'_id': 'c4316ab6-9c63-42af-b504-74f8cdbc37df', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='This activity connects to your Google Cloud project, runs the specified query, and returns the results in tabular format. It is ideal for pulling real-time analytics, data transformations, or integrating cloud data into your workflow pipelines.\nUse case\n: Fetch customer order data by region for the last quarter directly from BigQuery to feed a dashboard or analytics engine.\nInput\nNot Applicable\nOutput\nOutput Type\nFormat\nDescription\nData\nTable Output of the executed BigQuery SQL query.\nConfiguration Fields\nField Name\nDescription\nConnection\nGoogle BigQuery connection (OAuth or service account). Required for access.\nProject\nGoogle Cloud Project ID containing the BigQuery datasets.\nQuery The SQL query string to be executed. Supports standard SQL syntax.\nSample Input\nNot Applicable\nSample Configuration\nField\nValue\nConnection\nGoogle BigQuery OAuth\nProject\ncustomer-data-analytics\nQuery'), 0.33333334), (Document(metadata={'_id': '21c3607e-54d8-44a9-b1b6-12646396ca58', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='activity executes a structured query (e.g., SQL) against a configured data source such as a relational database, data warehouse, or cloud storage engine . You can retrieve the results directly as tabular output or optionally save them to a file using configurable export settings. This activity is especially useful for dynamically pulling data into a workflow, generating reports, or integrating external data systems. When saving results to a file, it also supports advanced formatting using templates, encryption, and partitioning logic. Use this activity to:\nQuery databases and bring live data into workflows\nExport query results as Excel or CSV files\nApply formatting using templates and control sheet/row structure\nSecure output files with encryption and filename customization\nUse case\n: A data analyst can use this activity to run a sales report query on a PostgreSQL database. The output can be formatted using a template Excel file, encrypted using a secret key, and saved with a filename pattern that includes a timestamp.\nInput Type\nDescription\nData\nOptional incoming data used to influence the query or filenames (if dynamic).\nOutput\nOutput Type\nFormat\nDescription\nData\nTable or File Query results, either in-memory (as table) or written to file(s).\nConfiguration Fields\nField Name\nDescription\nDatasource Id Select the connection representing the data source (e.g., MySQL, SQL Server, Snowflake) where the query will run.\nQuery The query string (SQL or supported query language) to be executed on the selected data source. Supports variables if dynamic queries are needed.\nSave As File Enable this option to save the query result to a file instead of returning it as in-memory table data.\nSecret Key\nRequired only when “Save As File” is enabled. This encryption key secures the generated file’s content.'), 0.25), (Document(metadata={'_id': '65f1fed2-a4bd-4a52-aa8a-cc0e2c0490f2', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content="activity allows users to execute SQL queries on files or data stored in a connected data source (e.g., database, storage, or file-based system). This activity supports dynamic queries, and optionally allows saving the results to files with encryption, formatting, and custom output configuration.\nUse this activity to:\nExecute ad hoc or parameterized SQL queries on uploaded or connected data Retrieve transformed or filtered data for further processing\nGenerate reports or structured data files from query results\nUse Case\n: Useful in scenarios where data needs to be filtered, joined, aggregated, or reshaped before it’s used in reporting, validation, or export.\nInput\nType\nDescription\nFiles\nFiles/data available in the connection\nOutput\nType Format\nDescription\nData / File\nTable / File\nQuery result as a table or downloadable file\nConfiguration Fields\nField Name\nRequired\nDescription\nConnection\nYes\nConnection to the data source where the query should be executed.\nQuery Yes\nSQL query to be executed on the connected data source.\nSave As File\nNo\nIf enabled, the query result will be saved as a file.\nSecret Key\nConditional Encryption key used to secure the generated output file (enabled only if Save As File is true).\nFile Pattern\nConditional\nPattern for naming the generated files.\nSheet Name\nConditional Sheet name to use in the generated file (for Excel formats).\nFile\nConditional\nTemplate file to structure the output.\nSplit by Column\nConditional\nColumn name used to split the query result into multiple output files.\nStarting Row Conditional\nRow index in the template file from where data insertion begins.\nStarting Column\nConditional\nColumn index in the template file from where data insertion begins.\nSample Input\nNot applicable\n— data is pulled from the connected data source. Sample Configuration\nField\nValue\nConnection\nAzureBlobConnection\nQuery\nSELECT * FROM SalesData WHERE Region = 'East'\nSave As File\ntrue\nSecret Key\nEncrypt@123\nFile Pattern\nSales_Report_[Region]"), 0.2), (Document(metadata={'_id': '16772a9b-c89a-4370-ae9b-911286a37769', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content=').\nQuery Column Name\nColumn name to store the query string (portion after\n?\n) without parsing key-value pairs.\nFragment Column Name\nColumn name to store the fragment identifier (portion after\n#\n, if any). Note\n: This activity does not split the query string into key-value pairs — use the\nSplit HTTP Query\nactivity if you need that level of detail.\nSample Input\nemployee_id\nname\nurl\nE001\nJohn Doe'), 0.16666667)]
[ 2025-08-10 23:03:33,587 ] test_main.py:71 root - INFO - Building context with metadata from documents...
[ 2025-08-10 23:03:33,588 ] test_main.py:73 root - INFO - (Document(metadata={'_id': '4bf7f9a7-fc4e-49bc-9caf-4fd89d8160ab', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='Execute Query | Infoveave Help\nSkip to content\nExecute Query\nDescription\nThe\nExecute Query'), 0.5)
[ 2025-08-10 23:03:33,642 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-10 23:03:33,643 ] test_main.py:81 root - INFO - [Record(id='4bf7f9a7-fc4e-49bc-9caf-4fd89d8160ab', payload={'url': 'https://infoveave-help.pages.dev/automation-v8/activities/execute-query/', 'title': 'execute-query', 'section': 'automation', 'terminologies': ['Infoveave', 'Query', 'Reports', 'Value'], 'char_count': 2330, 'word_count': 363, 'page_content': 'Execute Query | Infoveave Help\nSkip to content\nExecute Query\nDescription\nThe\nExecute Query', 'chunk_index': 0}, vector=None, shard_key=None, order_value=None)]
[ 2025-08-10 23:03:33,644 ] test_main.py:82 root - INFO - Retrieved result for point ID: 4bf7f9a7-fc4e-49bc-9caf-4fd89d8160ab
[ 2025-08-10 23:03:33,644 ] test_main.py:73 root - INFO - (Document(metadata={'_id': 'c4316ab6-9c63-42af-b504-74f8cdbc37df', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='This activity connects to your Google Cloud project, runs the specified query, and returns the results in tabular format. It is ideal for pulling real-time analytics, data transformations, or integrating cloud data into your workflow pipelines.\nUse case\n: Fetch customer order data by region for the last quarter directly from BigQuery to feed a dashboard or analytics engine.\nInput\nNot Applicable\nOutput\nOutput Type\nFormat\nDescription\nData\nTable Output of the executed BigQuery SQL query.\nConfiguration Fields\nField Name\nDescription\nConnection\nGoogle BigQuery connection (OAuth or service account). Required for access.\nProject\nGoogle Cloud Project ID containing the BigQuery datasets.\nQuery The SQL query string to be executed. Supports standard SQL syntax.\nSample Input\nNot Applicable\nSample Configuration\nField\nValue\nConnection\nGoogle BigQuery OAuth\nProject\ncustomer-data-analytics\nQuery'), 0.33333334)
[ 2025-08-10 23:03:33,697 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-10 23:03:33,734 ] test_main.py:81 root - INFO - [Record(id='c4316ab6-9c63-42af-b504-74f8cdbc37df', payload={'url': 'https://infoveave-help.pages.dev/automation-v8/activities/fetch-from-bigquery/', 'title': 'fetch-from-bigquery', 'section': 'automation', 'terminologies': ['Infoveave', 'Query', 'Value'], 'char_count': 1338, 'word_count': 194, 'page_content': 'This activity connects to your Google Cloud project, runs the specified query, and returns the results in tabular format. It is ideal for pulling real-time analytics, data transformations, or integrating cloud data into your workflow pipelines.\nUse case\n: Fetch customer order data by region for the last quarter directly from BigQuery to feed a dashboard or analytics engine.\nInput\nNot Applicable\nOutput\nOutput Type\nFormat\nDescription\nData\nTable Output of the executed BigQuery SQL query.\nConfiguration Fields\nField Name\nDescription\nConnection\nGoogle BigQuery connection (OAuth or service account). Required for access.\nProject\nGoogle Cloud Project ID containing the BigQuery datasets.\nQuery The SQL query string to be executed. Supports standard SQL syntax.\nSample Input\nNot Applicable\nSample Configuration\nField\nValue\nConnection\nGoogle BigQuery OAuth\nProject\ncustomer-data-analytics\nQuery', 'chunk_index': 1}, vector=None, shard_key=None, order_value=None)]
[ 2025-08-10 23:03:33,734 ] test_main.py:82 root - INFO - Retrieved result for point ID: c4316ab6-9c63-42af-b504-74f8cdbc37df
[ 2025-08-10 23:03:33,734 ] test_main.py:73 root - INFO - (Document(metadata={'_id': '21c3607e-54d8-44a9-b1b6-12646396ca58', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='activity executes a structured query (e.g., SQL) against a configured data source such as a relational database, data warehouse, or cloud storage engine . You can retrieve the results directly as tabular output or optionally save them to a file using configurable export settings. This activity is especially useful for dynamically pulling data into a workflow, generating reports, or integrating external data systems. When saving results to a file, it also supports advanced formatting using templates, encryption, and partitioning logic. Use this activity to:\nQuery databases and bring live data into workflows\nExport query results as Excel or CSV files\nApply formatting using templates and control sheet/row structure\nSecure output files with encryption and filename customization\nUse case\n: A data analyst can use this activity to run a sales report query on a PostgreSQL database. The output can be formatted using a template Excel file, encrypted using a secret key, and saved with a filename pattern that includes a timestamp.\nInput Type\nDescription\nData\nOptional incoming data used to influence the query or filenames (if dynamic).\nOutput\nOutput Type\nFormat\nDescription\nData\nTable or File Query results, either in-memory (as table) or written to file(s).\nConfiguration Fields\nField Name\nDescription\nDatasource Id Select the connection representing the data source (e.g., MySQL, SQL Server, Snowflake) where the query will run.\nQuery The query string (SQL or supported query language) to be executed on the selected data source. Supports variables if dynamic queries are needed.\nSave As File Enable this option to save the query result to a file instead of returning it as in-memory table data.\nSecret Key\nRequired only when “Save As File” is enabled. This encryption key secures the generated file’s content.'), 0.25)
[ 2025-08-10 23:03:33,801 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-10 23:03:33,839 ] test_main.py:81 root - INFO - [Record(id='21c3607e-54d8-44a9-b1b6-12646396ca58', payload={'url': 'https://infoveave-help.pages.dev/automation-v8/activities/query-datasource/', 'title': 'query-datasource', 'section': 'automation', 'terminologies': ['Infoveave', 'Query', 'Reports', 'Value', 'Variables', 'Workflows'], 'char_count': 3756, 'word_count': 590, 'page_content': 'activity executes a structured query (e.g., SQL) against a configured data source such as a relational database, data warehouse, or cloud storage engine . You can retrieve the results directly as tabular output or optionally save them to a file using configurable export settings. This activity is especially useful for dynamically pulling data into a workflow, generating reports, or integrating external data systems. When saving results to a file, it also supports advanced formatting using templates, encryption, and partitioning logic. Use this activity to:\nQuery databases and bring live data into workflows\nExport query results as Excel or CSV files\nApply formatting using templates and control sheet/row structure\nSecure output files with encryption and filename customization\nUse case\n: A data analyst can use this activity to run a sales report query on a PostgreSQL database. The output can be formatted using a template Excel file, encrypted using a secret key, and saved with a filename pattern that includes a timestamp.\nInput Type\nDescription\nData\nOptional incoming data used to influence the query or filenames (if dynamic).\nOutput\nOutput Type\nFormat\nDescription\nData\nTable or File Query results, either in-memory (as table) or written to file(s).\nConfiguration Fields\nField Name\nDescription\nDatasource Id Select the connection representing the data source (e.g., MySQL, SQL Server, Snowflake) where the query will run.\nQuery The query string (SQL or supported query language) to be executed on the selected data source. Supports variables if dynamic queries are needed.\nSave As File Enable this option to save the query result to a file instead of returning it as in-memory table data.\nSecret Key\nRequired only when “Save As File” is enabled. This encryption key secures the generated file’s content.', 'chunk_index': 1}, vector=None, shard_key=None, order_value=None)]
[ 2025-08-10 23:03:33,839 ] test_main.py:82 root - INFO - Retrieved result for point ID: 21c3607e-54d8-44a9-b1b6-12646396ca58
[ 2025-08-10 23:03:33,839 ] test_main.py:73 root - INFO - (Document(metadata={'_id': '65f1fed2-a4bd-4a52-aa8a-cc0e2c0490f2', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content="activity allows users to execute SQL queries on files or data stored in a connected data source (e.g., database, storage, or file-based system). This activity supports dynamic queries, and optionally allows saving the results to files with encryption, formatting, and custom output configuration.\nUse this activity to:\nExecute ad hoc or parameterized SQL queries on uploaded or connected data Retrieve transformed or filtered data for further processing\nGenerate reports or structured data files from query results\nUse Case\n: Useful in scenarios where data needs to be filtered, joined, aggregated, or reshaped before it’s used in reporting, validation, or export.\nInput\nType\nDescription\nFiles\nFiles/data available in the connection\nOutput\nType Format\nDescription\nData / File\nTable / File\nQuery result as a table or downloadable file\nConfiguration Fields\nField Name\nRequired\nDescription\nConnection\nYes\nConnection to the data source where the query should be executed.\nQuery Yes\nSQL query to be executed on the connected data source.\nSave As File\nNo\nIf enabled, the query result will be saved as a file.\nSecret Key\nConditional Encryption key used to secure the generated output file (enabled only if Save As File is true).\nFile Pattern\nConditional\nPattern for naming the generated files.\nSheet Name\nConditional Sheet name to use in the generated file (for Excel formats).\nFile\nConditional\nTemplate file to structure the output.\nSplit by Column\nConditional\nColumn name used to split the query result into multiple output files.\nStarting Row Conditional\nRow index in the template file from where data insertion begins.\nStarting Column\nConditional\nColumn index in the template file from where data insertion begins.\nSample Input\nNot applicable\n— data is pulled from the connected data source. Sample Configuration\nField\nValue\nConnection\nAzureBlobConnection\nQuery\nSELECT * FROM SalesData WHERE Region = 'East'\nSave As File\ntrue\nSecret Key\nEncrypt@123\nFile Pattern\nSales_Report_[Region]"), 0.2)
[ 2025-08-10 23:03:33,901 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-10 23:03:33,940 ] test_main.py:81 root - INFO - [Record(id='65f1fed2-a4bd-4a52-aa8a-cc0e2c0490f2', payload={'url': 'https://infoveave-help.pages.dev/automation-v8/activities/execute-query/', 'title': 'execute-query', 'section': 'automation', 'terminologies': ['Infoveave', 'Query', 'Reports', 'Value'], 'char_count': 2330, 'word_count': 363, 'page_content': "activity allows users to execute SQL queries on files or data stored in a connected data source (e.g., database, storage, or file-based system). This activity supports dynamic queries, and optionally allows saving the results to files with encryption, formatting, and custom output configuration.\nUse this activity to:\nExecute ad hoc or parameterized SQL queries on uploaded or connected data Retrieve transformed or filtered data for further processing\nGenerate reports or structured data files from query results\nUse Case\n: Useful in scenarios where data needs to be filtered, joined, aggregated, or reshaped before it’s used in reporting, validation, or export.\nInput\nType\nDescription\nFiles\nFiles/data available in the connection\nOutput\nType Format\nDescription\nData / File\nTable / File\nQuery result as a table or downloadable file\nConfiguration Fields\nField Name\nRequired\nDescription\nConnection\nYes\nConnection to the data source where the query should be executed.\nQuery Yes\nSQL query to be executed on the connected data source.\nSave As File\nNo\nIf enabled, the query result will be saved as a file.\nSecret Key\nConditional Encryption key used to secure the generated output file (enabled only if Save As File is true).\nFile Pattern\nConditional\nPattern for naming the generated files.\nSheet Name\nConditional Sheet name to use in the generated file (for Excel formats).\nFile\nConditional\nTemplate file to structure the output.\nSplit by Column\nConditional\nColumn name used to split the query result into multiple output files.\nStarting Row Conditional\nRow index in the template file from where data insertion begins.\nStarting Column\nConditional\nColumn index in the template file from where data insertion begins.\nSample Input\nNot applicable\n— data is pulled from the connected data source. Sample Configuration\nField\nValue\nConnection\nAzureBlobConnection\nQuery\nSELECT * FROM SalesData WHERE Region = 'East'\nSave As File\ntrue\nSecret Key\nEncrypt@123\nFile Pattern\nSales_Report_[Region]", 'chunk_index': 1}, vector=None, shard_key=None, order_value=None)]
[ 2025-08-10 23:03:33,941 ] test_main.py:82 root - INFO - Retrieved result for point ID: 65f1fed2-a4bd-4a52-aa8a-cc0e2c0490f2
[ 2025-08-10 23:03:33,941 ] test_main.py:73 root - INFO - (Document(metadata={'_id': '16772a9b-c89a-4370-ae9b-911286a37769', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content=').\nQuery Column Name\nColumn name to store the query string (portion after\n?\n) without parsing key-value pairs.\nFragment Column Name\nColumn name to store the fragment identifier (portion after\n#\n, if any). Note\n: This activity does not split the query string into key-value pairs — use the\nSplit HTTP Query\nactivity if you need that level of detail.\nSample Input\nemployee_id\nname\nurl\nE001\nJohn Doe'), 0.16666667)
[ 2025-08-10 23:03:33,997 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-10 23:03:33,998 ] test_main.py:81 root - INFO - [Record(id='16772a9b-c89a-4370-ae9b-911286a37769', payload={'url': 'https://infoveave-help.pages.dev/automation-v8/activities/split-url/', 'title': 'split-url', 'section': 'automation', 'terminologies': ['Infoveave', 'Query', 'Reports', 'Value'], 'char_count': 3191, 'word_count': 408, 'page_content': ').\nQuery Column Name\nColumn name to store the query string (portion after\n?\n) without parsing key-value pairs.\nFragment Column Name\nColumn name to store the fragment identifier (portion after\n#\n, if any). Note\n: This activity does not split the query string into key-value pairs — use the\nSplit HTTP Query\nactivity if you need that level of detail.\nSample Input\nemployee_id\nname\nurl\nE001\nJohn Doe', 'chunk_index': 2}, vector=None, shard_key=None, order_value=None)]
[ 2025-08-10 23:03:33,998 ] test_main.py:82 root - INFO - Retrieved result for point ID: 16772a9b-c89a-4370-ae9b-911286a37769
[ 2025-08-10 23:03:33,998 ] test_main.py:316 root - INFO - Rewritten Query 2: Send Email
[ 2025-08-10 23:03:34,453 ] test_main.py:319 root - INFO - Embedding generated for query 2.
[ 2025-08-10 23:03:35,693 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points/query "HTTP/1.1 200 OK"
[ 2025-08-10 23:03:35,735 ] test_main.py:324 root - INFO - Processing query part 2: Send Email
[ 2025-08-10 23:03:35,760 ] test_main.py:71 root - INFO - Building context with metadata from documents...
[ 2025-08-10 23:03:35,760 ] test_main.py:73 root - INFO - (Document(metadata={'_id': 'b0c2000b-2a94-480e-8ade-5ccb489ed9ea', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='Send Email | Infoveave Help\nSkip to content\nSend Email\nDescription\nThe\nSend Email'), 0.5)
[ 2025-08-10 23:03:35,813 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-10 23:03:35,813 ] test_main.py:81 root - INFO - [Record(id='b0c2000b-2a94-480e-8ade-5ccb489ed9ea', payload={'url': 'https://infoveave-help.pages.dev/automation-v8/activities/send-email/', 'title': 'send-email', 'section': 'automation', 'terminologies': ['Infoveave', 'Value'], 'char_count': 3312, 'word_count': 495, 'page_content': 'Send Email | Infoveave Help\nSkip to content\nSend Email\nDescription\nThe\nSend Email', 'chunk_index': 0}, vector=None, shard_key=None, order_value=None)]
[ 2025-08-10 23:03:35,813 ] test_main.py:82 root - INFO - Retrieved result for point ID: b0c2000b-2a94-480e-8ade-5ccb489ed9ea
[ 2025-08-10 23:03:35,814 ] test_main.py:73 root - INFO - (Document(metadata={'_id': 'de5e3b97-dd0f-4d05-8da9-ae3c750c78cc', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='activity allows you to compose and send emails as part of a workflow. You can configure recipient addresses, subject, body content, and attachments . The activity also supports dynamic emailing using fields from input data, and allows the use of pre-designed Infoveave templates for styling and formatting consistency. Use this activity to:\nSend individual or bulk emails based on incoming data\nAttach files generated in the workflow\nFormat emails using templates for consistency\nEmbed processed data directly into the email body\nUse case\n: A workflow generates a monthly sales report and automatically sends personalized emails to each regional manager with their region’s data attached and included in the body.\nInput\nType\nDescription\nData'), 0.33333334)
[ 2025-08-10 23:03:35,880 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-10 23:03:35,920 ] test_main.py:81 root - INFO - [Record(id='de5e3b97-dd0f-4d05-8da9-ae3c750c78cc', payload={'url': 'https://infoveave-help.pages.dev/automation-v8/activities/send-email/', 'title': 'send-email', 'section': 'automation', 'terminologies': ['Infoveave', 'Value'], 'char_count': 3312, 'word_count': 495, 'page_content': 'activity allows you to compose and send emails as part of a workflow. You can configure recipient addresses, subject, body content, and attachments . The activity also supports dynamic emailing using fields from input data, and allows the use of pre-designed Infoveave templates for styling and formatting consistency. Use this activity to:\nSend individual or bulk emails based on incoming data\nAttach files generated in the workflow\nFormat emails using templates for consistency\nEmbed processed data directly into the email body\nUse case\n: A workflow generates a monthly sales report and automatically sends personalized emails to each regional manager with their region’s data attached and included in the body.\nInput\nType\nDescription\nData', 'chunk_index': 1}, vector=None, shard_key=None, order_value=None)]
[ 2025-08-10 23:03:35,920 ] test_main.py:82 root - INFO - Retrieved result for point ID: de5e3b97-dd0f-4d05-8da9-ae3c750c78cc
[ 2025-08-10 23:03:35,920 ] test_main.py:73 root - INFO - (Document(metadata={'_id': '79fddbc7-ebeb-4a13-9afb-02e3c3ec7774', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='(Optional) Tabular data used to populate dynamic fields like email addresses, template content, or attachment grouping.\nOutput\nOutput Type\nFormat\nDescription\nEmail Info\nTable Status of sent emails including recipient, success, and any errors encountered.\nConfiguration Fields\nField Name\nDescription\nConnection\nMail server connection to send emails (OAuth or SMTP supported).\nUse Default Credentials If enabled, uses Infoveave’s default email credentials. Disable to use custom authentication.\nUse Email Address From Data\nIf enabled, pulls recipient addresses from a specified column in the input data.\nEmail Column The column in the data containing the recipient’s email address (required if using email from data).\nEmail To Address\nStatic recipient(s) for the “To” field (comma-separated).\nEmail CC Address Email addresses for the “CC” field (comma-separated).\nEmail BCC Address\nEmail addresses for the “BCC” field.\nSubject\nSubject line of the email. Can be static or mapped from input data.\nContent The main body content of the email. Supports plain text or HTML.\nUse Infoveave Template\nWhen enabled, applies an Infoveave-designed template to the email layout.\nRerun Template Ensures template consistency across multiple emails in the same run.\nAttachment Name\nName of the attachment file (e.g.,\nSalesReport_May2025.xlsx\n).\nSplit By Column Splits data into separate attachments based on values in this column (used in bulk personalization).\nSheet Name\nThe name of the worksheet in the template used for formatting the attachment content.\nSend Data In Email Body If enabled, includes input data as a formatted table within the body of the email.\nAttachment File Pattern\nPattern to identify which files to attach from prior activities (e.g.,\n"*.pdf"\n).\nCombine\nSplit By Column with\nEmail Column\nto send a unique email with corresponding data and attachment per recipient.\nSample Input\nNot applicable\n(used only if sending emails dynamically per row or attaching generated data).\nSample Configuration\nField\nValue'), 0.25)
[ 2025-08-10 23:03:35,987 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-10 23:03:36,031 ] test_main.py:81 root - INFO - [Record(id='79fddbc7-ebeb-4a13-9afb-02e3c3ec7774', payload={'url': 'https://infoveave-help.pages.dev/automation-v8/activities/send-email/', 'title': 'send-email', 'section': 'automation', 'terminologies': ['Infoveave', 'Value'], 'char_count': 3312, 'word_count': 495, 'page_content': '(Optional) Tabular data used to populate dynamic fields like email addresses, template content, or attachment grouping.\nOutput\nOutput Type\nFormat\nDescription\nEmail Info\nTable Status of sent emails including recipient, success, and any errors encountered.\nConfiguration Fields\nField Name\nDescription\nConnection\nMail server connection to send emails (OAuth or SMTP supported).\nUse Default Credentials If enabled, uses Infoveave’s default email credentials. Disable to use custom authentication.\nUse Email Address From Data\nIf enabled, pulls recipient addresses from a specified column in the input data.\nEmail Column The column in the data containing the recipient’s email address (required if using email from data).\nEmail To Address\nStatic recipient(s) for the “To” field (comma-separated).\nEmail CC Address Email addresses for the “CC” field (comma-separated).\nEmail BCC Address\nEmail addresses for the “BCC” field.\nSubject\nSubject line of the email. Can be static or mapped from input data.\nContent The main body content of the email. Supports plain text or HTML.\nUse Infoveave Template\nWhen enabled, applies an Infoveave-designed template to the email layout.\nRerun Template Ensures template consistency across multiple emails in the same run.\nAttachment Name\nName of the attachment file (e.g.,\nSalesReport_May2025.xlsx\n).\nSplit By Column Splits data into separate attachments based on values in this column (used in bulk personalization).\nSheet Name\nThe name of the worksheet in the template used for formatting the attachment content.\nSend Data In Email Body If enabled, includes input data as a formatted table within the body of the email.\nAttachment File Pattern\nPattern to identify which files to attach from prior activities (e.g.,\n"*.pdf"\n).\nCombine\nSplit By Column with\nEmail Column\nto send a unique email with corresponding data and attachment per recipient.\nSample Input\nNot applicable\n(used only if sending emails dynamically per row or attaching generated data).\nSample Configuration\nField\nValue', 'chunk_index': 2}, vector=None, shard_key=None, order_value=None)]
[ 2025-08-10 23:03:36,031 ] test_main.py:82 root - INFO - Retrieved result for point ID: 79fddbc7-ebeb-4a13-9afb-02e3c3ec7774
[ 2025-08-10 23:03:36,031 ] test_main.py:73 root - INFO - (Document(metadata={'_id': 'ea0e4e86-0f23-462b-a182-48cedad8fdd9', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='2025-07-01T10:05:00Z\njohn@example.com\nWelcome Email\n18KB\nonboarding\nev1235\nopened\n2025-07-01T10:08:00Z jane@example.com\nPromo Offer\n22KB\npromotions\nFor\nMessages\nEntity (JSON):\n{\n"headers"\n: {\n"message-id"\n:\n"\n<abc@mailgun.org>'), 0.2)
[ 2025-08-10 23:03:36,094 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-10 23:03:36,095 ] test_main.py:81 root - INFO - [Record(id='ea0e4e86-0f23-462b-a182-48cedad8fdd9', payload={'url': 'https://infoveave-help.pages.dev/automation-v8/activities/mailgun/', 'title': 'mailgun', 'section': 'automation', 'terminologies': ['Infoveave', 'Tags', 'Value', 'Workflows'], 'char_count': 3213, 'word_count': 485, 'page_content': '2025-07-01T10:05:00Z\njohn@example.com\nWelcome Email\n18KB\nonboarding\nev1235\nopened\n2025-07-01T10:08:00Z jane@example.com\nPromo Offer\n22KB\npromotions\nFor\nMessages\nEntity (JSON):\n{\n"headers"\n: {\n"message-id"\n:\n"\n<abc@mailgun.org>', 'chunk_index': 3}, vector=None, shard_key=None, order_value=None)]
[ 2025-08-10 23:03:36,095 ] test_main.py:82 root - INFO - Retrieved result for point ID: ea0e4e86-0f23-462b-a182-48cedad8fdd9
[ 2025-08-10 23:03:36,095 ] test_main.py:73 root - INFO - (Document(metadata={'_id': 'b6d38099-c9de-471f-973c-0f9d734b02ec', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='Activity Step\nReplaced Values\nSendEmail_12345\nStep 1\nCustomerName: John Doe\nSendEmail_67890\nStep 2\nCustomerName: Jane Smith'), 0.16666667)
[ 2025-08-10 23:03:36,147 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-10 23:03:36,148 ] test_main.py:81 root - INFO - [Record(id='b6d38099-c9de-471f-973c-0f9d734b02ec', payload={'url': 'https://infoveave-help.pages.dev/automation-v8/activities/start-iteration/', 'title': 'start-iteration', 'section': 'automation', 'terminologies': ['Infoveave', 'Value'], 'char_count': 2180, 'word_count': 314, 'page_content': 'Activity Step\nReplaced Values\nSendEmail_12345\nStep 1\nCustomerName: John Doe\nSendEmail_67890\nStep 2\nCustomerName: Jane Smith', 'chunk_index': 2}, vector=None, shard_key=None, order_value=None)]
[ 2025-08-10 23:03:36,148 ] test_main.py:82 root - INFO - Retrieved result for point ID: b6d38099-c9de-471f-973c-0f9d734b02ec
[ 2025-08-10 23:03:36,149 ] test_main.py:185 root - INFO - Loaded rewritten query user prompt.
[ 2025-08-10 23:03:37,834 ] _client.py:1025 httpx - INFO - HTTP Request: POST https://api.groq.com/openai/v1/chat/completions "HTTP/1.1 200 OK"
[ 2025-08-10 23:03:37,837 ] test_main.py:327 root - INFO - Response for query part 2: The **Send Email** activity in Infoveave allows you to compose and send emails as part of a workflow. 

You can configure recipient addresses, subject, body content, and attachments. The activity also supports dynamic emailing using fields from input data, and allows the use of pre-designed Infoveave templates for styling and formatting consistency. 

Here's a breakdown of how it works:

**Use Cases:**

* Send individual or bulk emails based on incoming data
* Attach files generated in the workflow
* Format emails using templates for consistency
* Embed processed data directly into the email body

**Input:**

* **Data:** (Optional) Tabular data used to populate dynamic fields like email addresses, template content, or attachment grouping.

**Output:**

* **Email Info:** Table Status of sent emails including recipient, success, and any errors encountered.

**Configuration Fields:**

* **Connection:** Mail server connection to send emails (OAuth or SMTP supported).
* **Use Default Credentials:** If enabled, uses Infoveave’s default email credentials. Disable to use custom authentication.
* **Use Email Address From Data:** If enabled, pulls recipient addresses from a specified column in the input data.
* **Email Column:** The column in the data containing the recipient’s email address (required if using email from data).
* **Email To Address:** Static recipient(s) for the “To” field (comma-separated).
* **Email CC Address:** Email addresses for the “CC” field (comma-separated).
* **Email BCC Address:** Email addresses for the “BCC” field.
* **Subject:** Subject line of the email. Can be static or mapped from input data.
* **Content:** The main body content of the email. Supports plain text or HTML.
* **Use Infoveave Template:** When enabled, applies an Infoveave-designed template to the email layout.
* **Rerun Template:** Ensures template consistency across multiple emails in the same run.
* **Attachment Name:** Name of the attachment file (e.g., SalesReport_May2025.xlsx).
* **Split By Column:** Splits data into separate attachments based on values in this column (used in bulk personalization).
* **Sheet Name:** The name of the worksheet in the template used for formatting the attachment content.
* **Send Data In Email Body:** If enabled, includes input data as a formatted table within the body of the email.
* **Attachment File Pattern:** Pattern to identify which files to attach from prior activities (e.g., "*.pdf").

**Combining Features:**

You can combine `Split By Column` with `Email Column` to send a unique email with corresponding data and attachment per recipient.
[ 2025-08-10 23:03:37,837 ] test_main.py:330 root - INFO - [(Document(metadata={'_id': 'b0c2000b-2a94-480e-8ade-5ccb489ed9ea', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='Send Email | Infoveave Help\nSkip to content\nSend Email\nDescription\nThe\nSend Email'), 0.5), (Document(metadata={'_id': 'de5e3b97-dd0f-4d05-8da9-ae3c750c78cc', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='activity allows you to compose and send emails as part of a workflow. You can configure recipient addresses, subject, body content, and attachments . The activity also supports dynamic emailing using fields from input data, and allows the use of pre-designed Infoveave templates for styling and formatting consistency. Use this activity to:\nSend individual or bulk emails based on incoming data\nAttach files generated in the workflow\nFormat emails using templates for consistency\nEmbed processed data directly into the email body\nUse case\n: A workflow generates a monthly sales report and automatically sends personalized emails to each regional manager with their region’s data attached and included in the body.\nInput\nType\nDescription\nData'), 0.33333334), (Document(metadata={'_id': '79fddbc7-ebeb-4a13-9afb-02e3c3ec7774', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='(Optional) Tabular data used to populate dynamic fields like email addresses, template content, or attachment grouping.\nOutput\nOutput Type\nFormat\nDescription\nEmail Info\nTable Status of sent emails including recipient, success, and any errors encountered.\nConfiguration Fields\nField Name\nDescription\nConnection\nMail server connection to send emails (OAuth or SMTP supported).\nUse Default Credentials If enabled, uses Infoveave’s default email credentials. Disable to use custom authentication.\nUse Email Address From Data\nIf enabled, pulls recipient addresses from a specified column in the input data.\nEmail Column The column in the data containing the recipient’s email address (required if using email from data).\nEmail To Address\nStatic recipient(s) for the “To” field (comma-separated).\nEmail CC Address Email addresses for the “CC” field (comma-separated).\nEmail BCC Address\nEmail addresses for the “BCC” field.\nSubject\nSubject line of the email. Can be static or mapped from input data.\nContent The main body content of the email. Supports plain text or HTML.\nUse Infoveave Template\nWhen enabled, applies an Infoveave-designed template to the email layout.\nRerun Template Ensures template consistency across multiple emails in the same run.\nAttachment Name\nName of the attachment file (e.g.,\nSalesReport_May2025.xlsx\n).\nSplit By Column Splits data into separate attachments based on values in this column (used in bulk personalization).\nSheet Name\nThe name of the worksheet in the template used for formatting the attachment content.\nSend Data In Email Body If enabled, includes input data as a formatted table within the body of the email.\nAttachment File Pattern\nPattern to identify which files to attach from prior activities (e.g.,\n"*.pdf"\n).\nCombine\nSplit By Column with\nEmail Column\nto send a unique email with corresponding data and attachment per recipient.\nSample Input\nNot applicable\n(used only if sending emails dynamically per row or attaching generated data).\nSample Configuration\nField\nValue'), 0.25), (Document(metadata={'_id': 'ea0e4e86-0f23-462b-a182-48cedad8fdd9', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='2025-07-01T10:05:00Z\njohn@example.com\nWelcome Email\n18KB\nonboarding\nev1235\nopened\n2025-07-01T10:08:00Z jane@example.com\nPromo Offer\n22KB\npromotions\nFor\nMessages\nEntity (JSON):\n{\n"headers"\n: {\n"message-id"\n:\n"\n<abc@mailgun.org>'), 0.2), (Document(metadata={'_id': 'b6d38099-c9de-471f-973c-0f9d734b02ec', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='Activity Step\nReplaced Values\nSendEmail_12345\nStep 1\nCustomerName: John Doe\nSendEmail_67890\nStep 2\nCustomerName: Jane Smith'), 0.16666667)]
[ 2025-08-10 23:03:37,862 ] test_main.py:71 root - INFO - Building context with metadata from documents...
[ 2025-08-10 23:03:37,862 ] test_main.py:73 root - INFO - (Document(metadata={'_id': 'b0c2000b-2a94-480e-8ade-5ccb489ed9ea', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='Send Email | Infoveave Help\nSkip to content\nSend Email\nDescription\nThe\nSend Email'), 0.5)
[ 2025-08-10 23:03:37,918 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-10 23:03:37,919 ] test_main.py:81 root - INFO - [Record(id='b0c2000b-2a94-480e-8ade-5ccb489ed9ea', payload={'url': 'https://infoveave-help.pages.dev/automation-v8/activities/send-email/', 'title': 'send-email', 'section': 'automation', 'terminologies': ['Infoveave', 'Value'], 'char_count': 3312, 'word_count': 495, 'page_content': 'Send Email | Infoveave Help\nSkip to content\nSend Email\nDescription\nThe\nSend Email', 'chunk_index': 0}, vector=None, shard_key=None, order_value=None)]
[ 2025-08-10 23:03:37,919 ] test_main.py:82 root - INFO - Retrieved result for point ID: b0c2000b-2a94-480e-8ade-5ccb489ed9ea
[ 2025-08-10 23:03:37,919 ] test_main.py:73 root - INFO - (Document(metadata={'_id': 'de5e3b97-dd0f-4d05-8da9-ae3c750c78cc', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='activity allows you to compose and send emails as part of a workflow. You can configure recipient addresses, subject, body content, and attachments . The activity also supports dynamic emailing using fields from input data, and allows the use of pre-designed Infoveave templates for styling and formatting consistency. Use this activity to:\nSend individual or bulk emails based on incoming data\nAttach files generated in the workflow\nFormat emails using templates for consistency\nEmbed processed data directly into the email body\nUse case\n: A workflow generates a monthly sales report and automatically sends personalized emails to each regional manager with their region’s data attached and included in the body.\nInput\nType\nDescription\nData'), 0.33333334)
[ 2025-08-10 23:03:37,977 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-10 23:03:37,978 ] test_main.py:81 root - INFO - [Record(id='de5e3b97-dd0f-4d05-8da9-ae3c750c78cc', payload={'url': 'https://infoveave-help.pages.dev/automation-v8/activities/send-email/', 'title': 'send-email', 'section': 'automation', 'terminologies': ['Infoveave', 'Value'], 'char_count': 3312, 'word_count': 495, 'page_content': 'activity allows you to compose and send emails as part of a workflow. You can configure recipient addresses, subject, body content, and attachments . The activity also supports dynamic emailing using fields from input data, and allows the use of pre-designed Infoveave templates for styling and formatting consistency. Use this activity to:\nSend individual or bulk emails based on incoming data\nAttach files generated in the workflow\nFormat emails using templates for consistency\nEmbed processed data directly into the email body\nUse case\n: A workflow generates a monthly sales report and automatically sends personalized emails to each regional manager with their region’s data attached and included in the body.\nInput\nType\nDescription\nData', 'chunk_index': 1}, vector=None, shard_key=None, order_value=None)]
[ 2025-08-10 23:03:37,979 ] test_main.py:82 root - INFO - Retrieved result for point ID: de5e3b97-dd0f-4d05-8da9-ae3c750c78cc
[ 2025-08-10 23:03:37,979 ] test_main.py:73 root - INFO - (Document(metadata={'_id': '79fddbc7-ebeb-4a13-9afb-02e3c3ec7774', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='(Optional) Tabular data used to populate dynamic fields like email addresses, template content, or attachment grouping.\nOutput\nOutput Type\nFormat\nDescription\nEmail Info\nTable Status of sent emails including recipient, success, and any errors encountered.\nConfiguration Fields\nField Name\nDescription\nConnection\nMail server connection to send emails (OAuth or SMTP supported).\nUse Default Credentials If enabled, uses Infoveave’s default email credentials. Disable to use custom authentication.\nUse Email Address From Data\nIf enabled, pulls recipient addresses from a specified column in the input data.\nEmail Column The column in the data containing the recipient’s email address (required if using email from data).\nEmail To Address\nStatic recipient(s) for the “To” field (comma-separated).\nEmail CC Address Email addresses for the “CC” field (comma-separated).\nEmail BCC Address\nEmail addresses for the “BCC” field.\nSubject\nSubject line of the email. Can be static or mapped from input data.\nContent The main body content of the email. Supports plain text or HTML.\nUse Infoveave Template\nWhen enabled, applies an Infoveave-designed template to the email layout.\nRerun Template Ensures template consistency across multiple emails in the same run.\nAttachment Name\nName of the attachment file (e.g.,\nSalesReport_May2025.xlsx\n).\nSplit By Column Splits data into separate attachments based on values in this column (used in bulk personalization).\nSheet Name\nThe name of the worksheet in the template used for formatting the attachment content.\nSend Data In Email Body If enabled, includes input data as a formatted table within the body of the email.\nAttachment File Pattern\nPattern to identify which files to attach from prior activities (e.g.,\n"*.pdf"\n).\nCombine\nSplit By Column with\nEmail Column\nto send a unique email with corresponding data and attachment per recipient.\nSample Input\nNot applicable\n(used only if sending emails dynamically per row or attaching generated data).\nSample Configuration\nField\nValue'), 0.25)
[ 2025-08-10 23:03:38,043 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-10 23:03:38,044 ] test_main.py:81 root - INFO - [Record(id='79fddbc7-ebeb-4a13-9afb-02e3c3ec7774', payload={'url': 'https://infoveave-help.pages.dev/automation-v8/activities/send-email/', 'title': 'send-email', 'section': 'automation', 'terminologies': ['Infoveave', 'Value'], 'char_count': 3312, 'word_count': 495, 'page_content': '(Optional) Tabular data used to populate dynamic fields like email addresses, template content, or attachment grouping.\nOutput\nOutput Type\nFormat\nDescription\nEmail Info\nTable Status of sent emails including recipient, success, and any errors encountered.\nConfiguration Fields\nField Name\nDescription\nConnection\nMail server connection to send emails (OAuth or SMTP supported).\nUse Default Credentials If enabled, uses Infoveave’s default email credentials. Disable to use custom authentication.\nUse Email Address From Data\nIf enabled, pulls recipient addresses from a specified column in the input data.\nEmail Column The column in the data containing the recipient’s email address (required if using email from data).\nEmail To Address\nStatic recipient(s) for the “To” field (comma-separated).\nEmail CC Address Email addresses for the “CC” field (comma-separated).\nEmail BCC Address\nEmail addresses for the “BCC” field.\nSubject\nSubject line of the email. Can be static or mapped from input data.\nContent The main body content of the email. Supports plain text or HTML.\nUse Infoveave Template\nWhen enabled, applies an Infoveave-designed template to the email layout.\nRerun Template Ensures template consistency across multiple emails in the same run.\nAttachment Name\nName of the attachment file (e.g.,\nSalesReport_May2025.xlsx\n).\nSplit By Column Splits data into separate attachments based on values in this column (used in bulk personalization).\nSheet Name\nThe name of the worksheet in the template used for formatting the attachment content.\nSend Data In Email Body If enabled, includes input data as a formatted table within the body of the email.\nAttachment File Pattern\nPattern to identify which files to attach from prior activities (e.g.,\n"*.pdf"\n).\nCombine\nSplit By Column with\nEmail Column\nto send a unique email with corresponding data and attachment per recipient.\nSample Input\nNot applicable\n(used only if sending emails dynamically per row or attaching generated data).\nSample Configuration\nField\nValue', 'chunk_index': 2}, vector=None, shard_key=None, order_value=None)]
[ 2025-08-10 23:03:38,045 ] test_main.py:82 root - INFO - Retrieved result for point ID: 79fddbc7-ebeb-4a13-9afb-02e3c3ec7774
[ 2025-08-10 23:03:38,045 ] test_main.py:73 root - INFO - (Document(metadata={'_id': 'ea0e4e86-0f23-462b-a182-48cedad8fdd9', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='2025-07-01T10:05:00Z\njohn@example.com\nWelcome Email\n18KB\nonboarding\nev1235\nopened\n2025-07-01T10:08:00Z jane@example.com\nPromo Offer\n22KB\npromotions\nFor\nMessages\nEntity (JSON):\n{\n"headers"\n: {\n"message-id"\n:\n"\n<abc@mailgun.org>'), 0.2)
[ 2025-08-10 23:03:38,103 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-10 23:03:38,104 ] test_main.py:81 root - INFO - [Record(id='ea0e4e86-0f23-462b-a182-48cedad8fdd9', payload={'url': 'https://infoveave-help.pages.dev/automation-v8/activities/mailgun/', 'title': 'mailgun', 'section': 'automation', 'terminologies': ['Infoveave', 'Tags', 'Value', 'Workflows'], 'char_count': 3213, 'word_count': 485, 'page_content': '2025-07-01T10:05:00Z\njohn@example.com\nWelcome Email\n18KB\nonboarding\nev1235\nopened\n2025-07-01T10:08:00Z jane@example.com\nPromo Offer\n22KB\npromotions\nFor\nMessages\nEntity (JSON):\n{\n"headers"\n: {\n"message-id"\n:\n"\n<abc@mailgun.org>', 'chunk_index': 3}, vector=None, shard_key=None, order_value=None)]
[ 2025-08-10 23:03:38,104 ] test_main.py:82 root - INFO - Retrieved result for point ID: ea0e4e86-0f23-462b-a182-48cedad8fdd9
[ 2025-08-10 23:03:38,104 ] test_main.py:73 root - INFO - (Document(metadata={'_id': 'b6d38099-c9de-471f-973c-0f9d734b02ec', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='Activity Step\nReplaced Values\nSendEmail_12345\nStep 1\nCustomerName: John Doe\nSendEmail_67890\nStep 2\nCustomerName: Jane Smith'), 0.16666667)
[ 2025-08-10 23:03:38,157 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-10 23:03:38,158 ] test_main.py:81 root - INFO - [Record(id='b6d38099-c9de-471f-973c-0f9d734b02ec', payload={'url': 'https://infoveave-help.pages.dev/automation-v8/activities/start-iteration/', 'title': 'start-iteration', 'section': 'automation', 'terminologies': ['Infoveave', 'Value'], 'char_count': 2180, 'word_count': 314, 'page_content': 'Activity Step\nReplaced Values\nSendEmail_12345\nStep 1\nCustomerName: John Doe\nSendEmail_67890\nStep 2\nCustomerName: Jane Smith', 'chunk_index': 2}, vector=None, shard_key=None, order_value=None)]
[ 2025-08-10 23:03:38,158 ] test_main.py:82 root - INFO - Retrieved result for point ID: b6d38099-c9de-471f-973c-0f9d734b02ec
[ 2025-08-10 23:03:38,159 ] test_main.py:350 root - INFO - Found 2 final documents.
[ 2025-08-10 23:03:38,159 ] test_main.py:351 root - INFO - Context prepared for LLM response.
[ 2025-08-10 23:03:38,183 ] test_main.py:379 root - INFO - Generating final answer using LLM...
[ 2025-08-10 23:03:39,842 ] _client.py:1025 httpx - INFO - HTTP Request: POST https://api.groq.com/openai/v1/chat/completions "HTTP/1.1 200 OK"
[ 2025-08-10 23:03:39,848 ] test_main.py:381 root - INFO - Final LLM Response:

[ 2025-08-10 23:03:39,848 ] test_main.py:382 root - INFO - Let's break down how to create a workflow in Infoveave to run an Oracle DB query and send the results as an email report.

**1. The Execute Query Activity**

The **Execute Query** activity is your starting point. It allows you to fetch data directly from your Oracle database.

* **Connection:** You'll need to establish a connection to your Oracle database within Infoveave. This involves providing connection details like the database server address, port, username, and password.

* **Query:**  Craft your SQL query to retrieve the specific data you want to include in your report. For example:

   ```sql
   SELECT customer_name, order_date, total_amount
   FROM orders
   WHERE order_date BETWEEN '2023-01-01' AND '2023-12-31';
   ```

* **Output:** The Execute Query activity returns the results of your query as a tabular data structure. This data will be used as input for the Send Email activity.

**2. The Send Email Activity**

The **Send Email** activity takes the data from the Execute Query activity and formats it into an email report.

* **Connection:**  Configure the Send Email activity to use your preferred email service. Infoveave supports various options like OAuth connections to Gmail or Outlook, or SMTP connections for self-hosted email servers.

* **Recipient:** Specify the email address(es) you want to send the report to. You can use a static email address or dynamically pull recipient addresses from your input data.

* **Subject:**  Set a clear and concise subject line for your email report.

* **Content:**  You can either:
    * **Use a Template:**  Infoveave offers pre-designed email templates to ensure consistent formatting and branding.
    * **Write Custom Content:**  Manually write the email body, including placeholders to insert data from the Execute Query activity.

* **Attachments:**  If you want to include the raw query results as a file attachment, you can configure the Send Email activity to attach the output from the Execute Query activity.

**Example Workflow**

1. **Execute Query:**
   * Connection: Oracle Database (with credentials)
   * Query:  `SELECT customer_name, order_date, total_amount FROM orders WHERE order_date BETWEEN '2023-01-01' AND '2023-12-31';`

2. **Send Email:**
   * Connection: Gmail (using OAuth)
   * Recipient: `john.doe@example.com`
   * Subject: `Monthly Sales Report`
   * Content:  
      * Use a pre-designed Infoveave template for a professional look.
      * Include placeholders to dynamically insert data from the Execute Query activity, such as:
         * `{{customer_name}}`
         * `{{order_date}}`
         * `{{total_amount}}`
   * Attachment: Attach the output from the Execute Query activity as a CSV file.



Let me know if you have any more questions or want to explore specific aspects of these activities in more detail!

[ 2025-08-10 23:03:39,849 ] test_main.py:389 root - INFO - LLM response saved to ./data/results/infoverve_helper_response.md
[ 2025-08-10 23:11:55,855 ] test_main.py:199 root - INFO - .........................Starting Infoverve Helper Application.........................
[ 2025-08-10 23:11:55,855 ] test_main.py:215 root - INFO - GROQ_API_KEY loaded.
[ 2025-08-10 23:11:55,875 ] test_main.py:239 root - INFO - Embedding model initialized.
[ 2025-08-10 23:11:56,319 ] _client.py:1025 httpx - INFO - HTTP Request: GET http://ai.infoveave.cloud:6333 "HTTP/1.1 200 OK"
[ 2025-08-10 23:11:56,334 ] test_main.py:243 root - INFO - Connected to Qdrant.
[ 2025-08-10 23:11:56,455 ] _client.py:1025 httpx - INFO - HTTP Request: GET http://ai.infoveave.cloud:6333/collections "HTTP/1.1 200 OK"
[ 2025-08-10 23:11:56,457 ] test_main.py:247 root - INFO - Qdrant collections retrieved.
[ 2025-08-10 23:11:56,457 ] test_main.py:254 root - INFO - Using collection: infoverve_helper_docs_hybrid
[ 2025-08-10 23:11:57,846 ] test_main.py:257 root - INFO - Sparse embeddings initialized.
[ 2025-08-10 23:11:57,910 ] _client.py:1025 httpx - INFO - HTTP Request: GET http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid "HTTP/1.1 200 OK"
[ 2025-08-10 23:11:59,991 ] _client.py:1025 httpx - INFO - HTTP Request: GET http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid "HTTP/1.1 200 OK"
[ 2025-08-10 23:11:59,993 ] test_main.py:269 root - INFO - QdrantVectorStore initialized.
[ 2025-08-10 23:12:00,027 ] test_main.py:275 root - INFO - LLM initialized.
[ 2025-08-10 23:12:00,930 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points/query "HTTP/1.1 200 OK"
[ 2025-08-10 23:12:01,985 ] test_main.py:297 root - INFO - Original query embedding generated.
[ 2025-08-10 23:12:02,007 ] test_main.py:71 root - INFO - Building context with metadata from documents...
[ 2025-08-10 23:12:02,008 ] test_main.py:73 root - INFO - (Document(metadata={'_id': '2a6c9297-ff5a-4139-bb0d-e87f53ace134', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content="Upload transformed file to destination database\nSetup the 'Oracle' connection, specify tables, and map columns\nSetup automated workflow summary notification\nEnable 'Send Workflow Summary' for email notifications on automated workflow execution\nSchedule and monitor  workflows Schedule or setup 'Webhooks' and 'Emails' to trigger workflows\nDone"), 0.5)
[ 2025-08-10 23:12:02,067 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-10 23:12:02,069 ] test_main.py:81 root - INFO - [Record(id='2a6c9297-ff5a-4139-bb0d-e87f53ace134', payload={'url': 'https://infoveave-help.pages.dev/journey/automate-workflows/', 'title': 'automate-workflows', 'section': 'automation', 'terminologies': ['Connections', 'Data Transformation', 'Infoveave', 'Workflows'], 'char_count': 978, 'word_count': 139, 'page_content': "Upload transformed file to destination database\nSetup the 'Oracle' connection, specify tables, and map columns\nSetup automated workflow summary notification\nEnable 'Send Workflow Summary' for email notifications on automated workflow execution\nSchedule and monitor  workflows Schedule or setup 'Webhooks' and 'Emails' to trigger workflows\nDone", 'chunk_index': 2}, vector=None, shard_key=None, order_value=None)]
[ 2025-08-10 23:12:02,069 ] test_main.py:82 root - INFO - Retrieved result for point ID: 2a6c9297-ff5a-4139-bb0d-e87f53ace134
[ 2025-08-10 23:12:02,069 ] test_main.py:73 root - INFO - (Document(metadata={'_id': 'df9d15c4-2094-450f-95e6-162e03d5828a', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='Creating Infoboard Using A Query\nCreate Infoboard Using A Query\nCreating Infoboard Using API\nCreate Infoboard Using API\nCreating Workflow in Infoveave\nCreating Workflows\nWorkflow Execution Status\nWorkflow Execution Status'), 0.33333334)
[ 2025-08-10 23:12:02,132 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-10 23:12:02,132 ] test_main.py:81 root - INFO - [Record(id='df9d15c4-2094-450f-95e6-162e03d5828a', payload={'url': 'https://infoveave-help.pages.dev/videos/', 'title': 'videos', 'section': 'videos', 'terminologies': ['Automation', 'Catalogues', 'Conditional Expressions', 'Custom Calendar', 'Datasources', 'Dimensions', 'Infoboards', 'Infoveave', 'Insights', 'Lists', 'Measures', 'My Organization', 'My Workspace', 'Query', 'Reports', 'SciPyR', 'What-If Analysis', 'What-If Formulae', 'Workflows', 'Workflow Execution Status'], 'char_count': 2430, 'word_count': 338, 'page_content': 'Creating Infoboard Using A Query\nCreate Infoboard Using A Query\nCreating Infoboard Using API\nCreate Infoboard Using API\nCreating Workflow in Infoveave\nCreating Workflows\nWorkflow Execution Status\nWorkflow Execution Status', 'chunk_index': 3}, vector=None, shard_key=None, order_value=None)]
[ 2025-08-10 23:12:02,132 ] test_main.py:82 root - INFO - Retrieved result for point ID: df9d15c4-2094-450f-95e6-162e03d5828a
[ 2025-08-10 23:12:02,132 ] test_main.py:73 root - INFO - (Document(metadata={'_id': '323c1ea3-b288-44b0-8825-475a23907e9f', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='Workflow Designer\ncanvas.\nTo add alerts that send email notifications during the workflow, go to the\nAlerts\ntab in the\nWorkflow Setup panel\n.\nToggle\nEnable\nto turn the alert on or off. Select recipient email addresses from the user list. You can choose multiple recipients.\nWrite a custom alert message that is sent when the condition is met.\nWhen setting an execution time alert, toggle\nUse Absolute Time'), 0.25)
[ 2025-08-10 23:12:02,200 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-10 23:12:02,200 ] test_main.py:81 root - INFO - [Record(id='323c1ea3-b288-44b0-8825-475a23907e9f', payload={'url': 'https://infoveave-help.pages.dev/automation-v8/jobs-v8/create-new-job/', 'title': 'create-new-job', 'section': 'automation', 'terminologies': ['Alerts', 'Automation', 'Infoveave', 'Measures', 'Query', 'Query Report', 'Value', 'Variables', 'View', 'View', 'Workflows'], 'char_count': 4476, 'word_count': 722, 'page_content': 'Workflow Designer\ncanvas.\nTo add alerts that send email notifications during the workflow, go to the\nAlerts\ntab in the\nWorkflow Setup panel\n.\nToggle\nEnable\nto turn the alert on or off. Select recipient email addresses from the user list. You can choose multiple recipients.\nWrite a custom alert message that is sent when the condition is met.\nWhen setting an execution time alert, toggle\nUse Absolute Time', 'chunk_index': 4}, vector=None, shard_key=None, order_value=None)]
[ 2025-08-10 23:12:02,201 ] test_main.py:82 root - INFO - Retrieved result for point ID: 323c1ea3-b288-44b0-8825-475a23907e9f
[ 2025-08-10 23:12:02,201 ] test_main.py:73 root - INFO - (Document(metadata={'_id': '65e3aa33-13d7-4688-98fd-7b6a24cbf91e', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='Workflow Designer\ncanvas.\nTo add alerts that send email notifications during the workflow, go to the\nAlerts\ntab in the\nWorkflow Setup panel\n.\nToggle\nEnable\nto turn the alert on or off. Select recipient email addresses from the user list. You can choose multiple recipients.\nWrite a custom alert message that is sent when the condition is met.\nWhen setting an execution time alert, toggle\nUse Absolute Time'), 0.2)
[ 2025-08-10 23:12:02,262 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-10 23:12:02,262 ] test_main.py:81 root - INFO - [Record(id='65e3aa33-13d7-4688-98fd-7b6a24cbf91e', payload={'url': 'https://infoveave-help.pages.dev/automation-v8/workflows/define-workflow/', 'title': 'define-workflow', 'section': 'automation', 'terminologies': ['Alerts', 'Automation', 'Infoveave', 'Measures', 'Query', 'Query Report', 'Value', 'Variables', 'View', 'View', 'Workflows'], 'char_count': 4476, 'word_count': 722, 'page_content': 'Workflow Designer\ncanvas.\nTo add alerts that send email notifications during the workflow, go to the\nAlerts\ntab in the\nWorkflow Setup panel\n.\nToggle\nEnable\nto turn the alert on or off. Select recipient email addresses from the user list. You can choose multiple recipients.\nWrite a custom alert message that is sent when the condition is met.\nWhen setting an execution time alert, toggle\nUse Absolute Time', 'chunk_index': 4}, vector=None, shard_key=None, order_value=None)]
[ 2025-08-10 23:12:02,262 ] test_main.py:82 root - INFO - Retrieved result for point ID: 65e3aa33-13d7-4688-98fd-7b6a24cbf91e
[ 2025-08-10 23:12:02,262 ] test_main.py:73 root - INFO - (Document(metadata={'_id': '2027003d-7c4e-4b6d-acd3-b391a775ae9a', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='Workflow Alerts | Infoveave Help\nSkip to content\nWorkflow Alerts'), 0.16666667)
[ 2025-08-10 23:12:02,316 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-10 23:12:02,318 ] test_main.py:81 root - INFO - [Record(id='2027003d-7c4e-4b6d-acd3-b391a775ae9a', payload={'url': 'https://infoveave-help.pages.dev/automation-v8/workflows/define-workflow/workflow-alerts-2/', 'title': 'workflow-alerts-2', 'section': 'automation', 'terminologies': ['Alerts', 'Infoveave', 'Workflows', 'Workflow Alerts'], 'char_count': 3832, 'word_count': 620, 'page_content': 'Workflow Alerts | Infoveave Help\nSkip to content\nWorkflow Alerts', 'chunk_index': 0}, vector=None, shard_key=None, order_value=None)]
[ 2025-08-10 23:12:02,318 ] test_main.py:82 root - INFO - Retrieved result for point ID: 2027003d-7c4e-4b6d-acd3-b391a775ae9a
[ 2025-08-10 23:12:02,318 ] test_main.py:73 root - INFO - (Document(metadata={'_id': '81a7ef81-eb12-4bcd-ad2e-403f547e7e50', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='Choose the days on which you want to execute the Workflow. By default, Infoveave sets it to every day. You can select specific days of the week, days of the month, or months.\nClick on the\nAdd'), 0.14285715)
[ 2025-08-10 23:12:02,372 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-10 23:12:02,372 ] test_main.py:81 root - INFO - [Record(id='81a7ef81-eb12-4bcd-ad2e-403f547e7e50', payload={'url': 'https://infoveave-help.pages.dev/automation-v8/jobs-v8/schedule-job/', 'title': 'schedule-job', 'section': 'automation', 'terminologies': ['Automation', 'Cron trigger', 'Emailhook trigger', 'Infoveave', 'Lists', 'Reports', 'Value', 'View', 'View', 'Webhook trigger', 'Workflows', 'Workflow Start trigger'], 'char_count': 5699, 'word_count': 937, 'page_content': 'Choose the days on which you want to execute the Workflow. By default, Infoveave sets it to every day. You can select specific days of the week, days of the month, or months.\nClick on the\nAdd', 'chunk_index': 5}, vector=None, shard_key=None, order_value=None)]
[ 2025-08-10 23:12:02,373 ] test_main.py:82 root - INFO - Retrieved result for point ID: 81a7ef81-eb12-4bcd-ad2e-403f547e7e50
[ 2025-08-10 23:12:02,373 ] test_main.py:73 root - INFO - (Document(metadata={'_id': '3989b1ef-a79d-4b1d-bce6-79cb5969aa26', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='Choose the days on which you want to execute the Workflow. By default, Infoveave sets it to every day. You can select specific days of the week, days of the month, or months.\nClick on the\nAdd'), 0.125)
[ 2025-08-10 23:12:02,442 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-10 23:12:02,442 ] test_main.py:81 root - INFO - [Record(id='3989b1ef-a79d-4b1d-bce6-79cb5969aa26', payload={'url': 'https://infoveave-help.pages.dev/automation-v8/workflows/define-workflow/workflow-start/', 'title': 'workflow-start', 'section': 'automation', 'terminologies': ['Automation', 'Cron trigger', 'Emailhook trigger', 'Infoveave', 'Lists', 'Reports', 'Value', 'View', 'View', 'Webhook trigger', 'Workflows', 'Workflow Start trigger'], 'char_count': 5699, 'word_count': 937, 'page_content': 'Choose the days on which you want to execute the Workflow. By default, Infoveave sets it to every day. You can select specific days of the week, days of the month, or months.\nClick on the\nAdd', 'chunk_index': 5}, vector=None, shard_key=None, order_value=None)]
[ 2025-08-10 23:12:02,443 ] test_main.py:82 root - INFO - Retrieved result for point ID: 3989b1ef-a79d-4b1d-bce6-79cb5969aa26
[ 2025-08-10 23:12:02,443 ] test_main.py:73 root - INFO - (Document(metadata={'_id': '3fd7ab5c-2d29-41ea-9ed7-0684f87b08e1', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='Add FTP Download Activity\n0:21\nConfigure FTP Download Activity\n0:31\nAdd Read Excel Files Activity\n0:35\nAdd Transform Activity using Javascript\n0:40\nAdd Round Numbers Activity\n0:46 Add Remove Duplicate Rows Activity\n0:52\nAdd Drop Columns Activity\n0:56\nAdd Rename Columns Activity\n1:01\nAdd Upload to Datasource Activity\n1:08\nExecute the Workflow and View Instance History'), 0.11111111)
[ 2025-08-10 23:12:02,502 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-10 23:12:02,502 ] test_main.py:81 root - INFO - [Record(id='3fd7ab5c-2d29-41ea-9ed7-0684f87b08e1', payload={'url': 'https://infoveave-help.pages.dev/automation-v8/jobs-v8/create-new-job/', 'title': 'create-new-job', 'section': 'automation', 'terminologies': ['Alerts', 'Automation', 'Infoveave', 'Measures', 'Query', 'Query Report', 'Value', 'Variables', 'View', 'View', 'Workflows'], 'char_count': 4476, 'word_count': 722, 'page_content': 'Add FTP Download Activity\n0:21\nConfigure FTP Download Activity\n0:31\nAdd Read Excel Files Activity\n0:35\nAdd Transform Activity using Javascript\n0:40\nAdd Round Numbers Activity\n0:46 Add Remove Duplicate Rows Activity\n0:52\nAdd Drop Columns Activity\n0:56\nAdd Rename Columns Activity\n1:01\nAdd Upload to Datasource Activity\n1:08\nExecute the Workflow and View Instance History', 'chunk_index': 1}, vector=None, shard_key=None, order_value=None)]
[ 2025-08-10 23:12:02,503 ] test_main.py:82 root - INFO - Retrieved result for point ID: 3fd7ab5c-2d29-41ea-9ed7-0684f87b08e1
[ 2025-08-10 23:12:02,503 ] test_main.py:73 root - INFO - (Document(metadata={'_id': '2adcd9bd-c3f6-41e9-8c27-26f07adfbe4c', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='Add FTP Download Activity\n0:21\nConfigure FTP Download Activity\n0:31\nAdd Read Excel Files Activity\n0:35\nAdd Transform Activity using Javascript\n0:40\nAdd Round Numbers Activity\n0:46 Add Remove Duplicate Rows Activity\n0:52\nAdd Drop Columns Activity\n0:56\nAdd Rename Columns Activity\n1:01\nAdd Upload to Datasource Activity\n1:08\nExecute the Workflow and View Instance History'), 0.1)
[ 2025-08-10 23:12:02,564 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-10 23:12:02,565 ] test_main.py:81 root - INFO - [Record(id='2adcd9bd-c3f6-41e9-8c27-26f07adfbe4c', payload={'url': 'https://infoveave-help.pages.dev/automation-v8/workflows/define-workflow/', 'title': 'define-workflow', 'section': 'automation', 'terminologies': ['Alerts', 'Automation', 'Infoveave', 'Measures', 'Query', 'Query Report', 'Value', 'Variables', 'View', 'View', 'Workflows'], 'char_count': 4476, 'word_count': 722, 'page_content': 'Add FTP Download Activity\n0:21\nConfigure FTP Download Activity\n0:31\nAdd Read Excel Files Activity\n0:35\nAdd Transform Activity using Javascript\n0:40\nAdd Round Numbers Activity\n0:46 Add Remove Duplicate Rows Activity\n0:52\nAdd Drop Columns Activity\n0:56\nAdd Rename Columns Activity\n1:01\nAdd Upload to Datasource Activity\n1:08\nExecute the Workflow and View Instance History', 'chunk_index': 1}, vector=None, shard_key=None, order_value=None)]
[ 2025-08-10 23:12:02,565 ] test_main.py:82 root - INFO - Retrieved result for point ID: 2adcd9bd-c3f6-41e9-8c27-26f07adfbe4c
[ 2025-08-10 23:12:02,565 ] test_main.py:73 root - INFO - (Document(metadata={'_id': 'bfe3c285-ffc2-4551-a19c-a5900bdd0aa3', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='E\nEmailhook trigger The Emailhook trigger initiates a Workflow based on incoming emails. You can set up specific email addresses that serve as Emailhooks. This allows for  automated processing of email-based activities or notifications . This trigger is useful for Workflows that involve email notifications or processing of data received via email.'), 0.09090909)
[ 2025-08-10 23:12:02,630 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-10 23:12:02,676 ] test_main.py:81 root - INFO - [Record(id='bfe3c285-ffc2-4551-a19c-a5900bdd0aa3', payload={'url': 'https://infoveave-help.pages.dev/introduction-to-infoveave/infoveave-terminologies/', 'title': 'infoveave-terminologies', 'section': 'introduction-to-infoveave', 'terminologies': ['Address Book', 'Alerts', 'Audit Log', 'Automation', 'Business Analysis', 'Calculated Columns', 'Calculated Measures', 'Catalogues', 'Client', 'Color Palette', 'Common Dimension filters', 'Component Panel', 'Component', 'Conditional Expressions', 'Connections', 'Control Centre', 'Creator', 'Cron trigger', 'Cube Designer', 'Custom Calendar', 'Custom Email', 'Database Connections', 'Datasources', 'Data Governance', 'Data Ingestion', 'Data Transformation', 'Data Visualization', 'Date Range Filter', 'Designer Canvas', 'Designer Layout', 'Dimensions', 'Domains', 'Emailhook trigger', 'Expression', 'Fixed Filters', 'Grid Layout', 'Hierarchies', 'Holiday Calendar', 'Infoboards', 'Infoboard Setup', 'Infoboard statistics', 'Infoveave', 'Infoveave menu', 'Insights', 'Lists', 'Linked Reports', 'Login statistics', 'Measures', 'ML Analysis', 'ML Model', 'My Organization', 'My Workspace', 'NGuage Forms', 'Query', 'Query Builder', 'Query Report', 'Reports', 'Retention Settings', 'Roles', 'SciPyR', 'Server Statistics', 'SMTP Settings', 'Statistical Analysis', 'Tags', 'Targets and Thresholds', 'Template Reports', 'Tenant', 'Tiers', 'Trash', 'Value', 'Variables', 'Version history', 'View', 'View', 'Viewer', 'Webhook trigger', 'What-If Analysis', 'What-If Formulae', 'Widget Configuration', 'Widget Customization', 'Widget statistics', 'Workflows', 'Workflow Alerts', 'Workflow Execution Status', 'Workflow Start trigger', 'Workflow Variables'], 'char_count': 25220, 'word_count': 3773, 'page_content': 'E\nEmailhook trigger The Emailhook trigger initiates a Workflow based on incoming emails. You can set up specific email addresses that serve as Emailhooks. This allows for  automated processing of email-based activities or notifications . This trigger is useful for Workflows that involve email notifications or processing of data received via email.', 'chunk_index': 13}, vector=None, shard_key=None, order_value=None)]
[ 2025-08-10 23:12:02,677 ] test_main.py:82 root - INFO - Retrieved result for point ID: bfe3c285-ffc2-4551-a19c-a5900bdd0aa3
[ 2025-08-10 23:12:02,677 ] test_main.py:129 root - INFO - Top context prepared for query rewriting.
[ 2025-08-10 23:12:02,677 ] test_main.py:103 root - INFO - Querying Neo4j for entities: ['Workflow Alerts', 'Tenant', 'My Workspace', 'Targets and Thresholds', 'Creator', 'Cron trigger', 'SciPyR', 'Common Dimension filters', 'Workflow Start trigger', 'Workflows', 'NGuage Forms', 'Value', 'Business Analysis', 'Designer Layout', 'Data Transformation', 'Query Report', 'Infoveave menu', 'Query', 'Query Builder', 'Retention Settings', 'Workflow Variables', 'Date Range Filter', 'Version history', 'My Organization', 'SMTP Settings', 'ML Model', 'Server Statistics', 'Variables', 'Datasources', 'Control Centre', 'Widget statistics', 'Designer Canvas', 'Custom Calendar', 'Infoboards', 'Viewer', 'Dimensions', 'Widget Configuration', 'Grid Layout', 'Client', 'Component Panel', 'Reports', 'Catalogues', 'Data Visualization', 'Template Reports', 'Infoveave', 'Widget Customization', 'Calculated Columns', 'Emailhook trigger', 'Lists', 'Measures', 'Database Connections', 'Roles', 'Component', 'Data Governance', 'Statistical Analysis', 'Hierarchies', 'Alerts', 'ML Analysis', 'Workflow Execution Status', 'Cube Designer', 'Infoboard Setup', 'Trash', 'What-If Formulae', 'Conditional Expressions', 'Automation', 'Holiday Calendar', 'What-If Analysis', 'Data Ingestion', 'Domains', 'Webhook trigger', 'Login statistics', 'Calculated Measures', 'Tiers', 'Audit Log', 'Connections', 'Tags', 'View', 'Linked Reports', 'Fixed Filters', 'Insights', 'Address Book', 'Infoboard statistics', 'Expression', 'Color Palette', 'Custom Email'] with hops=1 and top_n=50
[ 2025-08-10 23:12:03,724 ] result.py:337 neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownLabelWarning} {category: UNRECOGNIZED} {title: The provided label is not in the database.} {description: One of the labels in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing label name is: ${label})} {position: line: 3, column: 14, offset: 41} for query: '\n    UNWIND $names AS label\n    MATCH (e:`${label}`)\n    OPTIONAL MATCH (e)-[r]-(m)\n    RETURN e.name AS head, type(r) AS rel, m.name AS tail, COUNT(*) AS freq\n    LIMIT $limit\n    '
[ 2025-08-10 23:12:03,725 ] test_main.py:121 root - INFO - Retrieved 0 triplets from Neo4j.
[ 2025-08-10 23:12:03,726 ] test_main.py:137 root - INFO - Retrieved 0 related triplets from Neo4j.
[ 2025-08-10 23:12:03,726 ] test_main.py:142 root - INFO - Knowledge graph facts prepared for query rewriting.
[ 2025-08-10 23:12:03,727 ] test_main.py:147 root - INFO - Loaded rewritten query system prompt.
[ 2025-08-10 23:12:03,728 ] test_main.py:160 root - INFO - Loaded rewritten query user prompt.
[ 2025-08-10 23:12:04,339 ] _client.py:1025 httpx - INFO - HTTP Request: POST https://api.groq.com/openai/v1/chat/completions "HTTP/1.1 200 OK"
[ 2025-08-10 23:12:04,347 ] test_main.py:302 root - INFO - Rewritten query: Execute Query| Send Email
[ 2025-08-10 23:12:04,347 ] test_main.py:309 root - INFO - Rewritten query parts: ['Execute Query', 'Send Email']
[ 2025-08-10 23:12:04,347 ] test_main.py:318 root - INFO - Rewritten Query 1: Execute Query
[ 2025-08-10 23:12:04,789 ] test_main.py:321 root - INFO - Embedding generated for query 1.
[ 2025-08-10 23:12:06,417 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points/query "HTTP/1.1 200 OK"
[ 2025-08-10 23:12:06,467 ] test_main.py:326 root - INFO - Processing query part 1: Execute Query
[ 2025-08-10 23:12:06,490 ] test_main.py:71 root - INFO - Building context with metadata from documents...
[ 2025-08-10 23:12:06,490 ] test_main.py:73 root - INFO - (Document(metadata={'_id': '4bf7f9a7-fc4e-49bc-9caf-4fd89d8160ab', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='Execute Query | Infoveave Help\nSkip to content\nExecute Query\nDescription\nThe\nExecute Query'), 0.5)
[ 2025-08-10 23:12:06,550 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-10 23:12:06,550 ] test_main.py:81 root - INFO - [Record(id='4bf7f9a7-fc4e-49bc-9caf-4fd89d8160ab', payload={'url': 'https://infoveave-help.pages.dev/automation-v8/activities/execute-query/', 'title': 'execute-query', 'section': 'automation', 'terminologies': ['Infoveave', 'Query', 'Reports', 'Value'], 'char_count': 2330, 'word_count': 363, 'page_content': 'Execute Query | Infoveave Help\nSkip to content\nExecute Query\nDescription\nThe\nExecute Query', 'chunk_index': 0}, vector=None, shard_key=None, order_value=None)]
[ 2025-08-10 23:12:06,551 ] test_main.py:82 root - INFO - Retrieved result for point ID: 4bf7f9a7-fc4e-49bc-9caf-4fd89d8160ab
[ 2025-08-10 23:12:06,551 ] test_main.py:73 root - INFO - (Document(metadata={'_id': 'c4316ab6-9c63-42af-b504-74f8cdbc37df', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='This activity connects to your Google Cloud project, runs the specified query, and returns the results in tabular format. It is ideal for pulling real-time analytics, data transformations, or integrating cloud data into your workflow pipelines.\nUse case\n: Fetch customer order data by region for the last quarter directly from BigQuery to feed a dashboard or analytics engine.\nInput\nNot Applicable\nOutput\nOutput Type\nFormat\nDescription\nData\nTable Output of the executed BigQuery SQL query.\nConfiguration Fields\nField Name\nDescription\nConnection\nGoogle BigQuery connection (OAuth or service account). Required for access.\nProject\nGoogle Cloud Project ID containing the BigQuery datasets.\nQuery The SQL query string to be executed. Supports standard SQL syntax.\nSample Input\nNot Applicable\nSample Configuration\nField\nValue\nConnection\nGoogle BigQuery OAuth\nProject\ncustomer-data-analytics\nQuery'), 0.33333334)
[ 2025-08-10 23:12:06,612 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-10 23:12:06,656 ] test_main.py:81 root - INFO - [Record(id='c4316ab6-9c63-42af-b504-74f8cdbc37df', payload={'url': 'https://infoveave-help.pages.dev/automation-v8/activities/fetch-from-bigquery/', 'title': 'fetch-from-bigquery', 'section': 'automation', 'terminologies': ['Infoveave', 'Query', 'Value'], 'char_count': 1338, 'word_count': 194, 'page_content': 'This activity connects to your Google Cloud project, runs the specified query, and returns the results in tabular format. It is ideal for pulling real-time analytics, data transformations, or integrating cloud data into your workflow pipelines.\nUse case\n: Fetch customer order data by region for the last quarter directly from BigQuery to feed a dashboard or analytics engine.\nInput\nNot Applicable\nOutput\nOutput Type\nFormat\nDescription\nData\nTable Output of the executed BigQuery SQL query.\nConfiguration Fields\nField Name\nDescription\nConnection\nGoogle BigQuery connection (OAuth or service account). Required for access.\nProject\nGoogle Cloud Project ID containing the BigQuery datasets.\nQuery The SQL query string to be executed. Supports standard SQL syntax.\nSample Input\nNot Applicable\nSample Configuration\nField\nValue\nConnection\nGoogle BigQuery OAuth\nProject\ncustomer-data-analytics\nQuery', 'chunk_index': 1}, vector=None, shard_key=None, order_value=None)]
[ 2025-08-10 23:12:06,657 ] test_main.py:82 root - INFO - Retrieved result for point ID: c4316ab6-9c63-42af-b504-74f8cdbc37df
[ 2025-08-10 23:12:06,657 ] test_main.py:73 root - INFO - (Document(metadata={'_id': '21c3607e-54d8-44a9-b1b6-12646396ca58', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='activity executes a structured query (e.g., SQL) against a configured data source such as a relational database, data warehouse, or cloud storage engine . You can retrieve the results directly as tabular output or optionally save them to a file using configurable export settings. This activity is especially useful for dynamically pulling data into a workflow, generating reports, or integrating external data systems. When saving results to a file, it also supports advanced formatting using templates, encryption, and partitioning logic. Use this activity to:\nQuery databases and bring live data into workflows\nExport query results as Excel or CSV files\nApply formatting using templates and control sheet/row structure\nSecure output files with encryption and filename customization\nUse case\n: A data analyst can use this activity to run a sales report query on a PostgreSQL database. The output can be formatted using a template Excel file, encrypted using a secret key, and saved with a filename pattern that includes a timestamp.\nInput Type\nDescription\nData\nOptional incoming data used to influence the query or filenames (if dynamic).\nOutput\nOutput Type\nFormat\nDescription\nData\nTable or File Query results, either in-memory (as table) or written to file(s).\nConfiguration Fields\nField Name\nDescription\nDatasource Id Select the connection representing the data source (e.g., MySQL, SQL Server, Snowflake) where the query will run.\nQuery The query string (SQL or supported query language) to be executed on the selected data source. Supports variables if dynamic queries are needed.\nSave As File Enable this option to save the query result to a file instead of returning it as in-memory table data.\nSecret Key\nRequired only when “Save As File” is enabled. This encryption key secures the generated file’s content.'), 0.25)
[ 2025-08-10 23:12:06,727 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-10 23:12:06,782 ] test_main.py:81 root - INFO - [Record(id='21c3607e-54d8-44a9-b1b6-12646396ca58', payload={'url': 'https://infoveave-help.pages.dev/automation-v8/activities/query-datasource/', 'title': 'query-datasource', 'section': 'automation', 'terminologies': ['Infoveave', 'Query', 'Reports', 'Value', 'Variables', 'Workflows'], 'char_count': 3756, 'word_count': 590, 'page_content': 'activity executes a structured query (e.g., SQL) against a configured data source such as a relational database, data warehouse, or cloud storage engine . You can retrieve the results directly as tabular output or optionally save them to a file using configurable export settings. This activity is especially useful for dynamically pulling data into a workflow, generating reports, or integrating external data systems. When saving results to a file, it also supports advanced formatting using templates, encryption, and partitioning logic. Use this activity to:\nQuery databases and bring live data into workflows\nExport query results as Excel or CSV files\nApply formatting using templates and control sheet/row structure\nSecure output files with encryption and filename customization\nUse case\n: A data analyst can use this activity to run a sales report query on a PostgreSQL database. The output can be formatted using a template Excel file, encrypted using a secret key, and saved with a filename pattern that includes a timestamp.\nInput Type\nDescription\nData\nOptional incoming data used to influence the query or filenames (if dynamic).\nOutput\nOutput Type\nFormat\nDescription\nData\nTable or File Query results, either in-memory (as table) or written to file(s).\nConfiguration Fields\nField Name\nDescription\nDatasource Id Select the connection representing the data source (e.g., MySQL, SQL Server, Snowflake) where the query will run.\nQuery The query string (SQL or supported query language) to be executed on the selected data source. Supports variables if dynamic queries are needed.\nSave As File Enable this option to save the query result to a file instead of returning it as in-memory table data.\nSecret Key\nRequired only when “Save As File” is enabled. This encryption key secures the generated file’s content.', 'chunk_index': 1}, vector=None, shard_key=None, order_value=None)]
[ 2025-08-10 23:12:06,782 ] test_main.py:82 root - INFO - Retrieved result for point ID: 21c3607e-54d8-44a9-b1b6-12646396ca58
[ 2025-08-10 23:12:06,783 ] test_main.py:73 root - INFO - (Document(metadata={'_id': '65f1fed2-a4bd-4a52-aa8a-cc0e2c0490f2', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content="activity allows users to execute SQL queries on files or data stored in a connected data source (e.g., database, storage, or file-based system). This activity supports dynamic queries, and optionally allows saving the results to files with encryption, formatting, and custom output configuration.\nUse this activity to:\nExecute ad hoc or parameterized SQL queries on uploaded or connected data Retrieve transformed or filtered data for further processing\nGenerate reports or structured data files from query results\nUse Case\n: Useful in scenarios where data needs to be filtered, joined, aggregated, or reshaped before it’s used in reporting, validation, or export.\nInput\nType\nDescription\nFiles\nFiles/data available in the connection\nOutput\nType Format\nDescription\nData / File\nTable / File\nQuery result as a table or downloadable file\nConfiguration Fields\nField Name\nRequired\nDescription\nConnection\nYes\nConnection to the data source where the query should be executed.\nQuery Yes\nSQL query to be executed on the connected data source.\nSave As File\nNo\nIf enabled, the query result will be saved as a file.\nSecret Key\nConditional Encryption key used to secure the generated output file (enabled only if Save As File is true).\nFile Pattern\nConditional\nPattern for naming the generated files.\nSheet Name\nConditional Sheet name to use in the generated file (for Excel formats).\nFile\nConditional\nTemplate file to structure the output.\nSplit by Column\nConditional\nColumn name used to split the query result into multiple output files.\nStarting Row Conditional\nRow index in the template file from where data insertion begins.\nStarting Column\nConditional\nColumn index in the template file from where data insertion begins.\nSample Input\nNot applicable\n— data is pulled from the connected data source. Sample Configuration\nField\nValue\nConnection\nAzureBlobConnection\nQuery\nSELECT * FROM SalesData WHERE Region = 'East'\nSave As File\ntrue\nSecret Key\nEncrypt@123\nFile Pattern\nSales_Report_[Region]"), 0.2)
[ 2025-08-10 23:12:06,850 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-10 23:12:06,900 ] test_main.py:81 root - INFO - [Record(id='65f1fed2-a4bd-4a52-aa8a-cc0e2c0490f2', payload={'url': 'https://infoveave-help.pages.dev/automation-v8/activities/execute-query/', 'title': 'execute-query', 'section': 'automation', 'terminologies': ['Infoveave', 'Query', 'Reports', 'Value'], 'char_count': 2330, 'word_count': 363, 'page_content': "activity allows users to execute SQL queries on files or data stored in a connected data source (e.g., database, storage, or file-based system). This activity supports dynamic queries, and optionally allows saving the results to files with encryption, formatting, and custom output configuration.\nUse this activity to:\nExecute ad hoc or parameterized SQL queries on uploaded or connected data Retrieve transformed or filtered data for further processing\nGenerate reports or structured data files from query results\nUse Case\n: Useful in scenarios where data needs to be filtered, joined, aggregated, or reshaped before it’s used in reporting, validation, or export.\nInput\nType\nDescription\nFiles\nFiles/data available in the connection\nOutput\nType Format\nDescription\nData / File\nTable / File\nQuery result as a table or downloadable file\nConfiguration Fields\nField Name\nRequired\nDescription\nConnection\nYes\nConnection to the data source where the query should be executed.\nQuery Yes\nSQL query to be executed on the connected data source.\nSave As File\nNo\nIf enabled, the query result will be saved as a file.\nSecret Key\nConditional Encryption key used to secure the generated output file (enabled only if Save As File is true).\nFile Pattern\nConditional\nPattern for naming the generated files.\nSheet Name\nConditional Sheet name to use in the generated file (for Excel formats).\nFile\nConditional\nTemplate file to structure the output.\nSplit by Column\nConditional\nColumn name used to split the query result into multiple output files.\nStarting Row Conditional\nRow index in the template file from where data insertion begins.\nStarting Column\nConditional\nColumn index in the template file from where data insertion begins.\nSample Input\nNot applicable\n— data is pulled from the connected data source. Sample Configuration\nField\nValue\nConnection\nAzureBlobConnection\nQuery\nSELECT * FROM SalesData WHERE Region = 'East'\nSave As File\ntrue\nSecret Key\nEncrypt@123\nFile Pattern\nSales_Report_[Region]", 'chunk_index': 1}, vector=None, shard_key=None, order_value=None)]
[ 2025-08-10 23:12:06,900 ] test_main.py:82 root - INFO - Retrieved result for point ID: 65f1fed2-a4bd-4a52-aa8a-cc0e2c0490f2
[ 2025-08-10 23:12:06,900 ] test_main.py:73 root - INFO - (Document(metadata={'_id': '16772a9b-c89a-4370-ae9b-911286a37769', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content=').\nQuery Column Name\nColumn name to store the query string (portion after\n?\n) without parsing key-value pairs.\nFragment Column Name\nColumn name to store the fragment identifier (portion after\n#\n, if any). Note\n: This activity does not split the query string into key-value pairs — use the\nSplit HTTP Query\nactivity if you need that level of detail.\nSample Input\nemployee_id\nname\nurl\nE001\nJohn Doe'), 0.16666667)
[ 2025-08-10 23:12:06,957 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-10 23:12:06,958 ] test_main.py:81 root - INFO - [Record(id='16772a9b-c89a-4370-ae9b-911286a37769', payload={'url': 'https://infoveave-help.pages.dev/automation-v8/activities/split-url/', 'title': 'split-url', 'section': 'automation', 'terminologies': ['Infoveave', 'Query', 'Reports', 'Value'], 'char_count': 3191, 'word_count': 408, 'page_content': ').\nQuery Column Name\nColumn name to store the query string (portion after\n?\n) without parsing key-value pairs.\nFragment Column Name\nColumn name to store the fragment identifier (portion after\n#\n, if any). Note\n: This activity does not split the query string into key-value pairs — use the\nSplit HTTP Query\nactivity if you need that level of detail.\nSample Input\nemployee_id\nname\nurl\nE001\nJohn Doe', 'chunk_index': 2}, vector=None, shard_key=None, order_value=None)]
[ 2025-08-10 23:12:06,958 ] test_main.py:82 root - INFO - Retrieved result for point ID: 16772a9b-c89a-4370-ae9b-911286a37769
[ 2025-08-10 23:12:06,958 ] test_main.py:187 root - INFO - Loaded rewritten query user prompt.
[ 2025-08-10 23:12:07,890 ] _client.py:1025 httpx - INFO - HTTP Request: POST https://api.groq.com/openai/v1/chat/completions "HTTP/1.1 200 OK"
[ 2025-08-10 23:12:07,892 ] test_main.py:329 root - INFO - Response for query part 1: The **Execute Query** activity in Infoveave allows you to run SQL queries against your connected data sources.  

Here's a breakdown:

* **Purpose:** This activity is designed to retrieve data from databases, data warehouses, or cloud storage engines by executing SQL queries.

* **Use Cases:**
    * **Real-time Analytics:** Fetch up-to-date data for dashboards or reporting.
    * **Data Transformations:**  Modify and reshape data within your workflow.
    * **Data Integration:**  Bring external data into your Infoveave pipelines.

* **Key Features:**
    * **Connection:** You'll need to specify a connection to your data source (e.g., MySQL, PostgreSQL, BigQuery).
    * **Query:**  Enter your SQL query string. The activity supports standard SQL syntax.
    * **Output:** The results of your query are returned as a tabular dataset.

* **Where to Find More Information:**
    [https://infoveave-help.pages.dev/automation-v8/activities/execute-query/](https://infoveave-help.pages.dev/automation-v8/activities/execute-query/) 



Let me know if you have any other questions about the Execute Query activity or need help with specific aspects of using it!
[ 2025-08-10 23:12:07,893 ] test_main.py:332 root - INFO - [(Document(metadata={'_id': '4bf7f9a7-fc4e-49bc-9caf-4fd89d8160ab', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='Execute Query | Infoveave Help\nSkip to content\nExecute Query\nDescription\nThe\nExecute Query'), 0.5), (Document(metadata={'_id': 'c4316ab6-9c63-42af-b504-74f8cdbc37df', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='This activity connects to your Google Cloud project, runs the specified query, and returns the results in tabular format. It is ideal for pulling real-time analytics, data transformations, or integrating cloud data into your workflow pipelines.\nUse case\n: Fetch customer order data by region for the last quarter directly from BigQuery to feed a dashboard or analytics engine.\nInput\nNot Applicable\nOutput\nOutput Type\nFormat\nDescription\nData\nTable Output of the executed BigQuery SQL query.\nConfiguration Fields\nField Name\nDescription\nConnection\nGoogle BigQuery connection (OAuth or service account). Required for access.\nProject\nGoogle Cloud Project ID containing the BigQuery datasets.\nQuery The SQL query string to be executed. Supports standard SQL syntax.\nSample Input\nNot Applicable\nSample Configuration\nField\nValue\nConnection\nGoogle BigQuery OAuth\nProject\ncustomer-data-analytics\nQuery'), 0.33333334), (Document(metadata={'_id': '21c3607e-54d8-44a9-b1b6-12646396ca58', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='activity executes a structured query (e.g., SQL) against a configured data source such as a relational database, data warehouse, or cloud storage engine . You can retrieve the results directly as tabular output or optionally save them to a file using configurable export settings. This activity is especially useful for dynamically pulling data into a workflow, generating reports, or integrating external data systems. When saving results to a file, it also supports advanced formatting using templates, encryption, and partitioning logic. Use this activity to:\nQuery databases and bring live data into workflows\nExport query results as Excel or CSV files\nApply formatting using templates and control sheet/row structure\nSecure output files with encryption and filename customization\nUse case\n: A data analyst can use this activity to run a sales report query on a PostgreSQL database. The output can be formatted using a template Excel file, encrypted using a secret key, and saved with a filename pattern that includes a timestamp.\nInput Type\nDescription\nData\nOptional incoming data used to influence the query or filenames (if dynamic).\nOutput\nOutput Type\nFormat\nDescription\nData\nTable or File Query results, either in-memory (as table) or written to file(s).\nConfiguration Fields\nField Name\nDescription\nDatasource Id Select the connection representing the data source (e.g., MySQL, SQL Server, Snowflake) where the query will run.\nQuery The query string (SQL or supported query language) to be executed on the selected data source. Supports variables if dynamic queries are needed.\nSave As File Enable this option to save the query result to a file instead of returning it as in-memory table data.\nSecret Key\nRequired only when “Save As File” is enabled. This encryption key secures the generated file’s content.'), 0.25), (Document(metadata={'_id': '65f1fed2-a4bd-4a52-aa8a-cc0e2c0490f2', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content="activity allows users to execute SQL queries on files or data stored in a connected data source (e.g., database, storage, or file-based system). This activity supports dynamic queries, and optionally allows saving the results to files with encryption, formatting, and custom output configuration.\nUse this activity to:\nExecute ad hoc or parameterized SQL queries on uploaded or connected data Retrieve transformed or filtered data for further processing\nGenerate reports or structured data files from query results\nUse Case\n: Useful in scenarios where data needs to be filtered, joined, aggregated, or reshaped before it’s used in reporting, validation, or export.\nInput\nType\nDescription\nFiles\nFiles/data available in the connection\nOutput\nType Format\nDescription\nData / File\nTable / File\nQuery result as a table or downloadable file\nConfiguration Fields\nField Name\nRequired\nDescription\nConnection\nYes\nConnection to the data source where the query should be executed.\nQuery Yes\nSQL query to be executed on the connected data source.\nSave As File\nNo\nIf enabled, the query result will be saved as a file.\nSecret Key\nConditional Encryption key used to secure the generated output file (enabled only if Save As File is true).\nFile Pattern\nConditional\nPattern for naming the generated files.\nSheet Name\nConditional Sheet name to use in the generated file (for Excel formats).\nFile\nConditional\nTemplate file to structure the output.\nSplit by Column\nConditional\nColumn name used to split the query result into multiple output files.\nStarting Row Conditional\nRow index in the template file from where data insertion begins.\nStarting Column\nConditional\nColumn index in the template file from where data insertion begins.\nSample Input\nNot applicable\n— data is pulled from the connected data source. Sample Configuration\nField\nValue\nConnection\nAzureBlobConnection\nQuery\nSELECT * FROM SalesData WHERE Region = 'East'\nSave As File\ntrue\nSecret Key\nEncrypt@123\nFile Pattern\nSales_Report_[Region]"), 0.2), (Document(metadata={'_id': '16772a9b-c89a-4370-ae9b-911286a37769', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content=').\nQuery Column Name\nColumn name to store the query string (portion after\n?\n) without parsing key-value pairs.\nFragment Column Name\nColumn name to store the fragment identifier (portion after\n#\n, if any). Note\n: This activity does not split the query string into key-value pairs — use the\nSplit HTTP Query\nactivity if you need that level of detail.\nSample Input\nemployee_id\nname\nurl\nE001\nJohn Doe'), 0.16666667)]
[ 2025-08-10 23:12:07,919 ] test_main.py:71 root - INFO - Building context with metadata from documents...
[ 2025-08-10 23:12:07,920 ] test_main.py:73 root - INFO - (Document(metadata={'_id': '4bf7f9a7-fc4e-49bc-9caf-4fd89d8160ab', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='Execute Query | Infoveave Help\nSkip to content\nExecute Query\nDescription\nThe\nExecute Query'), 0.5)
[ 2025-08-10 23:12:07,992 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-10 23:12:07,993 ] test_main.py:81 root - INFO - [Record(id='4bf7f9a7-fc4e-49bc-9caf-4fd89d8160ab', payload={'url': 'https://infoveave-help.pages.dev/automation-v8/activities/execute-query/', 'title': 'execute-query', 'section': 'automation', 'terminologies': ['Infoveave', 'Query', 'Reports', 'Value'], 'char_count': 2330, 'word_count': 363, 'page_content': 'Execute Query | Infoveave Help\nSkip to content\nExecute Query\nDescription\nThe\nExecute Query', 'chunk_index': 0}, vector=None, shard_key=None, order_value=None)]
[ 2025-08-10 23:12:07,993 ] test_main.py:82 root - INFO - Retrieved result for point ID: 4bf7f9a7-fc4e-49bc-9caf-4fd89d8160ab
[ 2025-08-10 23:12:07,993 ] test_main.py:73 root - INFO - (Document(metadata={'_id': 'c4316ab6-9c63-42af-b504-74f8cdbc37df', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='This activity connects to your Google Cloud project, runs the specified query, and returns the results in tabular format. It is ideal for pulling real-time analytics, data transformations, or integrating cloud data into your workflow pipelines.\nUse case\n: Fetch customer order data by region for the last quarter directly from BigQuery to feed a dashboard or analytics engine.\nInput\nNot Applicable\nOutput\nOutput Type\nFormat\nDescription\nData\nTable Output of the executed BigQuery SQL query.\nConfiguration Fields\nField Name\nDescription\nConnection\nGoogle BigQuery connection (OAuth or service account). Required for access.\nProject\nGoogle Cloud Project ID containing the BigQuery datasets.\nQuery The SQL query string to be executed. Supports standard SQL syntax.\nSample Input\nNot Applicable\nSample Configuration\nField\nValue\nConnection\nGoogle BigQuery OAuth\nProject\ncustomer-data-analytics\nQuery'), 0.33333334)
[ 2025-08-10 23:12:08,048 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-10 23:12:08,088 ] test_main.py:81 root - INFO - [Record(id='c4316ab6-9c63-42af-b504-74f8cdbc37df', payload={'url': 'https://infoveave-help.pages.dev/automation-v8/activities/fetch-from-bigquery/', 'title': 'fetch-from-bigquery', 'section': 'automation', 'terminologies': ['Infoveave', 'Query', 'Value'], 'char_count': 1338, 'word_count': 194, 'page_content': 'This activity connects to your Google Cloud project, runs the specified query, and returns the results in tabular format. It is ideal for pulling real-time analytics, data transformations, or integrating cloud data into your workflow pipelines.\nUse case\n: Fetch customer order data by region for the last quarter directly from BigQuery to feed a dashboard or analytics engine.\nInput\nNot Applicable\nOutput\nOutput Type\nFormat\nDescription\nData\nTable Output of the executed BigQuery SQL query.\nConfiguration Fields\nField Name\nDescription\nConnection\nGoogle BigQuery connection (OAuth or service account). Required for access.\nProject\nGoogle Cloud Project ID containing the BigQuery datasets.\nQuery The SQL query string to be executed. Supports standard SQL syntax.\nSample Input\nNot Applicable\nSample Configuration\nField\nValue\nConnection\nGoogle BigQuery OAuth\nProject\ncustomer-data-analytics\nQuery', 'chunk_index': 1}, vector=None, shard_key=None, order_value=None)]
[ 2025-08-10 23:12:08,089 ] test_main.py:82 root - INFO - Retrieved result for point ID: c4316ab6-9c63-42af-b504-74f8cdbc37df
[ 2025-08-10 23:12:08,089 ] test_main.py:73 root - INFO - (Document(metadata={'_id': '21c3607e-54d8-44a9-b1b6-12646396ca58', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='activity executes a structured query (e.g., SQL) against a configured data source such as a relational database, data warehouse, or cloud storage engine . You can retrieve the results directly as tabular output or optionally save them to a file using configurable export settings. This activity is especially useful for dynamically pulling data into a workflow, generating reports, or integrating external data systems. When saving results to a file, it also supports advanced formatting using templates, encryption, and partitioning logic. Use this activity to:\nQuery databases and bring live data into workflows\nExport query results as Excel or CSV files\nApply formatting using templates and control sheet/row structure\nSecure output files with encryption and filename customization\nUse case\n: A data analyst can use this activity to run a sales report query on a PostgreSQL database. The output can be formatted using a template Excel file, encrypted using a secret key, and saved with a filename pattern that includes a timestamp.\nInput Type\nDescription\nData\nOptional incoming data used to influence the query or filenames (if dynamic).\nOutput\nOutput Type\nFormat\nDescription\nData\nTable or File Query results, either in-memory (as table) or written to file(s).\nConfiguration Fields\nField Name\nDescription\nDatasource Id Select the connection representing the data source (e.g., MySQL, SQL Server, Snowflake) where the query will run.\nQuery The query string (SQL or supported query language) to be executed on the selected data source. Supports variables if dynamic queries are needed.\nSave As File Enable this option to save the query result to a file instead of returning it as in-memory table data.\nSecret Key\nRequired only when “Save As File” is enabled. This encryption key secures the generated file’s content.'), 0.25)
[ 2025-08-10 23:12:08,140 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-10 23:12:08,184 ] test_main.py:81 root - INFO - [Record(id='21c3607e-54d8-44a9-b1b6-12646396ca58', payload={'url': 'https://infoveave-help.pages.dev/automation-v8/activities/query-datasource/', 'title': 'query-datasource', 'section': 'automation', 'terminologies': ['Infoveave', 'Query', 'Reports', 'Value', 'Variables', 'Workflows'], 'char_count': 3756, 'word_count': 590, 'page_content': 'activity executes a structured query (e.g., SQL) against a configured data source such as a relational database, data warehouse, or cloud storage engine . You can retrieve the results directly as tabular output or optionally save them to a file using configurable export settings. This activity is especially useful for dynamically pulling data into a workflow, generating reports, or integrating external data systems. When saving results to a file, it also supports advanced formatting using templates, encryption, and partitioning logic. Use this activity to:\nQuery databases and bring live data into workflows\nExport query results as Excel or CSV files\nApply formatting using templates and control sheet/row structure\nSecure output files with encryption and filename customization\nUse case\n: A data analyst can use this activity to run a sales report query on a PostgreSQL database. The output can be formatted using a template Excel file, encrypted using a secret key, and saved with a filename pattern that includes a timestamp.\nInput Type\nDescription\nData\nOptional incoming data used to influence the query or filenames (if dynamic).\nOutput\nOutput Type\nFormat\nDescription\nData\nTable or File Query results, either in-memory (as table) or written to file(s).\nConfiguration Fields\nField Name\nDescription\nDatasource Id Select the connection representing the data source (e.g., MySQL, SQL Server, Snowflake) where the query will run.\nQuery The query string (SQL or supported query language) to be executed on the selected data source. Supports variables if dynamic queries are needed.\nSave As File Enable this option to save the query result to a file instead of returning it as in-memory table data.\nSecret Key\nRequired only when “Save As File” is enabled. This encryption key secures the generated file’s content.', 'chunk_index': 1}, vector=None, shard_key=None, order_value=None)]
[ 2025-08-10 23:12:08,185 ] test_main.py:82 root - INFO - Retrieved result for point ID: 21c3607e-54d8-44a9-b1b6-12646396ca58
[ 2025-08-10 23:12:08,185 ] test_main.py:73 root - INFO - (Document(metadata={'_id': '65f1fed2-a4bd-4a52-aa8a-cc0e2c0490f2', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content="activity allows users to execute SQL queries on files or data stored in a connected data source (e.g., database, storage, or file-based system). This activity supports dynamic queries, and optionally allows saving the results to files with encryption, formatting, and custom output configuration.\nUse this activity to:\nExecute ad hoc or parameterized SQL queries on uploaded or connected data Retrieve transformed or filtered data for further processing\nGenerate reports or structured data files from query results\nUse Case\n: Useful in scenarios where data needs to be filtered, joined, aggregated, or reshaped before it’s used in reporting, validation, or export.\nInput\nType\nDescription\nFiles\nFiles/data available in the connection\nOutput\nType Format\nDescription\nData / File\nTable / File\nQuery result as a table or downloadable file\nConfiguration Fields\nField Name\nRequired\nDescription\nConnection\nYes\nConnection to the data source where the query should be executed.\nQuery Yes\nSQL query to be executed on the connected data source.\nSave As File\nNo\nIf enabled, the query result will be saved as a file.\nSecret Key\nConditional Encryption key used to secure the generated output file (enabled only if Save As File is true).\nFile Pattern\nConditional\nPattern for naming the generated files.\nSheet Name\nConditional Sheet name to use in the generated file (for Excel formats).\nFile\nConditional\nTemplate file to structure the output.\nSplit by Column\nConditional\nColumn name used to split the query result into multiple output files.\nStarting Row Conditional\nRow index in the template file from where data insertion begins.\nStarting Column\nConditional\nColumn index in the template file from where data insertion begins.\nSample Input\nNot applicable\n— data is pulled from the connected data source. Sample Configuration\nField\nValue\nConnection\nAzureBlobConnection\nQuery\nSELECT * FROM SalesData WHERE Region = 'East'\nSave As File\ntrue\nSecret Key\nEncrypt@123\nFile Pattern\nSales_Report_[Region]"), 0.2)
[ 2025-08-10 23:12:08,240 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-10 23:12:08,291 ] test_main.py:81 root - INFO - [Record(id='65f1fed2-a4bd-4a52-aa8a-cc0e2c0490f2', payload={'url': 'https://infoveave-help.pages.dev/automation-v8/activities/execute-query/', 'title': 'execute-query', 'section': 'automation', 'terminologies': ['Infoveave', 'Query', 'Reports', 'Value'], 'char_count': 2330, 'word_count': 363, 'page_content': "activity allows users to execute SQL queries on files or data stored in a connected data source (e.g., database, storage, or file-based system). This activity supports dynamic queries, and optionally allows saving the results to files with encryption, formatting, and custom output configuration.\nUse this activity to:\nExecute ad hoc or parameterized SQL queries on uploaded or connected data Retrieve transformed or filtered data for further processing\nGenerate reports or structured data files from query results\nUse Case\n: Useful in scenarios where data needs to be filtered, joined, aggregated, or reshaped before it’s used in reporting, validation, or export.\nInput\nType\nDescription\nFiles\nFiles/data available in the connection\nOutput\nType Format\nDescription\nData / File\nTable / File\nQuery result as a table or downloadable file\nConfiguration Fields\nField Name\nRequired\nDescription\nConnection\nYes\nConnection to the data source where the query should be executed.\nQuery Yes\nSQL query to be executed on the connected data source.\nSave As File\nNo\nIf enabled, the query result will be saved as a file.\nSecret Key\nConditional Encryption key used to secure the generated output file (enabled only if Save As File is true).\nFile Pattern\nConditional\nPattern for naming the generated files.\nSheet Name\nConditional Sheet name to use in the generated file (for Excel formats).\nFile\nConditional\nTemplate file to structure the output.\nSplit by Column\nConditional\nColumn name used to split the query result into multiple output files.\nStarting Row Conditional\nRow index in the template file from where data insertion begins.\nStarting Column\nConditional\nColumn index in the template file from where data insertion begins.\nSample Input\nNot applicable\n— data is pulled from the connected data source. Sample Configuration\nField\nValue\nConnection\nAzureBlobConnection\nQuery\nSELECT * FROM SalesData WHERE Region = 'East'\nSave As File\ntrue\nSecret Key\nEncrypt@123\nFile Pattern\nSales_Report_[Region]", 'chunk_index': 1}, vector=None, shard_key=None, order_value=None)]
[ 2025-08-10 23:12:08,292 ] test_main.py:82 root - INFO - Retrieved result for point ID: 65f1fed2-a4bd-4a52-aa8a-cc0e2c0490f2
[ 2025-08-10 23:12:08,292 ] test_main.py:73 root - INFO - (Document(metadata={'_id': '16772a9b-c89a-4370-ae9b-911286a37769', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content=').\nQuery Column Name\nColumn name to store the query string (portion after\n?\n) without parsing key-value pairs.\nFragment Column Name\nColumn name to store the fragment identifier (portion after\n#\n, if any). Note\n: This activity does not split the query string into key-value pairs — use the\nSplit HTTP Query\nactivity if you need that level of detail.\nSample Input\nemployee_id\nname\nurl\nE001\nJohn Doe'), 0.16666667)
[ 2025-08-10 23:12:08,350 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-10 23:12:08,351 ] test_main.py:81 root - INFO - [Record(id='16772a9b-c89a-4370-ae9b-911286a37769', payload={'url': 'https://infoveave-help.pages.dev/automation-v8/activities/split-url/', 'title': 'split-url', 'section': 'automation', 'terminologies': ['Infoveave', 'Query', 'Reports', 'Value'], 'char_count': 3191, 'word_count': 408, 'page_content': ').\nQuery Column Name\nColumn name to store the query string (portion after\n?\n) without parsing key-value pairs.\nFragment Column Name\nColumn name to store the fragment identifier (portion after\n#\n, if any). Note\n: This activity does not split the query string into key-value pairs — use the\nSplit HTTP Query\nactivity if you need that level of detail.\nSample Input\nemployee_id\nname\nurl\nE001\nJohn Doe', 'chunk_index': 2}, vector=None, shard_key=None, order_value=None)]
[ 2025-08-10 23:12:08,351 ] test_main.py:82 root - INFO - Retrieved result for point ID: 16772a9b-c89a-4370-ae9b-911286a37769
[ 2025-08-10 23:12:08,351 ] test_main.py:318 root - INFO - Rewritten Query 2: Send Email
[ 2025-08-10 23:12:08,821 ] test_main.py:321 root - INFO - Embedding generated for query 2.
[ 2025-08-10 23:12:10,019 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points/query "HTTP/1.1 200 OK"
[ 2025-08-10 23:12:10,024 ] test_main.py:326 root - INFO - Processing query part 2: Send Email
[ 2025-08-10 23:12:10,046 ] test_main.py:71 root - INFO - Building context with metadata from documents...
[ 2025-08-10 23:12:10,046 ] test_main.py:73 root - INFO - (Document(metadata={'_id': 'b0c2000b-2a94-480e-8ade-5ccb489ed9ea', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='Send Email | Infoveave Help\nSkip to content\nSend Email\nDescription\nThe\nSend Email'), 0.5)
[ 2025-08-10 23:12:10,102 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-10 23:12:10,102 ] test_main.py:81 root - INFO - [Record(id='b0c2000b-2a94-480e-8ade-5ccb489ed9ea', payload={'url': 'https://infoveave-help.pages.dev/automation-v8/activities/send-email/', 'title': 'send-email', 'section': 'automation', 'terminologies': ['Infoveave', 'Value'], 'char_count': 3312, 'word_count': 495, 'page_content': 'Send Email | Infoveave Help\nSkip to content\nSend Email\nDescription\nThe\nSend Email', 'chunk_index': 0}, vector=None, shard_key=None, order_value=None)]
[ 2025-08-10 23:12:10,102 ] test_main.py:82 root - INFO - Retrieved result for point ID: b0c2000b-2a94-480e-8ade-5ccb489ed9ea
[ 2025-08-10 23:12:10,102 ] test_main.py:73 root - INFO - (Document(metadata={'_id': 'de5e3b97-dd0f-4d05-8da9-ae3c750c78cc', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='activity allows you to compose and send emails as part of a workflow. You can configure recipient addresses, subject, body content, and attachments . The activity also supports dynamic emailing using fields from input data, and allows the use of pre-designed Infoveave templates for styling and formatting consistency. Use this activity to:\nSend individual or bulk emails based on incoming data\nAttach files generated in the workflow\nFormat emails using templates for consistency\nEmbed processed data directly into the email body\nUse case\n: A workflow generates a monthly sales report and automatically sends personalized emails to each regional manager with their region’s data attached and included in the body.\nInput\nType\nDescription\nData'), 0.33333334)
[ 2025-08-10 23:12:10,155 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-10 23:12:10,156 ] test_main.py:81 root - INFO - [Record(id='de5e3b97-dd0f-4d05-8da9-ae3c750c78cc', payload={'url': 'https://infoveave-help.pages.dev/automation-v8/activities/send-email/', 'title': 'send-email', 'section': 'automation', 'terminologies': ['Infoveave', 'Value'], 'char_count': 3312, 'word_count': 495, 'page_content': 'activity allows you to compose and send emails as part of a workflow. You can configure recipient addresses, subject, body content, and attachments . The activity also supports dynamic emailing using fields from input data, and allows the use of pre-designed Infoveave templates for styling and formatting consistency. Use this activity to:\nSend individual or bulk emails based on incoming data\nAttach files generated in the workflow\nFormat emails using templates for consistency\nEmbed processed data directly into the email body\nUse case\n: A workflow generates a monthly sales report and automatically sends personalized emails to each regional manager with their region’s data attached and included in the body.\nInput\nType\nDescription\nData', 'chunk_index': 1}, vector=None, shard_key=None, order_value=None)]
[ 2025-08-10 23:12:10,156 ] test_main.py:82 root - INFO - Retrieved result for point ID: de5e3b97-dd0f-4d05-8da9-ae3c750c78cc
[ 2025-08-10 23:12:10,156 ] test_main.py:73 root - INFO - (Document(metadata={'_id': '79fddbc7-ebeb-4a13-9afb-02e3c3ec7774', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='(Optional) Tabular data used to populate dynamic fields like email addresses, template content, or attachment grouping.\nOutput\nOutput Type\nFormat\nDescription\nEmail Info\nTable Status of sent emails including recipient, success, and any errors encountered.\nConfiguration Fields\nField Name\nDescription\nConnection\nMail server connection to send emails (OAuth or SMTP supported).\nUse Default Credentials If enabled, uses Infoveave’s default email credentials. Disable to use custom authentication.\nUse Email Address From Data\nIf enabled, pulls recipient addresses from a specified column in the input data.\nEmail Column The column in the data containing the recipient’s email address (required if using email from data).\nEmail To Address\nStatic recipient(s) for the “To” field (comma-separated).\nEmail CC Address Email addresses for the “CC” field (comma-separated).\nEmail BCC Address\nEmail addresses for the “BCC” field.\nSubject\nSubject line of the email. Can be static or mapped from input data.\nContent The main body content of the email. Supports plain text or HTML.\nUse Infoveave Template\nWhen enabled, applies an Infoveave-designed template to the email layout.\nRerun Template Ensures template consistency across multiple emails in the same run.\nAttachment Name\nName of the attachment file (e.g.,\nSalesReport_May2025.xlsx\n).\nSplit By Column Splits data into separate attachments based on values in this column (used in bulk personalization).\nSheet Name\nThe name of the worksheet in the template used for formatting the attachment content.\nSend Data In Email Body If enabled, includes input data as a formatted table within the body of the email.\nAttachment File Pattern\nPattern to identify which files to attach from prior activities (e.g.,\n"*.pdf"\n).\nCombine\nSplit By Column with\nEmail Column\nto send a unique email with corresponding data and attachment per recipient.\nSample Input\nNot applicable\n(used only if sending emails dynamically per row or attaching generated data).\nSample Configuration\nField\nValue'), 0.25)
[ 2025-08-10 23:12:10,204 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-10 23:12:10,205 ] test_main.py:81 root - INFO - [Record(id='79fddbc7-ebeb-4a13-9afb-02e3c3ec7774', payload={'url': 'https://infoveave-help.pages.dev/automation-v8/activities/send-email/', 'title': 'send-email', 'section': 'automation', 'terminologies': ['Infoveave', 'Value'], 'char_count': 3312, 'word_count': 495, 'page_content': '(Optional) Tabular data used to populate dynamic fields like email addresses, template content, or attachment grouping.\nOutput\nOutput Type\nFormat\nDescription\nEmail Info\nTable Status of sent emails including recipient, success, and any errors encountered.\nConfiguration Fields\nField Name\nDescription\nConnection\nMail server connection to send emails (OAuth or SMTP supported).\nUse Default Credentials If enabled, uses Infoveave’s default email credentials. Disable to use custom authentication.\nUse Email Address From Data\nIf enabled, pulls recipient addresses from a specified column in the input data.\nEmail Column The column in the data containing the recipient’s email address (required if using email from data).\nEmail To Address\nStatic recipient(s) for the “To” field (comma-separated).\nEmail CC Address Email addresses for the “CC” field (comma-separated).\nEmail BCC Address\nEmail addresses for the “BCC” field.\nSubject\nSubject line of the email. Can be static or mapped from input data.\nContent The main body content of the email. Supports plain text or HTML.\nUse Infoveave Template\nWhen enabled, applies an Infoveave-designed template to the email layout.\nRerun Template Ensures template consistency across multiple emails in the same run.\nAttachment Name\nName of the attachment file (e.g.,\nSalesReport_May2025.xlsx\n).\nSplit By Column Splits data into separate attachments based on values in this column (used in bulk personalization).\nSheet Name\nThe name of the worksheet in the template used for formatting the attachment content.\nSend Data In Email Body If enabled, includes input data as a formatted table within the body of the email.\nAttachment File Pattern\nPattern to identify which files to attach from prior activities (e.g.,\n"*.pdf"\n).\nCombine\nSplit By Column with\nEmail Column\nto send a unique email with corresponding data and attachment per recipient.\nSample Input\nNot applicable\n(used only if sending emails dynamically per row or attaching generated data).\nSample Configuration\nField\nValue', 'chunk_index': 2}, vector=None, shard_key=None, order_value=None)]
[ 2025-08-10 23:12:10,205 ] test_main.py:82 root - INFO - Retrieved result for point ID: 79fddbc7-ebeb-4a13-9afb-02e3c3ec7774
[ 2025-08-10 23:12:10,205 ] test_main.py:73 root - INFO - (Document(metadata={'_id': 'ea0e4e86-0f23-462b-a182-48cedad8fdd9', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='2025-07-01T10:05:00Z\njohn@example.com\nWelcome Email\n18KB\nonboarding\nev1235\nopened\n2025-07-01T10:08:00Z jane@example.com\nPromo Offer\n22KB\npromotions\nFor\nMessages\nEntity (JSON):\n{\n"headers"\n: {\n"message-id"\n:\n"\n<abc@mailgun.org>'), 0.2)
[ 2025-08-10 23:12:10,264 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-10 23:12:10,265 ] test_main.py:81 root - INFO - [Record(id='ea0e4e86-0f23-462b-a182-48cedad8fdd9', payload={'url': 'https://infoveave-help.pages.dev/automation-v8/activities/mailgun/', 'title': 'mailgun', 'section': 'automation', 'terminologies': ['Infoveave', 'Tags', 'Value', 'Workflows'], 'char_count': 3213, 'word_count': 485, 'page_content': '2025-07-01T10:05:00Z\njohn@example.com\nWelcome Email\n18KB\nonboarding\nev1235\nopened\n2025-07-01T10:08:00Z jane@example.com\nPromo Offer\n22KB\npromotions\nFor\nMessages\nEntity (JSON):\n{\n"headers"\n: {\n"message-id"\n:\n"\n<abc@mailgun.org>', 'chunk_index': 3}, vector=None, shard_key=None, order_value=None)]
[ 2025-08-10 23:12:10,265 ] test_main.py:82 root - INFO - Retrieved result for point ID: ea0e4e86-0f23-462b-a182-48cedad8fdd9
[ 2025-08-10 23:12:10,265 ] test_main.py:73 root - INFO - (Document(metadata={'_id': 'b6d38099-c9de-471f-973c-0f9d734b02ec', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='Activity Step\nReplaced Values\nSendEmail_12345\nStep 1\nCustomerName: John Doe\nSendEmail_67890\nStep 2\nCustomerName: Jane Smith'), 0.16666667)
[ 2025-08-10 23:12:10,319 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-10 23:12:10,320 ] test_main.py:81 root - INFO - [Record(id='b6d38099-c9de-471f-973c-0f9d734b02ec', payload={'url': 'https://infoveave-help.pages.dev/automation-v8/activities/start-iteration/', 'title': 'start-iteration', 'section': 'automation', 'terminologies': ['Infoveave', 'Value'], 'char_count': 2180, 'word_count': 314, 'page_content': 'Activity Step\nReplaced Values\nSendEmail_12345\nStep 1\nCustomerName: John Doe\nSendEmail_67890\nStep 2\nCustomerName: Jane Smith', 'chunk_index': 2}, vector=None, shard_key=None, order_value=None)]
[ 2025-08-10 23:12:10,320 ] test_main.py:82 root - INFO - Retrieved result for point ID: b6d38099-c9de-471f-973c-0f9d734b02ec
[ 2025-08-10 23:12:10,320 ] test_main.py:187 root - INFO - Loaded rewritten query user prompt.
[ 2025-08-10 23:12:11,805 ] _client.py:1025 httpx - INFO - HTTP Request: POST https://api.groq.com/openai/v1/chat/completions "HTTP/1.1 200 OK"
[ 2025-08-10 23:12:11,810 ] test_main.py:329 root - INFO - Response for query part 2: The **Send Email** activity in Infoveave allows you to compose and send emails as part of a workflow. 

You can configure recipient addresses, subject, body content, and attachments. The activity also supports dynamic emailing using fields from input data, and allows the use of pre-designed Infoveave templates for styling and formatting consistency. 

Here's a breakdown of how it works:

**Use Cases:**

* Send individual or bulk emails based on incoming data
* Attach files generated in the workflow
* Format emails using templates for consistency
* Embed processed data directly into the email body

**Input:**

* **Data:** (Optional) Tabular data used to populate dynamic fields like email addresses, template content, or attachment grouping.

**Output:**

* **Email Info:** Table Status of sent emails including recipient, success, and any errors encountered.

**Configuration Fields:**

* **Connection:** Mail server connection to send emails (OAuth or SMTP supported).
* **Use Default Credentials:** If enabled, uses Infoveave’s default email credentials. Disable to use custom authentication.
* **Use Email Address From Data:** If enabled, pulls recipient addresses from a specified column in the input data.
* **Email Column:** The column in the data containing the recipient’s email address (required if using email from data).
* **Email To Address:** Static recipient(s) for the “To” field (comma-separated).
* **Email CC Address:** Email addresses for the “CC” field (comma-separated).
* **Email BCC Address:** Email addresses for the “BCC” field.
* **Subject:** Subject line of the email. Can be static or mapped from input data.
* **Content:** The main body content of the email. Supports plain text or HTML.
* **Use Infoveave Template:** When enabled, applies an Infoveave-designed template to the email layout.
* **Rerun Template:** Ensures template consistency across multiple emails in the same run.
* **Attachment Name:** Name of the attachment file (e.g., SalesReport_May2025.xlsx).
* **Split By Column:** Splits data into separate attachments based on values in this column (used in bulk personalization).
* **Sheet Name:** The name of the worksheet in the template used for formatting the attachment content.
* **Send Data In Email Body:** If enabled, includes input data as a formatted table within the body of the email.
* **Attachment File Pattern:** Pattern to identify which files to attach from prior activities (e.g., "*.pdf").

**Combining Features:**

You can combine `Split By Column` with `Email Column` to send a unique email with corresponding data and attachment per recipient.
[ 2025-08-10 23:12:11,810 ] test_main.py:332 root - INFO - [(Document(metadata={'_id': 'b0c2000b-2a94-480e-8ade-5ccb489ed9ea', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='Send Email | Infoveave Help\nSkip to content\nSend Email\nDescription\nThe\nSend Email'), 0.5), (Document(metadata={'_id': 'de5e3b97-dd0f-4d05-8da9-ae3c750c78cc', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='activity allows you to compose and send emails as part of a workflow. You can configure recipient addresses, subject, body content, and attachments . The activity also supports dynamic emailing using fields from input data, and allows the use of pre-designed Infoveave templates for styling and formatting consistency. Use this activity to:\nSend individual or bulk emails based on incoming data\nAttach files generated in the workflow\nFormat emails using templates for consistency\nEmbed processed data directly into the email body\nUse case\n: A workflow generates a monthly sales report and automatically sends personalized emails to each regional manager with their region’s data attached and included in the body.\nInput\nType\nDescription\nData'), 0.33333334), (Document(metadata={'_id': '79fddbc7-ebeb-4a13-9afb-02e3c3ec7774', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='(Optional) Tabular data used to populate dynamic fields like email addresses, template content, or attachment grouping.\nOutput\nOutput Type\nFormat\nDescription\nEmail Info\nTable Status of sent emails including recipient, success, and any errors encountered.\nConfiguration Fields\nField Name\nDescription\nConnection\nMail server connection to send emails (OAuth or SMTP supported).\nUse Default Credentials If enabled, uses Infoveave’s default email credentials. Disable to use custom authentication.\nUse Email Address From Data\nIf enabled, pulls recipient addresses from a specified column in the input data.\nEmail Column The column in the data containing the recipient’s email address (required if using email from data).\nEmail To Address\nStatic recipient(s) for the “To” field (comma-separated).\nEmail CC Address Email addresses for the “CC” field (comma-separated).\nEmail BCC Address\nEmail addresses for the “BCC” field.\nSubject\nSubject line of the email. Can be static or mapped from input data.\nContent The main body content of the email. Supports plain text or HTML.\nUse Infoveave Template\nWhen enabled, applies an Infoveave-designed template to the email layout.\nRerun Template Ensures template consistency across multiple emails in the same run.\nAttachment Name\nName of the attachment file (e.g.,\nSalesReport_May2025.xlsx\n).\nSplit By Column Splits data into separate attachments based on values in this column (used in bulk personalization).\nSheet Name\nThe name of the worksheet in the template used for formatting the attachment content.\nSend Data In Email Body If enabled, includes input data as a formatted table within the body of the email.\nAttachment File Pattern\nPattern to identify which files to attach from prior activities (e.g.,\n"*.pdf"\n).\nCombine\nSplit By Column with\nEmail Column\nto send a unique email with corresponding data and attachment per recipient.\nSample Input\nNot applicable\n(used only if sending emails dynamically per row or attaching generated data).\nSample Configuration\nField\nValue'), 0.25), (Document(metadata={'_id': 'ea0e4e86-0f23-462b-a182-48cedad8fdd9', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='2025-07-01T10:05:00Z\njohn@example.com\nWelcome Email\n18KB\nonboarding\nev1235\nopened\n2025-07-01T10:08:00Z jane@example.com\nPromo Offer\n22KB\npromotions\nFor\nMessages\nEntity (JSON):\n{\n"headers"\n: {\n"message-id"\n:\n"\n<abc@mailgun.org>'), 0.2), (Document(metadata={'_id': 'b6d38099-c9de-471f-973c-0f9d734b02ec', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='Activity Step\nReplaced Values\nSendEmail_12345\nStep 1\nCustomerName: John Doe\nSendEmail_67890\nStep 2\nCustomerName: Jane Smith'), 0.16666667)]
[ 2025-08-10 23:12:11,835 ] test_main.py:71 root - INFO - Building context with metadata from documents...
[ 2025-08-10 23:12:11,835 ] test_main.py:73 root - INFO - (Document(metadata={'_id': 'b0c2000b-2a94-480e-8ade-5ccb489ed9ea', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='Send Email | Infoveave Help\nSkip to content\nSend Email\nDescription\nThe\nSend Email'), 0.5)
[ 2025-08-10 23:12:11,920 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-10 23:12:11,920 ] test_main.py:81 root - INFO - [Record(id='b0c2000b-2a94-480e-8ade-5ccb489ed9ea', payload={'url': 'https://infoveave-help.pages.dev/automation-v8/activities/send-email/', 'title': 'send-email', 'section': 'automation', 'terminologies': ['Infoveave', 'Value'], 'char_count': 3312, 'word_count': 495, 'page_content': 'Send Email | Infoveave Help\nSkip to content\nSend Email\nDescription\nThe\nSend Email', 'chunk_index': 0}, vector=None, shard_key=None, order_value=None)]
[ 2025-08-10 23:12:11,920 ] test_main.py:82 root - INFO - Retrieved result for point ID: b0c2000b-2a94-480e-8ade-5ccb489ed9ea
[ 2025-08-10 23:12:11,920 ] test_main.py:73 root - INFO - (Document(metadata={'_id': 'de5e3b97-dd0f-4d05-8da9-ae3c750c78cc', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='activity allows you to compose and send emails as part of a workflow. You can configure recipient addresses, subject, body content, and attachments . The activity also supports dynamic emailing using fields from input data, and allows the use of pre-designed Infoveave templates for styling and formatting consistency. Use this activity to:\nSend individual or bulk emails based on incoming data\nAttach files generated in the workflow\nFormat emails using templates for consistency\nEmbed processed data directly into the email body\nUse case\n: A workflow generates a monthly sales report and automatically sends personalized emails to each regional manager with their region’s data attached and included in the body.\nInput\nType\nDescription\nData'), 0.33333334)
[ 2025-08-10 23:12:12,002 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-10 23:12:12,003 ] test_main.py:81 root - INFO - [Record(id='de5e3b97-dd0f-4d05-8da9-ae3c750c78cc', payload={'url': 'https://infoveave-help.pages.dev/automation-v8/activities/send-email/', 'title': 'send-email', 'section': 'automation', 'terminologies': ['Infoveave', 'Value'], 'char_count': 3312, 'word_count': 495, 'page_content': 'activity allows you to compose and send emails as part of a workflow. You can configure recipient addresses, subject, body content, and attachments . The activity also supports dynamic emailing using fields from input data, and allows the use of pre-designed Infoveave templates for styling and formatting consistency. Use this activity to:\nSend individual or bulk emails based on incoming data\nAttach files generated in the workflow\nFormat emails using templates for consistency\nEmbed processed data directly into the email body\nUse case\n: A workflow generates a monthly sales report and automatically sends personalized emails to each regional manager with their region’s data attached and included in the body.\nInput\nType\nDescription\nData', 'chunk_index': 1}, vector=None, shard_key=None, order_value=None)]
[ 2025-08-10 23:12:12,003 ] test_main.py:82 root - INFO - Retrieved result for point ID: de5e3b97-dd0f-4d05-8da9-ae3c750c78cc
[ 2025-08-10 23:12:12,004 ] test_main.py:73 root - INFO - (Document(metadata={'_id': '79fddbc7-ebeb-4a13-9afb-02e3c3ec7774', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='(Optional) Tabular data used to populate dynamic fields like email addresses, template content, or attachment grouping.\nOutput\nOutput Type\nFormat\nDescription\nEmail Info\nTable Status of sent emails including recipient, success, and any errors encountered.\nConfiguration Fields\nField Name\nDescription\nConnection\nMail server connection to send emails (OAuth or SMTP supported).\nUse Default Credentials If enabled, uses Infoveave’s default email credentials. Disable to use custom authentication.\nUse Email Address From Data\nIf enabled, pulls recipient addresses from a specified column in the input data.\nEmail Column The column in the data containing the recipient’s email address (required if using email from data).\nEmail To Address\nStatic recipient(s) for the “To” field (comma-separated).\nEmail CC Address Email addresses for the “CC” field (comma-separated).\nEmail BCC Address\nEmail addresses for the “BCC” field.\nSubject\nSubject line of the email. Can be static or mapped from input data.\nContent The main body content of the email. Supports plain text or HTML.\nUse Infoveave Template\nWhen enabled, applies an Infoveave-designed template to the email layout.\nRerun Template Ensures template consistency across multiple emails in the same run.\nAttachment Name\nName of the attachment file (e.g.,\nSalesReport_May2025.xlsx\n).\nSplit By Column Splits data into separate attachments based on values in this column (used in bulk personalization).\nSheet Name\nThe name of the worksheet in the template used for formatting the attachment content.\nSend Data In Email Body If enabled, includes input data as a formatted table within the body of the email.\nAttachment File Pattern\nPattern to identify which files to attach from prior activities (e.g.,\n"*.pdf"\n).\nCombine\nSplit By Column with\nEmail Column\nto send a unique email with corresponding data and attachment per recipient.\nSample Input\nNot applicable\n(used only if sending emails dynamically per row or attaching generated data).\nSample Configuration\nField\nValue'), 0.25)
[ 2025-08-10 23:12:12,062 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-10 23:12:12,064 ] test_main.py:81 root - INFO - [Record(id='79fddbc7-ebeb-4a13-9afb-02e3c3ec7774', payload={'url': 'https://infoveave-help.pages.dev/automation-v8/activities/send-email/', 'title': 'send-email', 'section': 'automation', 'terminologies': ['Infoveave', 'Value'], 'char_count': 3312, 'word_count': 495, 'page_content': '(Optional) Tabular data used to populate dynamic fields like email addresses, template content, or attachment grouping.\nOutput\nOutput Type\nFormat\nDescription\nEmail Info\nTable Status of sent emails including recipient, success, and any errors encountered.\nConfiguration Fields\nField Name\nDescription\nConnection\nMail server connection to send emails (OAuth or SMTP supported).\nUse Default Credentials If enabled, uses Infoveave’s default email credentials. Disable to use custom authentication.\nUse Email Address From Data\nIf enabled, pulls recipient addresses from a specified column in the input data.\nEmail Column The column in the data containing the recipient’s email address (required if using email from data).\nEmail To Address\nStatic recipient(s) for the “To” field (comma-separated).\nEmail CC Address Email addresses for the “CC” field (comma-separated).\nEmail BCC Address\nEmail addresses for the “BCC” field.\nSubject\nSubject line of the email. Can be static or mapped from input data.\nContent The main body content of the email. Supports plain text or HTML.\nUse Infoveave Template\nWhen enabled, applies an Infoveave-designed template to the email layout.\nRerun Template Ensures template consistency across multiple emails in the same run.\nAttachment Name\nName of the attachment file (e.g.,\nSalesReport_May2025.xlsx\n).\nSplit By Column Splits data into separate attachments based on values in this column (used in bulk personalization).\nSheet Name\nThe name of the worksheet in the template used for formatting the attachment content.\nSend Data In Email Body If enabled, includes input data as a formatted table within the body of the email.\nAttachment File Pattern\nPattern to identify which files to attach from prior activities (e.g.,\n"*.pdf"\n).\nCombine\nSplit By Column with\nEmail Column\nto send a unique email with corresponding data and attachment per recipient.\nSample Input\nNot applicable\n(used only if sending emails dynamically per row or attaching generated data).\nSample Configuration\nField\nValue', 'chunk_index': 2}, vector=None, shard_key=None, order_value=None)]
[ 2025-08-10 23:12:12,064 ] test_main.py:82 root - INFO - Retrieved result for point ID: 79fddbc7-ebeb-4a13-9afb-02e3c3ec7774
[ 2025-08-10 23:12:12,064 ] test_main.py:73 root - INFO - (Document(metadata={'_id': 'ea0e4e86-0f23-462b-a182-48cedad8fdd9', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='2025-07-01T10:05:00Z\njohn@example.com\nWelcome Email\n18KB\nonboarding\nev1235\nopened\n2025-07-01T10:08:00Z jane@example.com\nPromo Offer\n22KB\npromotions\nFor\nMessages\nEntity (JSON):\n{\n"headers"\n: {\n"message-id"\n:\n"\n<abc@mailgun.org>'), 0.2)
[ 2025-08-10 23:12:12,143 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-10 23:12:12,144 ] test_main.py:81 root - INFO - [Record(id='ea0e4e86-0f23-462b-a182-48cedad8fdd9', payload={'url': 'https://infoveave-help.pages.dev/automation-v8/activities/mailgun/', 'title': 'mailgun', 'section': 'automation', 'terminologies': ['Infoveave', 'Tags', 'Value', 'Workflows'], 'char_count': 3213, 'word_count': 485, 'page_content': '2025-07-01T10:05:00Z\njohn@example.com\nWelcome Email\n18KB\nonboarding\nev1235\nopened\n2025-07-01T10:08:00Z jane@example.com\nPromo Offer\n22KB\npromotions\nFor\nMessages\nEntity (JSON):\n{\n"headers"\n: {\n"message-id"\n:\n"\n<abc@mailgun.org>', 'chunk_index': 3}, vector=None, shard_key=None, order_value=None)]
[ 2025-08-10 23:12:12,144 ] test_main.py:82 root - INFO - Retrieved result for point ID: ea0e4e86-0f23-462b-a182-48cedad8fdd9
[ 2025-08-10 23:12:12,144 ] test_main.py:73 root - INFO - (Document(metadata={'_id': 'b6d38099-c9de-471f-973c-0f9d734b02ec', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='Activity Step\nReplaced Values\nSendEmail_12345\nStep 1\nCustomerName: John Doe\nSendEmail_67890\nStep 2\nCustomerName: Jane Smith'), 0.16666667)
[ 2025-08-10 23:12:12,200 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-10 23:12:12,202 ] test_main.py:81 root - INFO - [Record(id='b6d38099-c9de-471f-973c-0f9d734b02ec', payload={'url': 'https://infoveave-help.pages.dev/automation-v8/activities/start-iteration/', 'title': 'start-iteration', 'section': 'automation', 'terminologies': ['Infoveave', 'Value'], 'char_count': 2180, 'word_count': 314, 'page_content': 'Activity Step\nReplaced Values\nSendEmail_12345\nStep 1\nCustomerName: John Doe\nSendEmail_67890\nStep 2\nCustomerName: Jane Smith', 'chunk_index': 2}, vector=None, shard_key=None, order_value=None)]
[ 2025-08-10 23:12:12,202 ] test_main.py:82 root - INFO - Retrieved result for point ID: b6d38099-c9de-471f-973c-0f9d734b02ec
[ 2025-08-10 23:12:12,202 ] test_main.py:352 root - INFO - Found 2 final documents.
[ 2025-08-10 23:12:12,202 ] test_main.py:353 root - INFO - Context prepared for LLM response.
[ 2025-08-10 23:12:12,227 ] test_main.py:381 root - INFO - Generating final answer using LLM...
[ 2025-08-10 23:12:13,793 ] _client.py:1025 httpx - INFO - HTTP Request: POST https://api.groq.com/openai/v1/chat/completions "HTTP/1.1 200 OK"
[ 2025-08-10 23:12:13,799 ] test_main.py:383 root - INFO - Final LLM Response:

[ 2025-08-10 23:12:13,799 ] test_main.py:384 root - INFO - Let's break down how to create a workflow in Infoveave to run an Oracle DB query and send the results as an email report.

**1. The `Execute Query` Activity**

The `Execute Query` activity is your starting point for retrieving data from your Oracle database.  

Here's how it works:

* **Connection:** You'll need to establish a connection to your Oracle database within Infoveave. This involves providing connection details like the database server address, port, username, and password.

* **Query:**  Enter your SQL query directly into the `Execute Query` activity.  For example, if you want to retrieve sales data for the last month, your query might look like this:

   ```sql
   SELECT * FROM sales_table WHERE sale_date >= DATE_SUB(CURDATE(), INTERVAL 1 MONTH)
   ```

* **Output:** The `Execute Query` activity returns the results of your query as a tabular dataset. This dataset will be used as input for the `Send Email` activity.

**2. The `Send Email` Activity**

The `Send Email` activity takes the data from the `Execute Query` activity and formats it into an email report.

Here's how to configure it:

* **Connection:**  You'll need to set up a connection to your email server. Infoveave supports both OAuth and SMTP authentication methods.

* **Recipient:** Specify the email address(es) you want to send the report to. You can use a static email address or pull recipient addresses from a column in the data returned by the `Execute Query` activity.

* **Subject:**  Craft a clear and concise subject line for your email.

* **Content:**  You can write the email body directly or use a pre-designed Infoveave template for a more professional look.

* **Attachments:**  If you want to include the raw query results as an attachment, you can configure the `Send Email` activity to attach the tabular dataset.

**Putting it Together**

1. **Create a New Workflow:** In Infoveave, start a new workflow.

2. **Add the `Execute Query` Activity:** Drag and drop the `Execute Query` activity onto the workflow canvas. Configure the connection to your Oracle database and enter your SQL query.

3. **Add the `Send Email` Activity:** Drag and drop the `Send Email` activity after the `Execute Query` activity. Configure the email server connection, recipient(s), subject, content, and any attachments.

4. **Connect the Activities:** Connect the output of the `Execute Query` activity to the input of the `Send Email` activity. This will pass the query results to the email activity.

5. **Test and Deploy:**  Test your workflow thoroughly to ensure it runs as expected. Once you're satisfied, deploy it to automate your Oracle DB query and email reporting process.



Let me know if you have any more questions or would like help with specific aspects of setting up your workflow!

[ 2025-08-10 23:12:13,800 ] test_main.py:391 root - INFO - LLM response saved to ./data/results/infoverve_helper_response.md
[ 2025-08-10 23:13:21,491 ] test_main.py:199 root - INFO - .........................Starting Infoverve Helper Application.........................
[ 2025-08-10 23:13:21,492 ] test_main.py:215 root - INFO - GROQ_API_KEY loaded.
[ 2025-08-10 23:13:21,510 ] test_main.py:239 root - INFO - Embedding model initialized.
[ 2025-08-10 23:13:21,646 ] _client.py:1025 httpx - INFO - HTTP Request: GET http://ai.infoveave.cloud:6333 "HTTP/1.1 200 OK"
[ 2025-08-10 23:13:21,647 ] test_main.py:243 root - INFO - Connected to Qdrant.
[ 2025-08-10 23:13:21,754 ] _client.py:1025 httpx - INFO - HTTP Request: GET http://ai.infoveave.cloud:6333/collections "HTTP/1.1 200 OK"
[ 2025-08-10 23:13:21,755 ] test_main.py:247 root - INFO - Qdrant collections retrieved.
[ 2025-08-10 23:13:21,755 ] test_main.py:254 root - INFO - Using collection: infoverve_helper_docs_hybrid
[ 2025-08-10 23:13:23,250 ] test_main.py:257 root - INFO - Sparse embeddings initialized.
[ 2025-08-10 23:13:23,323 ] _client.py:1025 httpx - INFO - HTTP Request: GET http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid "HTTP/1.1 200 OK"
[ 2025-08-10 23:13:25,688 ] _client.py:1025 httpx - INFO - HTTP Request: GET http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid "HTTP/1.1 200 OK"
[ 2025-08-10 23:13:25,690 ] test_main.py:269 root - INFO - QdrantVectorStore initialized.
[ 2025-08-10 23:13:25,724 ] test_main.py:275 root - INFO - LLM initialized.
[ 2025-08-10 23:13:26,635 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points/query "HTTP/1.1 200 OK"
[ 2025-08-10 23:13:27,385 ] test_main.py:297 root - INFO - Original query embedding generated.
[ 2025-08-10 23:13:27,407 ] test_main.py:71 root - INFO - Building context with metadata from documents...
[ 2025-08-10 23:13:27,407 ] test_main.py:73 root - INFO - (Document(metadata={'_id': '5277ccca-017e-4aba-b405-977f8f65fe7f', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='0%\nPlay\n0:00\n/\n1:14\nCreating Workflows\nEnter Fullscreen\nIntroduction\n0:00\n1:14\n0:00\nIntroduction\n0:11\nNavigate to Data Sources 0:16\nCreate New Data Source\n0:18\nSelect IOT\n0:20\nSelect and Upload the File\n0:24\nName the Data Source and Table\n0:30\nSelect Ingestion Type 1:01\nAdd Additional Files\n1:06\nAdd a Calculated Column'), 0.5)
[ 2025-08-10 23:13:27,471 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-10 23:13:27,472 ] test_main.py:81 root - INFO - [Record(id='5277ccca-017e-4aba-b405-977f8f65fe7f', payload={'url': 'https://infoveave-help.pages.dev/studio-v8/datasources/create-datasource-from-iot/', 'title': 'create-datasource-from-iot', 'section': 'studio', 'terminologies': ['Calculated Columns', 'Calculated Measures', 'Datasources', 'Dimensions', 'Infoveave', 'Insights', 'Measures', 'View', 'View', 'Workflows'], 'char_count': 4366, 'word_count': 718, 'page_content': '0%\nPlay\n0:00\n/\n1:14\nCreating Workflows\nEnter Fullscreen\nIntroduction\n0:00\n1:14\n0:00\nIntroduction\n0:11\nNavigate to Data Sources 0:16\nCreate New Data Source\n0:18\nSelect IOT\n0:20\nSelect and Upload the File\n0:24\nName the Data Source and Table\n0:30\nSelect Ingestion Type 1:01\nAdd Additional Files\n1:06\nAdd a Calculated Column', 'chunk_index': 1}, vector=None, shard_key=None, order_value=None)]
[ 2025-08-10 23:13:27,472 ] test_main.py:82 root - INFO - Retrieved result for point ID: 5277ccca-017e-4aba-b405-977f8f65fe7f
[ 2025-08-10 23:13:27,472 ] test_main.py:73 root - INFO - (Document(metadata={'_id': 'fa3a2b04-d657-4ab1-872e-c4300b408723', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='Execute API | Infoveave Help\nSkip to content\nExecute API\nDescription\nThe\nExecute API Activity\nenables workflows to connect and communicate with any RESTful API by executing configurable HTTP requests such as\nGET\n,\nPOST\n, PUT\n, or\nDELETE\n. It allows users to define the request structure including headers, query parameters, body content, pagination rules, response parsing, and authentication.\nThis activity is highly flexible and supports integration with\nthird-party systems'), 0.33333334)
[ 2025-08-10 23:13:27,543 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-10 23:13:27,545 ] test_main.py:81 root - INFO - [Record(id='fa3a2b04-d657-4ab1-872e-c4300b408723', payload={'url': 'https://infoveave-help.pages.dev/automation-v8/activities/execute-api/', 'title': 'execute-api', 'section': 'automation', 'terminologies': ['Automation', 'Infoveave', 'Query', 'Value', 'Variables', 'Workflows'], 'char_count': 4334, 'word_count': 636, 'page_content': 'Execute API | Infoveave Help\nSkip to content\nExecute API\nDescription\nThe\nExecute API Activity\nenables workflows to connect and communicate with any RESTful API by executing configurable HTTP requests such as\nGET\n,\nPOST\n, PUT\n, or\nDELETE\n. It allows users to define the request structure including headers, query parameters, body content, pagination rules, response parsing, and authentication.\nThis activity is highly flexible and supports integration with\nthird-party systems', 'chunk_index': 0}, vector=None, shard_key=None, order_value=None)]
[ 2025-08-10 23:13:27,545 ] test_main.py:82 root - INFO - Retrieved result for point ID: fa3a2b04-d657-4ab1-872e-c4300b408723
[ 2025-08-10 23:13:27,545 ] test_main.py:73 root - INFO - (Document(metadata={'_id': '3fd7ab5c-2d29-41ea-9ed7-0684f87b08e1', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='Add FTP Download Activity\n0:21\nConfigure FTP Download Activity\n0:31\nAdd Read Excel Files Activity\n0:35\nAdd Transform Activity using Javascript\n0:40\nAdd Round Numbers Activity\n0:46 Add Remove Duplicate Rows Activity\n0:52\nAdd Drop Columns Activity\n0:56\nAdd Rename Columns Activity\n1:01\nAdd Upload to Datasource Activity\n1:08\nExecute the Workflow and View Instance History'), 0.25)
[ 2025-08-10 23:13:27,596 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-10 23:13:27,597 ] test_main.py:81 root - INFO - [Record(id='3fd7ab5c-2d29-41ea-9ed7-0684f87b08e1', payload={'url': 'https://infoveave-help.pages.dev/automation-v8/jobs-v8/create-new-job/', 'title': 'create-new-job', 'section': 'automation', 'terminologies': ['Alerts', 'Automation', 'Infoveave', 'Measures', 'Query', 'Query Report', 'Value', 'Variables', 'View', 'View', 'Workflows'], 'char_count': 4476, 'word_count': 722, 'page_content': 'Add FTP Download Activity\n0:21\nConfigure FTP Download Activity\n0:31\nAdd Read Excel Files Activity\n0:35\nAdd Transform Activity using Javascript\n0:40\nAdd Round Numbers Activity\n0:46 Add Remove Duplicate Rows Activity\n0:52\nAdd Drop Columns Activity\n0:56\nAdd Rename Columns Activity\n1:01\nAdd Upload to Datasource Activity\n1:08\nExecute the Workflow and View Instance History', 'chunk_index': 1}, vector=None, shard_key=None, order_value=None)]
[ 2025-08-10 23:13:27,597 ] test_main.py:82 root - INFO - Retrieved result for point ID: 3fd7ab5c-2d29-41ea-9ed7-0684f87b08e1
[ 2025-08-10 23:13:27,597 ] test_main.py:73 root - INFO - (Document(metadata={'_id': '2adcd9bd-c3f6-41e9-8c27-26f07adfbe4c', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='Add FTP Download Activity\n0:21\nConfigure FTP Download Activity\n0:31\nAdd Read Excel Files Activity\n0:35\nAdd Transform Activity using Javascript\n0:40\nAdd Round Numbers Activity\n0:46 Add Remove Duplicate Rows Activity\n0:52\nAdd Drop Columns Activity\n0:56\nAdd Rename Columns Activity\n1:01\nAdd Upload to Datasource Activity\n1:08\nExecute the Workflow and View Instance History'), 0.2)
[ 2025-08-10 23:13:27,665 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-10 23:13:27,666 ] test_main.py:81 root - INFO - [Record(id='2adcd9bd-c3f6-41e9-8c27-26f07adfbe4c', payload={'url': 'https://infoveave-help.pages.dev/automation-v8/workflows/define-workflow/', 'title': 'define-workflow', 'section': 'automation', 'terminologies': ['Alerts', 'Automation', 'Infoveave', 'Measures', 'Query', 'Query Report', 'Value', 'Variables', 'View', 'View', 'Workflows'], 'char_count': 4476, 'word_count': 722, 'page_content': 'Add FTP Download Activity\n0:21\nConfigure FTP Download Activity\n0:31\nAdd Read Excel Files Activity\n0:35\nAdd Transform Activity using Javascript\n0:40\nAdd Round Numbers Activity\n0:46 Add Remove Duplicate Rows Activity\n0:52\nAdd Drop Columns Activity\n0:56\nAdd Rename Columns Activity\n1:01\nAdd Upload to Datasource Activity\n1:08\nExecute the Workflow and View Instance History', 'chunk_index': 1}, vector=None, shard_key=None, order_value=None)]
[ 2025-08-10 23:13:27,666 ] test_main.py:82 root - INFO - Retrieved result for point ID: 2adcd9bd-c3f6-41e9-8c27-26f07adfbe4c
[ 2025-08-10 23:13:27,666 ] test_main.py:73 root - INFO - (Document(metadata={'_id': 'df9d15c4-2094-450f-95e6-162e03d5828a', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='Creating Infoboard Using A Query\nCreate Infoboard Using A Query\nCreating Infoboard Using API\nCreate Infoboard Using API\nCreating Workflow in Infoveave\nCreating Workflows\nWorkflow Execution Status\nWorkflow Execution Status'), 0.16666667)
[ 2025-08-10 23:13:27,739 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-10 23:13:27,740 ] test_main.py:81 root - INFO - [Record(id='df9d15c4-2094-450f-95e6-162e03d5828a', payload={'url': 'https://infoveave-help.pages.dev/videos/', 'title': 'videos', 'section': 'videos', 'terminologies': ['Automation', 'Catalogues', 'Conditional Expressions', 'Custom Calendar', 'Datasources', 'Dimensions', 'Infoboards', 'Infoveave', 'Insights', 'Lists', 'Measures', 'My Organization', 'My Workspace', 'Query', 'Reports', 'SciPyR', 'What-If Analysis', 'What-If Formulae', 'Workflows', 'Workflow Execution Status'], 'char_count': 2430, 'word_count': 338, 'page_content': 'Creating Infoboard Using A Query\nCreate Infoboard Using A Query\nCreating Infoboard Using API\nCreate Infoboard Using API\nCreating Workflow in Infoveave\nCreating Workflows\nWorkflow Execution Status\nWorkflow Execution Status', 'chunk_index': 3}, vector=None, shard_key=None, order_value=None)]
[ 2025-08-10 23:13:27,740 ] test_main.py:82 root - INFO - Retrieved result for point ID: df9d15c4-2094-450f-95e6-162e03d5828a
[ 2025-08-10 23:13:27,740 ] test_main.py:73 root - INFO - (Document(metadata={'_id': 'e1d5e729-523e-4f47-8f5c-47908efa00f5', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='In the Workflow Designer, you can connect activities by linking the output of one activity to the input of another. Each activity has input and output nodes. This allows you to define the logical flow and sequence of activities within your Workflow . By visually connecting activities, you can create a cohesive Workflow that accurately reflects your desired data processing steps.'), 0.14285715)
[ 2025-08-10 23:13:27,813 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-10 23:13:27,814 ] test_main.py:81 root - INFO - [Record(id='e1d5e729-523e-4f47-8f5c-47908efa00f5', payload={'url': 'https://infoveave-help.pages.dev/automation-v8/jobs-v8/job-configuration-layout/', 'title': 'job-configuration-layout', 'section': 'automation', 'terminologies': ['Alerts', 'Designer Canvas', 'Infoveave', 'Variables', 'Version history', 'View', 'View', 'Workflows'], 'char_count': 3891, 'word_count': 586, 'page_content': 'In the Workflow Designer, you can connect activities by linking the output of one activity to the input of another. Each activity has input and output nodes. This allows you to define the logical flow and sequence of activities within your Workflow . By visually connecting activities, you can create a cohesive Workflow that accurately reflects your desired data processing steps.', 'chunk_index': 4}, vector=None, shard_key=None, order_value=None)]
[ 2025-08-10 23:13:27,814 ] test_main.py:82 root - INFO - Retrieved result for point ID: e1d5e729-523e-4f47-8f5c-47908efa00f5
[ 2025-08-10 23:13:27,814 ] test_main.py:73 root - INFO - (Document(metadata={'_id': '99d90ede-22f2-4654-9344-3847ee37ebe3', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='In the Workflow Designer, you can connect activities by linking the output of one activity to the input of another. Each activity has input and output nodes. This allows you to define the logical flow and sequence of activities within your Workflow . By visually connecting activities, you can create a cohesive Workflow that accurately reflects your desired data processing steps.'), 0.125)
[ 2025-08-10 23:13:27,874 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-10 23:13:27,876 ] test_main.py:81 root - INFO - [Record(id='99d90ede-22f2-4654-9344-3847ee37ebe3', payload={'url': 'https://infoveave-help.pages.dev/automation-v8/workflows/workflow-configuration-layout/', 'title': 'workflow-configuration-layout', 'section': 'automation', 'terminologies': ['Alerts', 'Designer Canvas', 'Infoveave', 'Variables', 'Version history', 'View', 'View', 'Workflows'], 'char_count': 3891, 'word_count': 586, 'page_content': 'In the Workflow Designer, you can connect activities by linking the output of one activity to the input of another. Each activity has input and output nodes. This allows you to define the logical flow and sequence of activities within your Workflow . By visually connecting activities, you can create a cohesive Workflow that accurately reflects your desired data processing steps.', 'chunk_index': 4}, vector=None, shard_key=None, order_value=None)]
[ 2025-08-10 23:13:27,876 ] test_main.py:82 root - INFO - Retrieved result for point ID: 99d90ede-22f2-4654-9344-3847ee37ebe3
[ 2025-08-10 23:13:27,876 ] test_main.py:73 root - INFO - (Document(metadata={'_id': '03741da5-a422-4032-ab47-32afa5385f47', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='Create a datasource using Microsoft Excel | Infoveave Help\nSkip to content\nCreate a datasource using Microsoft Excel\n0:00\nPlay\nMute\n0%\n0:00\n/\n1:56\nCreating Workflows Closed-Captions Off\nSettings\nAirPlay\nGoogle Cast\nEnter PiP\nEnter Fullscreen'), 0.11111111)
[ 2025-08-10 23:13:27,937 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-10 23:13:27,938 ] test_main.py:81 root - INFO - [Record(id='03741da5-a422-4032-ab47-32afa5385f47', payload={'url': 'https://infoveave-help.pages.dev/how-to/create-a-datasource-using-microsoft-excel/', 'title': 'create-a-datasource-using-microsoft-excel', 'section': 'data-application', 'terminologies': ['Infoveave', 'Workflows'], 'char_count': 241, 'word_count': 37, 'page_content': 'Create a datasource using Microsoft Excel | Infoveave Help\nSkip to content\nCreate a datasource using Microsoft Excel\n0:00\nPlay\nMute\n0%\n0:00\n/\n1:56\nCreating Workflows Closed-Captions Off\nSettings\nAirPlay\nGoogle Cast\nEnter PiP\nEnter Fullscreen', 'chunk_index': 0}, vector=None, shard_key=None, order_value=None)]
[ 2025-08-10 23:13:27,938 ] test_main.py:82 root - INFO - Retrieved result for point ID: 03741da5-a422-4032-ab47-32afa5385f47
[ 2025-08-10 23:13:27,938 ] test_main.py:73 root - INFO - (Document(metadata={'_id': 'da017f02-664a-4420-918f-56af25901047', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='Workflows | Infoveave Help\nSkip to content\nWorkflows Infoveave workflows let you automate and streamline your data processes. These processes range from ingestion to visualization. A workflow is a sequence of connected activities that automates business-critical tasks such as data acquisition, analysis, and reporting. Edit the Workflow status\nClick the pencil icon\nnext to a Workflow name to select whether the Workflow is\nverified\nor\nnot verified\n.\nCategorize the Workflow\nAssign specific\ndomains\n,\ntiers\n,'), 0.1)
[ 2025-08-10 23:13:28,027 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-10 23:13:28,028 ] test_main.py:81 root - INFO - [Record(id='da017f02-664a-4420-918f-56af25901047', payload={'url': 'https://infoveave-help.pages.dev/data-application/catalogues/workflows/', 'title': 'workflows', 'section': 'data-application', 'terminologies': ['Domains', 'Infoveave', 'Insights', 'Tags', 'Tiers', 'View', 'View', 'Workflows'], 'char_count': 2918, 'word_count': 452, 'page_content': 'Workflows | Infoveave Help\nSkip to content\nWorkflows Infoveave workflows let you automate and streamline your data processes. These processes range from ingestion to visualization. A workflow is a sequence of connected activities that automates business-critical tasks such as data acquisition, analysis, and reporting. Edit the Workflow status\nClick the pencil icon\nnext to a Workflow name to select whether the Workflow is\nverified\nor\nnot verified\n.\nCategorize the Workflow\nAssign specific\ndomains\n,\ntiers\n,', 'chunk_index': 0}, vector=None, shard_key=None, order_value=None)]
[ 2025-08-10 23:13:28,028 ] test_main.py:82 root - INFO - Retrieved result for point ID: da017f02-664a-4420-918f-56af25901047
[ 2025-08-10 23:13:28,028 ] test_main.py:73 root - INFO - (Document(metadata={'_id': '9779ce44-7139-4da5-99ff-241ed83453de', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='Sources\nand click\n+ Add New Source\n.\nClick\nUse Code\n.\nName the source.\nWrite JavaScript code.\nClick\nPreview Table\n.\nClick\nSave\n.\nConfiguring an Infoboard You can configure Infoboards under the\nInfoboard Setup tab in the Customize panel . This allows you to personalize the Infoboard name, define the date range (including options like years, quarters, months, weeks, or days), and selectively choose relevant workflows to tailor the Infoboard according to your specific needs. Here are the key instructions for using the Infoboards section.\nInfoboard name\nEnter a descriptive and meaningful name for your Infoboard. Choose a name that accurately reflects the purpose or content of the Infoboard. Date range\nSelect the appropriate date range option for your Infoboard.\nDefault Automatically determine the date range based on the available dataset. Choose from a range of options such as years, quarters, months, weeks, or days to define the default date range.\nFixed Define a specific date range for the Infoboard, such as particular days, weeks, months, quarters, or years.\nNo Date\nUse this option if your Infoboard does not require any date-related information. Select workflows and jobs\nUse the dropdown to select the relevant workflows or jobs and link them with the Infoboard. The Infoboard displays the linked workflows or jobs execution status at the top-right corner of the screen.'), 0.09090909)
[ 2025-08-10 23:13:28,084 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-10 23:13:28,085 ] test_main.py:81 root - INFO - [Record(id='9779ce44-7139-4da5-99ff-241ed83453de', payload={'url': 'https://infoveave-help.pages.dev/insights-v8/guide-to-infoboard-designer/customizie-panel/setup/sources/', 'title': 'sources', 'section': 'insights', 'terminologies': ['Calculated Columns', 'Client', 'Color Palette', 'Common Dimension filters', 'Datasources', 'Dimensions', 'Expression', 'Infoboards', 'Infoboard Setup', 'Infoveave', 'Measures', 'Query', 'Value', 'Variables', 'View', 'View', 'Workflows'], 'char_count': 11349, 'word_count': 1871, 'page_content': 'Sources\nand click\n+ Add New Source\n.\nClick\nUse Code\n.\nName the source.\nWrite JavaScript code.\nClick\nPreview Table\n.\nClick\nSave\n.\nConfiguring an Infoboard You can configure Infoboards under the\nInfoboard Setup tab in the Customize panel . This allows you to personalize the Infoboard name, define the date range (including options like years, quarters, months, weeks, or days), and selectively choose relevant workflows to tailor the Infoboard according to your specific needs. Here are the key instructions for using the Infoboards section.\nInfoboard name\nEnter a descriptive and meaningful name for your Infoboard. Choose a name that accurately reflects the purpose or content of the Infoboard. Date range\nSelect the appropriate date range option for your Infoboard.\nDefault Automatically determine the date range based on the available dataset. Choose from a range of options such as years, quarters, months, weeks, or days to define the default date range.\nFixed Define a specific date range for the Infoboard, such as particular days, weeks, months, quarters, or years.\nNo Date\nUse this option if your Infoboard does not require any date-related information. Select workflows and jobs\nUse the dropdown to select the relevant workflows or jobs and link them with the Infoboard. The Infoboard displays the linked workflows or jobs execution status at the top-right corner of the screen.', 'chunk_index': 5}, vector=None, shard_key=None, order_value=None)]
[ 2025-08-10 23:13:28,085 ] test_main.py:82 root - INFO - Retrieved result for point ID: 9779ce44-7139-4da5-99ff-241ed83453de
[ 2025-08-10 23:13:28,085 ] test_main.py:129 root - INFO - Top context prepared for query rewriting.
[ 2025-08-10 23:13:28,086 ] test_main.py:103 root - INFO - Querying Neo4j for entities: ['What-If Formulae', 'Conditional Expressions', 'Catalogues', 'Automation', 'My Workspace', 'What-If Analysis', 'Version history', 'Infoveave', 'My Organization', 'Domains', 'Calculated Columns', 'SciPyR', 'Common Dimension filters', 'Lists', 'Measures', 'Variables', 'Calculated Measures', 'Datasources', 'Tiers', 'Workflows', 'Value', 'Alerts', 'Tags', 'Designer Canvas', 'View', 'Custom Calendar', 'Query Report', 'Insights', 'Workflow Execution Status', 'Infoboards', 'Dimensions', 'Expression', 'Color Palette', 'Client', 'Query', 'Reports', 'Infoboard Setup'] with hops=1 and top_n=50
[ 2025-08-10 23:13:29,085 ] result.py:337 neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownLabelWarning} {category: UNRECOGNIZED} {title: The provided label is not in the database.} {description: One of the labels in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing label name is: ${label})} {position: line: 3, column: 14, offset: 41} for query: '\n    UNWIND $names AS label\n    MATCH (e:`${label}`)\n    OPTIONAL MATCH (e)-[r]-(m)\n    RETURN e.name AS head, type(r) AS rel, m.name AS tail, COUNT(*) AS freq\n    LIMIT $limit\n    '
[ 2025-08-10 23:13:29,085 ] test_main.py:121 root - INFO - Retrieved 0 triplets from Neo4j.
[ 2025-08-10 23:13:29,085 ] test_main.py:137 root - INFO - Retrieved 0 related triplets from Neo4j.
[ 2025-08-10 23:13:29,085 ] test_main.py:142 root - INFO - Knowledge graph facts prepared for query rewriting.
[ 2025-08-10 23:13:29,087 ] test_main.py:147 root - INFO - Loaded rewritten query system prompt.
[ 2025-08-10 23:13:29,088 ] test_main.py:160 root - INFO - Loaded rewritten query user prompt.
[ 2025-08-10 23:13:30,153 ] _client.py:1025 httpx - INFO - HTTP Request: POST https://api.groq.com/openai/v1/chat/completions "HTTP/1.1 200 OK"
[ 2025-08-10 23:13:30,159 ] test_main.py:302 root - INFO - Rewritten query: Execute API| Add a Datasource from the API response| Add Calculated Column
[ 2025-08-10 23:13:30,159 ] test_main.py:309 root - INFO - Rewritten query parts: ['Execute API', 'Add a Datasource from the API response', 'Add Calculated Column']
[ 2025-08-10 23:13:30,159 ] test_main.py:318 root - INFO - Rewritten Query 1: Execute API
[ 2025-08-10 23:13:30,608 ] test_main.py:321 root - INFO - Embedding generated for query 1.
[ 2025-08-10 23:13:32,101 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points/query "HTTP/1.1 200 OK"
[ 2025-08-10 23:13:32,103 ] test_main.py:326 root - INFO - Processing query part 1: Execute API
[ 2025-08-10 23:13:32,126 ] test_main.py:71 root - INFO - Building context with metadata from documents...
[ 2025-08-10 23:13:32,126 ] test_main.py:73 root - INFO - (Document(metadata={'_id': 'fa3a2b04-d657-4ab1-872e-c4300b408723', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='Execute API | Infoveave Help\nSkip to content\nExecute API\nDescription\nThe\nExecute API Activity\nenables workflows to connect and communicate with any RESTful API by executing configurable HTTP requests such as\nGET\n,\nPOST\n, PUT\n, or\nDELETE\n. It allows users to define the request structure including headers, query parameters, body content, pagination rules, response parsing, and authentication.\nThis activity is highly flexible and supports integration with\nthird-party systems'), 0.5)
[ 2025-08-10 23:13:32,201 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-10 23:13:32,204 ] test_main.py:81 root - INFO - [Record(id='fa3a2b04-d657-4ab1-872e-c4300b408723', payload={'url': 'https://infoveave-help.pages.dev/automation-v8/activities/execute-api/', 'title': 'execute-api', 'section': 'automation', 'terminologies': ['Automation', 'Infoveave', 'Query', 'Value', 'Variables', 'Workflows'], 'char_count': 4334, 'word_count': 636, 'page_content': 'Execute API | Infoveave Help\nSkip to content\nExecute API\nDescription\nThe\nExecute API Activity\nenables workflows to connect and communicate with any RESTful API by executing configurable HTTP requests such as\nGET\n,\nPOST\n, PUT\n, or\nDELETE\n. It allows users to define the request structure including headers, query parameters, body content, pagination rules, response parsing, and authentication.\nThis activity is highly flexible and supports integration with\nthird-party systems', 'chunk_index': 0}, vector=None, shard_key=None, order_value=None)]
[ 2025-08-10 23:13:32,204 ] test_main.py:82 root - INFO - Retrieved result for point ID: fa3a2b04-d657-4ab1-872e-c4300b408723
[ 2025-08-10 23:13:32,205 ] test_main.py:73 root - INFO - (Document(metadata={'_id': '86f0e3ce-235c-4f7a-8dc3-6c50480e3d01', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content=',\ncustom backends\n,\npublic APIs\n, and , all without requiring external tools.\nUse case\n:\nIn a logistics automation workflow, use this activity to call a courier tracking API like'), 0.33333334)
[ 2025-08-10 23:13:32,260 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-10 23:13:32,261 ] test_main.py:81 root - INFO - [Record(id='86f0e3ce-235c-4f7a-8dc3-6c50480e3d01', payload={'url': 'https://infoveave-help.pages.dev/automation-v8/activities/execute-api/', 'title': 'execute-api', 'section': 'automation', 'terminologies': ['Automation', 'Infoveave', 'Query', 'Value', 'Variables', 'Workflows'], 'char_count': 4334, 'word_count': 636, 'page_content': ',\ncustom backends\n,\npublic APIs\n, and , all without requiring external tools.\nUse case\n:\nIn a logistics automation workflow, use this activity to call a courier tracking API like', 'chunk_index': 1}, vector=None, shard_key=None, order_value=None)]
[ 2025-08-10 23:13:32,261 ] test_main.py:82 root - INFO - Retrieved result for point ID: 86f0e3ce-235c-4f7a-8dc3-6c50480e3d01
[ 2025-08-10 23:13:32,261 ] test_main.py:73 root - INFO - (Document(metadata={'_id': '3b0042a7-bf88-4e9c-bc13-af93ce17095c', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='activity allows you to run a custom Node.js script or application as part of a workflow. You can specify the script file, working directory, command, output location, and control execution timeout.\nUse this activity to: Run backend automation written in Node.js\nProcess data, files, or external API responses using custom JavaScript logic\nIntegrate with CLI tools or third-party Node packages\nUse Case\n: Useful when workflows require backend processing logic like JSON manipulation, calling APIs, or custom data transformation that is best handled using Node.js.\nInput\nType\nDescription\nFiles\nProject or script files required for execution\nOutput\nType\nFormat Description\nExecution Data\nTable\nOutput from the executed command\nConfiguration Fields\nField Name\nDescription\nFile\nPath to the Node.js script or main file to execute.\nBase Folder\nThe folder where the script/project is located. Working Path\nOptional working directory path during execution.\nCommand\nNode.js command to execute the script (e.g.,\nnode index.js\n).\nOutput Directory\nFolder path to save execution output files.\nMax Execute Time Maximum time (in seconds) to allow script execution before timeout.\nRefresh Interval\nInterval (in seconds) to poll for execution status.\nSample Input\nNot applicable\n— input files are provided through the Files field.\nSample Configuration Field\nValue\nFile\nindex.js\nBase Folder\n/user-scripts/\nCommand\nnode index.js\nOutput Directory\n/output/\nMax Execute Time\n60\nRefresh Interval\n5\nSample Output\nCommandOutput\nHello World!'), 0.25)
[ 2025-08-10 23:13:32,321 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-10 23:13:32,323 ] test_main.py:81 root - INFO - [Record(id='3b0042a7-bf88-4e9c-bc13-af93ce17095c', payload={'url': 'https://infoveave-help.pages.dev/automation-v8/activities/execute-nodejs/', 'title': 'execute-nodejs', 'section': 'automation', 'terminologies': ['Automation', 'Data Transformation', 'Infoveave', 'Value', 'Workflows'], 'char_count': 1609, 'word_count': 239, 'page_content': 'activity allows you to run a custom Node.js script or application as part of a workflow. You can specify the script file, working directory, command, output location, and control execution timeout.\nUse this activity to: Run backend automation written in Node.js\nProcess data, files, or external API responses using custom JavaScript logic\nIntegrate with CLI tools or third-party Node packages\nUse Case\n: Useful when workflows require backend processing logic like JSON manipulation, calling APIs, or custom data transformation that is best handled using Node.js.\nInput\nType\nDescription\nFiles\nProject or script files required for execution\nOutput\nType\nFormat Description\nExecution Data\nTable\nOutput from the executed command\nConfiguration Fields\nField Name\nDescription\nFile\nPath to the Node.js script or main file to execute.\nBase Folder\nThe folder where the script/project is located. Working Path\nOptional working directory path during execution.\nCommand\nNode.js command to execute the script (e.g.,\nnode index.js\n).\nOutput Directory\nFolder path to save execution output files.\nMax Execute Time Maximum time (in seconds) to allow script execution before timeout.\nRefresh Interval\nInterval (in seconds) to poll for execution status.\nSample Input\nNot applicable\n— input files are provided through the Files field.\nSample Configuration Field\nValue\nFile\nindex.js\nBase Folder\n/user-scripts/\nCommand\nnode index.js\nOutput Directory\n/output/\nMax Execute Time\n60\nRefresh Interval\n5\nSample Output\nCommandOutput\nHello World!', 'chunk_index': 1}, vector=None, shard_key=None, order_value=None)]
[ 2025-08-10 23:13:32,323 ] test_main.py:82 root - INFO - Retrieved result for point ID: 3b0042a7-bf88-4e9c-bc13-af93ce17095c
[ 2025-08-10 23:13:32,323 ] test_main.py:187 root - INFO - Loaded rewritten query user prompt.
[ 2025-08-10 23:13:33,222 ] _client.py:1025 httpx - INFO - HTTP Request: POST https://api.groq.com/openai/v1/chat/completions "HTTP/1.1 200 OK"
[ 2025-08-10 23:13:33,223 ] test_main.py:329 root - INFO - Response for query part 1: The **Execute API Activity** enables workflows to connect and communicate with any RESTful API by executing configurable HTTP requests such as GET, POST, PUT, or DELETE. It allows users to define the request structure including headers, query parameters, body content, pagination rules, response parsing, and authentication. 

This activity is highly flexible and supports integration with third-party systems, custom backends, public APIs, and all without requiring external tools. 

You can learn more about the Execute API activity here: [https://infoveave-help.pages.dev/automation-v8/activities/execute-api/](https://infoveave-help.pages.dev/automation-v8/activities/execute-api/)
[ 2025-08-10 23:13:33,223 ] test_main.py:332 root - INFO - [(Document(metadata={'_id': 'fa3a2b04-d657-4ab1-872e-c4300b408723', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='Execute API | Infoveave Help\nSkip to content\nExecute API\nDescription\nThe\nExecute API Activity\nenables workflows to connect and communicate with any RESTful API by executing configurable HTTP requests such as\nGET\n,\nPOST\n, PUT\n, or\nDELETE\n. It allows users to define the request structure including headers, query parameters, body content, pagination rules, response parsing, and authentication.\nThis activity is highly flexible and supports integration with\nthird-party systems'), 0.5), (Document(metadata={'_id': '86f0e3ce-235c-4f7a-8dc3-6c50480e3d01', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content=',\ncustom backends\n,\npublic APIs\n, and , all without requiring external tools.\nUse case\n:\nIn a logistics automation workflow, use this activity to call a courier tracking API like'), 0.33333334), (Document(metadata={'_id': '3b0042a7-bf88-4e9c-bc13-af93ce17095c', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='activity allows you to run a custom Node.js script or application as part of a workflow. You can specify the script file, working directory, command, output location, and control execution timeout.\nUse this activity to: Run backend automation written in Node.js\nProcess data, files, or external API responses using custom JavaScript logic\nIntegrate with CLI tools or third-party Node packages\nUse Case\n: Useful when workflows require backend processing logic like JSON manipulation, calling APIs, or custom data transformation that is best handled using Node.js.\nInput\nType\nDescription\nFiles\nProject or script files required for execution\nOutput\nType\nFormat Description\nExecution Data\nTable\nOutput from the executed command\nConfiguration Fields\nField Name\nDescription\nFile\nPath to the Node.js script or main file to execute.\nBase Folder\nThe folder where the script/project is located. Working Path\nOptional working directory path during execution.\nCommand\nNode.js command to execute the script (e.g.,\nnode index.js\n).\nOutput Directory\nFolder path to save execution output files.\nMax Execute Time Maximum time (in seconds) to allow script execution before timeout.\nRefresh Interval\nInterval (in seconds) to poll for execution status.\nSample Input\nNot applicable\n— input files are provided through the Files field.\nSample Configuration Field\nValue\nFile\nindex.js\nBase Folder\n/user-scripts/\nCommand\nnode index.js\nOutput Directory\n/output/\nMax Execute Time\n60\nRefresh Interval\n5\nSample Output\nCommandOutput\nHello World!'), 0.25)]
[ 2025-08-10 23:13:33,232 ] test_main.py:71 root - INFO - Building context with metadata from documents...
[ 2025-08-10 23:13:33,232 ] test_main.py:73 root - INFO - (Document(metadata={'_id': 'fa3a2b04-d657-4ab1-872e-c4300b408723', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='Execute API | Infoveave Help\nSkip to content\nExecute API\nDescription\nThe\nExecute API Activity\nenables workflows to connect and communicate with any RESTful API by executing configurable HTTP requests such as\nGET\n,\nPOST\n, PUT\n, or\nDELETE\n. It allows users to define the request structure including headers, query parameters, body content, pagination rules, response parsing, and authentication.\nThis activity is highly flexible and supports integration with\nthird-party systems'), 0.5)
[ 2025-08-10 23:13:33,301 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-10 23:13:33,301 ] test_main.py:81 root - INFO - [Record(id='fa3a2b04-d657-4ab1-872e-c4300b408723', payload={'url': 'https://infoveave-help.pages.dev/automation-v8/activities/execute-api/', 'title': 'execute-api', 'section': 'automation', 'terminologies': ['Automation', 'Infoveave', 'Query', 'Value', 'Variables', 'Workflows'], 'char_count': 4334, 'word_count': 636, 'page_content': 'Execute API | Infoveave Help\nSkip to content\nExecute API\nDescription\nThe\nExecute API Activity\nenables workflows to connect and communicate with any RESTful API by executing configurable HTTP requests such as\nGET\n,\nPOST\n, PUT\n, or\nDELETE\n. It allows users to define the request structure including headers, query parameters, body content, pagination rules, response parsing, and authentication.\nThis activity is highly flexible and supports integration with\nthird-party systems', 'chunk_index': 0}, vector=None, shard_key=None, order_value=None)]
[ 2025-08-10 23:13:33,301 ] test_main.py:82 root - INFO - Retrieved result for point ID: fa3a2b04-d657-4ab1-872e-c4300b408723
[ 2025-08-10 23:13:33,301 ] test_main.py:73 root - INFO - (Document(metadata={'_id': '86f0e3ce-235c-4f7a-8dc3-6c50480e3d01', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content=',\ncustom backends\n,\npublic APIs\n, and , all without requiring external tools.\nUse case\n:\nIn a logistics automation workflow, use this activity to call a courier tracking API like'), 0.33333334)
[ 2025-08-10 23:13:33,364 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-10 23:13:33,365 ] test_main.py:81 root - INFO - [Record(id='86f0e3ce-235c-4f7a-8dc3-6c50480e3d01', payload={'url': 'https://infoveave-help.pages.dev/automation-v8/activities/execute-api/', 'title': 'execute-api', 'section': 'automation', 'terminologies': ['Automation', 'Infoveave', 'Query', 'Value', 'Variables', 'Workflows'], 'char_count': 4334, 'word_count': 636, 'page_content': ',\ncustom backends\n,\npublic APIs\n, and , all without requiring external tools.\nUse case\n:\nIn a logistics automation workflow, use this activity to call a courier tracking API like', 'chunk_index': 1}, vector=None, shard_key=None, order_value=None)]
[ 2025-08-10 23:13:33,365 ] test_main.py:82 root - INFO - Retrieved result for point ID: 86f0e3ce-235c-4f7a-8dc3-6c50480e3d01
[ 2025-08-10 23:13:33,365 ] test_main.py:73 root - INFO - (Document(metadata={'_id': '3b0042a7-bf88-4e9c-bc13-af93ce17095c', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='activity allows you to run a custom Node.js script or application as part of a workflow. You can specify the script file, working directory, command, output location, and control execution timeout.\nUse this activity to: Run backend automation written in Node.js\nProcess data, files, or external API responses using custom JavaScript logic\nIntegrate with CLI tools or third-party Node packages\nUse Case\n: Useful when workflows require backend processing logic like JSON manipulation, calling APIs, or custom data transformation that is best handled using Node.js.\nInput\nType\nDescription\nFiles\nProject or script files required for execution\nOutput\nType\nFormat Description\nExecution Data\nTable\nOutput from the executed command\nConfiguration Fields\nField Name\nDescription\nFile\nPath to the Node.js script or main file to execute.\nBase Folder\nThe folder where the script/project is located. Working Path\nOptional working directory path during execution.\nCommand\nNode.js command to execute the script (e.g.,\nnode index.js\n).\nOutput Directory\nFolder path to save execution output files.\nMax Execute Time Maximum time (in seconds) to allow script execution before timeout.\nRefresh Interval\nInterval (in seconds) to poll for execution status.\nSample Input\nNot applicable\n— input files are provided through the Files field.\nSample Configuration Field\nValue\nFile\nindex.js\nBase Folder\n/user-scripts/\nCommand\nnode index.js\nOutput Directory\n/output/\nMax Execute Time\n60\nRefresh Interval\n5\nSample Output\nCommandOutput\nHello World!'), 0.25)
[ 2025-08-10 23:13:33,420 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-10 23:13:33,457 ] test_main.py:81 root - INFO - [Record(id='3b0042a7-bf88-4e9c-bc13-af93ce17095c', payload={'url': 'https://infoveave-help.pages.dev/automation-v8/activities/execute-nodejs/', 'title': 'execute-nodejs', 'section': 'automation', 'terminologies': ['Automation', 'Data Transformation', 'Infoveave', 'Value', 'Workflows'], 'char_count': 1609, 'word_count': 239, 'page_content': 'activity allows you to run a custom Node.js script or application as part of a workflow. You can specify the script file, working directory, command, output location, and control execution timeout.\nUse this activity to: Run backend automation written in Node.js\nProcess data, files, or external API responses using custom JavaScript logic\nIntegrate with CLI tools or third-party Node packages\nUse Case\n: Useful when workflows require backend processing logic like JSON manipulation, calling APIs, or custom data transformation that is best handled using Node.js.\nInput\nType\nDescription\nFiles\nProject or script files required for execution\nOutput\nType\nFormat Description\nExecution Data\nTable\nOutput from the executed command\nConfiguration Fields\nField Name\nDescription\nFile\nPath to the Node.js script or main file to execute.\nBase Folder\nThe folder where the script/project is located. Working Path\nOptional working directory path during execution.\nCommand\nNode.js command to execute the script (e.g.,\nnode index.js\n).\nOutput Directory\nFolder path to save execution output files.\nMax Execute Time Maximum time (in seconds) to allow script execution before timeout.\nRefresh Interval\nInterval (in seconds) to poll for execution status.\nSample Input\nNot applicable\n— input files are provided through the Files field.\nSample Configuration Field\nValue\nFile\nindex.js\nBase Folder\n/user-scripts/\nCommand\nnode index.js\nOutput Directory\n/output/\nMax Execute Time\n60\nRefresh Interval\n5\nSample Output\nCommandOutput\nHello World!', 'chunk_index': 1}, vector=None, shard_key=None, order_value=None)]
[ 2025-08-10 23:13:33,457 ] test_main.py:82 root - INFO - Retrieved result for point ID: 3b0042a7-bf88-4e9c-bc13-af93ce17095c
[ 2025-08-10 23:13:33,457 ] test_main.py:318 root - INFO - Rewritten Query 2: Add a Datasource from the API response
[ 2025-08-10 23:13:34,113 ] test_main.py:321 root - INFO - Embedding generated for query 2.
[ 2025-08-10 23:13:35,144 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points/query "HTTP/1.1 200 OK"
[ 2025-08-10 23:13:35,195 ] test_main.py:326 root - INFO - Processing query part 2: Add a Datasource from the API response
[ 2025-08-10 23:13:35,224 ] test_main.py:71 root - INFO - Building context with metadata from documents...
[ 2025-08-10 23:13:35,224 ] test_main.py:73 root - INFO - (Document(metadata={'_id': '9b894708-b0a8-4ca4-8a7f-815112c39b4e', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='This section provides detailed guidance and instructions on how to create a Datasource directly from an API. You follow the steps to set up API sources, configure HTTP request methods, enter the request URLs, define the headers and run the API. You therefore learn how to incorporate data from APIs into your widgets.\nHere is a step-by-step guide on how to effectively call an API for your Infoboard widgets.\nSelect\nSources\nand click\n+ Add New Source\n. Click\nUse API\n.\nName the source.\nChoose the request method (GET or POST).\nEnter the API URL.\nSelect content type (\njson\nor\nform-url-encoded\n).\nClick\nHeaders to add headers (e.g., Authorization).\nFor each header, define a name/key and a corresponding value.The name/key typically represents the type of information, like “Authorization” or “Content-Type.”\nAuthorization Header Often used for authentication, it might include a token or other credentials\nContent-Type Header\nSpecifies the format of the data being sent, such as “application/json” for JSON data. The value is the specific data associated with that name/key.\nClick\n+\nto add more headers.\nClick the delete icon to remove a header.\nIf needed, add request body in JSON. Add Auth info if needed (Auth URL, headers, client ID, secret).\nClick\nRun\nto test the API.\nClick\nSave\n.\nTo insert a new row using POST\nUse\nPOST\nrequest type. Enter the URL.\nAdd JSON in request body.\nPreview the table.\nChange to\nGET\nand preview again to confirm.\nCode source\nThis section shows how to create an Infoboard source using JavaScript.\nSelect'), 0.5)
[ 2025-08-10 23:13:35,284 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-10 23:13:35,322 ] test_main.py:81 root - INFO - [Record(id='9b894708-b0a8-4ca4-8a7f-815112c39b4e', payload={'url': 'https://infoveave-help.pages.dev/insights-v8/guide-to-infoboard-designer/customizie-panel/setup/sources/', 'title': 'sources', 'section': 'insights', 'terminologies': ['Calculated Columns', 'Client', 'Color Palette', 'Common Dimension filters', 'Datasources', 'Dimensions', 'Expression', 'Infoboards', 'Infoboard Setup', 'Infoveave', 'Measures', 'Query', 'Value', 'Variables', 'View', 'View', 'Workflows'], 'char_count': 11349, 'word_count': 1871, 'page_content': 'This section provides detailed guidance and instructions on how to create a Datasource directly from an API. You follow the steps to set up API sources, configure HTTP request methods, enter the request URLs, define the headers and run the API. You therefore learn how to incorporate data from APIs into your widgets.\nHere is a step-by-step guide on how to effectively call an API for your Infoboard widgets.\nSelect\nSources\nand click\n+ Add New Source\n. Click\nUse API\n.\nName the source.\nChoose the request method (GET or POST).\nEnter the API URL.\nSelect content type (\njson\nor\nform-url-encoded\n).\nClick\nHeaders to add headers (e.g., Authorization).\nFor each header, define a name/key and a corresponding value.The name/key typically represents the type of information, like “Authorization” or “Content-Type.”\nAuthorization Header Often used for authentication, it might include a token or other credentials\nContent-Type Header\nSpecifies the format of the data being sent, such as “application/json” for JSON data. The value is the specific data associated with that name/key.\nClick\n+\nto add more headers.\nClick the delete icon to remove a header.\nIf needed, add request body in JSON. Add Auth info if needed (Auth URL, headers, client ID, secret).\nClick\nRun\nto test the API.\nClick\nSave\n.\nTo insert a new row using POST\nUse\nPOST\nrequest type. Enter the URL.\nAdd JSON in request body.\nPreview the table.\nChange to\nGET\nand preview again to confirm.\nCode source\nThis section shows how to create an Infoboard source using JavaScript.\nSelect', 'chunk_index': 4}, vector=None, shard_key=None, order_value=None)]
[ 2025-08-10 23:13:35,323 ] test_main.py:82 root - INFO - Retrieved result for point ID: 9b894708-b0a8-4ca4-8a7f-815112c39b4e
[ 2025-08-10 23:13:35,323 ] test_main.py:73 root - INFO - (Document(metadata={'_id': 'f4e5993d-79b7-4242-b43b-7ae26bafd40f', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='This section provides detailed guidance and instructions on how to create a Datasource directly from an API. You follow the steps to set up API sources, configure HTTP request methods, enter the request URLs, define the headers and run the API. You therefore learn how to incorporate data from APIs into your widgets.\nHere is a step-by-step guide on how to effectively call an API for your Infoboard widgets.\nSelect\nSources\nand click\n+ Add New Source\n. Click\nUse API\n.\nName the source.\nChoose the request method (GET or POST).\nEnter the API URL.\nSelect content type (\njson\nor\nform-url-encoded\n).\nClick\nHeaders to add headers (e.g., Authorization).\nFor each header, define a name/key and a corresponding value.The name/key typically represents the type of information, like “Authorization” or “Content-Type.”\nAuthorization Header Often used for authentication, it might include a token or other credentials\nContent-Type Header\nSpecifies the format of the data being sent, such as “application/json” for JSON data. The value is the specific data associated with that name/key.\nClick\n+\nto add more headers.\nClick the delete icon to remove a header.\nIf needed, add request body in JSON. Add Auth info if needed (Auth URL, headers, client ID, secret).\nClick\nRun\nto test the API.\nClick\nSave\n.\nTo insert a new row using POST\nUse\nPOST\nrequest type. Enter the URL.\nAdd JSON in request body.\nPreview the table.\nChange to\nGET\nand preview again to confirm.\nCode source\nThis section shows how to create an Infoboard source using JavaScript.\nSelect'), 0.33333334)
[ 2025-08-10 23:13:35,397 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-10 23:13:35,442 ] test_main.py:81 root - INFO - [Record(id='f4e5993d-79b7-4242-b43b-7ae26bafd40f', payload={'url': 'https://infoveave-help.pages.dev/insights-v8/guide-to-infoboard-designer/customizie-panel/setup/configure-infoboard/', 'title': 'configure-infoboard', 'section': 'insights', 'terminologies': ['Calculated Columns', 'Client', 'Color Palette', 'Common Dimension filters', 'Datasources', 'Dimensions', 'Expression', 'Infoboards', 'Infoboard Setup', 'Infoveave', 'Measures', 'Query', 'Value', 'Variables', 'View', 'View', 'Workflows'], 'char_count': 11349, 'word_count': 1871, 'page_content': 'This section provides detailed guidance and instructions on how to create a Datasource directly from an API. You follow the steps to set up API sources, configure HTTP request methods, enter the request URLs, define the headers and run the API. You therefore learn how to incorporate data from APIs into your widgets.\nHere is a step-by-step guide on how to effectively call an API for your Infoboard widgets.\nSelect\nSources\nand click\n+ Add New Source\n. Click\nUse API\n.\nName the source.\nChoose the request method (GET or POST).\nEnter the API URL.\nSelect content type (\njson\nor\nform-url-encoded\n).\nClick\nHeaders to add headers (e.g., Authorization).\nFor each header, define a name/key and a corresponding value.The name/key typically represents the type of information, like “Authorization” or “Content-Type.”\nAuthorization Header Often used for authentication, it might include a token or other credentials\nContent-Type Header\nSpecifies the format of the data being sent, such as “application/json” for JSON data. The value is the specific data associated with that name/key.\nClick\n+\nto add more headers.\nClick the delete icon to remove a header.\nIf needed, add request body in JSON. Add Auth info if needed (Auth URL, headers, client ID, secret).\nClick\nRun\nto test the API.\nClick\nSave\n.\nTo insert a new row using POST\nUse\nPOST\nrequest type. Enter the URL.\nAdd JSON in request body.\nPreview the table.\nChange to\nGET\nand preview again to confirm.\nCode source\nThis section shows how to create an Infoboard source using JavaScript.\nSelect', 'chunk_index': 4}, vector=None, shard_key=None, order_value=None)]
[ 2025-08-10 23:13:35,442 ] test_main.py:82 root - INFO - Retrieved result for point ID: f4e5993d-79b7-4242-b43b-7ae26bafd40f
[ 2025-08-10 23:13:35,442 ] test_main.py:73 root - INFO - (Document(metadata={'_id': '351b2240-9c72-4569-9c3a-605aa1a0405a', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='This section provides detailed guidance and instructions on how to create a Datasource directly from an API. You follow the steps to set up API sources, configure HTTP request methods, enter the request URLs, define the headers and run the API. You therefore learn how to incorporate data from APIs into your widgets.\nHere is a step-by-step guide on how to effectively call an API for your Infoboard widgets.\nSelect\nSources\nand click\n+ Add New Source\n. Click\nUse API\n.\nName the source.\nChoose the request method (GET or POST).\nEnter the API URL.\nSelect content type (\njson\nor\nform-url-encoded\n).\nClick\nHeaders to add headers (e.g., Authorization).\nFor each header, define a name/key and a corresponding value.The name/key typically represents the type of information, like “Authorization” or “Content-Type.”\nAuthorization Header Often used for authentication, it might include a token or other credentials\nContent-Type Header\nSpecifies the format of the data being sent, such as “application/json” for JSON data. The value is the specific data associated with that name/key.\nClick\n+\nto add more headers.\nClick the delete icon to remove a header.\nIf needed, add request body in JSON. Add Auth info if needed (Auth URL, headers, client ID, secret).\nClick\nRun\nto test the API.\nClick\nSave\n.\nTo insert a new row using POST\nUse\nPOST\nrequest type. Enter the URL.\nAdd JSON in request body.\nPreview the table.\nChange to\nGET\nand preview again to confirm.\nCode source\nThis section shows how to create an Infoboard source using JavaScript.\nSelect'), 0.25)
[ 2025-08-10 23:13:35,504 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-10 23:13:35,556 ] test_main.py:81 root - INFO - [Record(id='351b2240-9c72-4569-9c3a-605aa1a0405a', payload={'url': 'https://infoveave-help.pages.dev/insights-v8/guide-to-infoboard-designer/customize-panel/setup/', 'title': 'setup', 'section': 'insights', 'terminologies': ['Calculated Columns', 'Client', 'Color Palette', 'Common Dimension filters', 'Datasources', 'Dimensions', 'Expression', 'Infoboards', 'Infoboard Setup', 'Infoveave', 'Measures', 'Query', 'Value', 'Variables', 'View', 'View', 'Workflows'], 'char_count': 11349, 'word_count': 1871, 'page_content': 'This section provides detailed guidance and instructions on how to create a Datasource directly from an API. You follow the steps to set up API sources, configure HTTP request methods, enter the request URLs, define the headers and run the API. You therefore learn how to incorporate data from APIs into your widgets.\nHere is a step-by-step guide on how to effectively call an API for your Infoboard widgets.\nSelect\nSources\nand click\n+ Add New Source\n. Click\nUse API\n.\nName the source.\nChoose the request method (GET or POST).\nEnter the API URL.\nSelect content type (\njson\nor\nform-url-encoded\n).\nClick\nHeaders to add headers (e.g., Authorization).\nFor each header, define a name/key and a corresponding value.The name/key typically represents the type of information, like “Authorization” or “Content-Type.”\nAuthorization Header Often used for authentication, it might include a token or other credentials\nContent-Type Header\nSpecifies the format of the data being sent, such as “application/json” for JSON data. The value is the specific data associated with that name/key.\nClick\n+\nto add more headers.\nClick the delete icon to remove a header.\nIf needed, add request body in JSON. Add Auth info if needed (Auth URL, headers, client ID, secret).\nClick\nRun\nto test the API.\nClick\nSave\n.\nTo insert a new row using POST\nUse\nPOST\nrequest type. Enter the URL.\nAdd JSON in request body.\nPreview the table.\nChange to\nGET\nand preview again to confirm.\nCode source\nThis section shows how to create an Infoboard source using JavaScript.\nSelect', 'chunk_index': 4}, vector=None, shard_key=None, order_value=None)]
[ 2025-08-10 23:13:35,557 ] test_main.py:82 root - INFO - Retrieved result for point ID: 351b2240-9c72-4569-9c3a-605aa1a0405a
[ 2025-08-10 23:13:35,557 ] test_main.py:187 root - INFO - Loaded rewritten query user prompt.
[ 2025-08-10 23:13:36,623 ] _client.py:1025 httpx - INFO - HTTP Request: POST https://api.groq.com/openai/v1/chat/completions "HTTP/1.1 200 OK"
[ 2025-08-10 23:13:36,627 ] test_main.py:329 root - INFO - Response for query part 2: To add a Datasource from an API response in Infoveave, follow these steps:

1. **Navigate to Sources:** In the Infoveave interface, go to the "Sources" section.
2. **Add New Source:** Click the "+ Add New Source" button.
3. **Select "Use API":** Choose the "Use API" option to indicate you want to connect to an API.
4. **Name the Source:** Give your Datasource a descriptive name.
5. **Choose Request Method:** Select either "GET" or "POST" depending on the API's requirements.
6. **Enter API URL:**  Input the complete URL of the API endpoint you want to access.
7. **Select Content Type:** Choose the appropriate content type for the API, such as "json" or "form-url-encoded".
8. **Add Headers (if needed):**  If the API requires authentication or other headers, click "Headers" and add them with their corresponding values. Common headers include:
    * **Authorization:**  Often used for authentication, it might include a token or other credentials.
    * **Content-Type:** Specifies the format of the data being sent, such as "application/json" for JSON data.
9. **Add Request Body (if needed):** For POST requests, enter the JSON data as the request body.
10. **Run and Test:** Click "Run" to test the API connection and preview the data.
11. **Save:** Once you're satisfied with the connection, click "Save" to create the Datasource.



You can then use this Datasource to pull data into your Infoboard widgets and visualizations.
[ 2025-08-10 23:13:36,627 ] test_main.py:332 root - INFO - [(Document(metadata={'_id': '9b894708-b0a8-4ca4-8a7f-815112c39b4e', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='This section provides detailed guidance and instructions on how to create a Datasource directly from an API. You follow the steps to set up API sources, configure HTTP request methods, enter the request URLs, define the headers and run the API. You therefore learn how to incorporate data from APIs into your widgets.\nHere is a step-by-step guide on how to effectively call an API for your Infoboard widgets.\nSelect\nSources\nand click\n+ Add New Source\n. Click\nUse API\n.\nName the source.\nChoose the request method (GET or POST).\nEnter the API URL.\nSelect content type (\njson\nor\nform-url-encoded\n).\nClick\nHeaders to add headers (e.g., Authorization).\nFor each header, define a name/key and a corresponding value.The name/key typically represents the type of information, like “Authorization” or “Content-Type.”\nAuthorization Header Often used for authentication, it might include a token or other credentials\nContent-Type Header\nSpecifies the format of the data being sent, such as “application/json” for JSON data. The value is the specific data associated with that name/key.\nClick\n+\nto add more headers.\nClick the delete icon to remove a header.\nIf needed, add request body in JSON. Add Auth info if needed (Auth URL, headers, client ID, secret).\nClick\nRun\nto test the API.\nClick\nSave\n.\nTo insert a new row using POST\nUse\nPOST\nrequest type. Enter the URL.\nAdd JSON in request body.\nPreview the table.\nChange to\nGET\nand preview again to confirm.\nCode source\nThis section shows how to create an Infoboard source using JavaScript.\nSelect'), 0.5), (Document(metadata={'_id': 'f4e5993d-79b7-4242-b43b-7ae26bafd40f', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='This section provides detailed guidance and instructions on how to create a Datasource directly from an API. You follow the steps to set up API sources, configure HTTP request methods, enter the request URLs, define the headers and run the API. You therefore learn how to incorporate data from APIs into your widgets.\nHere is a step-by-step guide on how to effectively call an API for your Infoboard widgets.\nSelect\nSources\nand click\n+ Add New Source\n. Click\nUse API\n.\nName the source.\nChoose the request method (GET or POST).\nEnter the API URL.\nSelect content type (\njson\nor\nform-url-encoded\n).\nClick\nHeaders to add headers (e.g., Authorization).\nFor each header, define a name/key and a corresponding value.The name/key typically represents the type of information, like “Authorization” or “Content-Type.”\nAuthorization Header Often used for authentication, it might include a token or other credentials\nContent-Type Header\nSpecifies the format of the data being sent, such as “application/json” for JSON data. The value is the specific data associated with that name/key.\nClick\n+\nto add more headers.\nClick the delete icon to remove a header.\nIf needed, add request body in JSON. Add Auth info if needed (Auth URL, headers, client ID, secret).\nClick\nRun\nto test the API.\nClick\nSave\n.\nTo insert a new row using POST\nUse\nPOST\nrequest type. Enter the URL.\nAdd JSON in request body.\nPreview the table.\nChange to\nGET\nand preview again to confirm.\nCode source\nThis section shows how to create an Infoboard source using JavaScript.\nSelect'), 0.33333334), (Document(metadata={'_id': '351b2240-9c72-4569-9c3a-605aa1a0405a', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='This section provides detailed guidance and instructions on how to create a Datasource directly from an API. You follow the steps to set up API sources, configure HTTP request methods, enter the request URLs, define the headers and run the API. You therefore learn how to incorporate data from APIs into your widgets.\nHere is a step-by-step guide on how to effectively call an API for your Infoboard widgets.\nSelect\nSources\nand click\n+ Add New Source\n. Click\nUse API\n.\nName the source.\nChoose the request method (GET or POST).\nEnter the API URL.\nSelect content type (\njson\nor\nform-url-encoded\n).\nClick\nHeaders to add headers (e.g., Authorization).\nFor each header, define a name/key and a corresponding value.The name/key typically represents the type of information, like “Authorization” or “Content-Type.”\nAuthorization Header Often used for authentication, it might include a token or other credentials\nContent-Type Header\nSpecifies the format of the data being sent, such as “application/json” for JSON data. The value is the specific data associated with that name/key.\nClick\n+\nto add more headers.\nClick the delete icon to remove a header.\nIf needed, add request body in JSON. Add Auth info if needed (Auth URL, headers, client ID, secret).\nClick\nRun\nto test the API.\nClick\nSave\n.\nTo insert a new row using POST\nUse\nPOST\nrequest type. Enter the URL.\nAdd JSON in request body.\nPreview the table.\nChange to\nGET\nand preview again to confirm.\nCode source\nThis section shows how to create an Infoboard source using JavaScript.\nSelect'), 0.25)]
[ 2025-08-10 23:13:36,647 ] test_main.py:71 root - INFO - Building context with metadata from documents...
[ 2025-08-10 23:13:36,647 ] test_main.py:73 root - INFO - (Document(metadata={'_id': '9b894708-b0a8-4ca4-8a7f-815112c39b4e', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='This section provides detailed guidance and instructions on how to create a Datasource directly from an API. You follow the steps to set up API sources, configure HTTP request methods, enter the request URLs, define the headers and run the API. You therefore learn how to incorporate data from APIs into your widgets.\nHere is a step-by-step guide on how to effectively call an API for your Infoboard widgets.\nSelect\nSources\nand click\n+ Add New Source\n. Click\nUse API\n.\nName the source.\nChoose the request method (GET or POST).\nEnter the API URL.\nSelect content type (\njson\nor\nform-url-encoded\n).\nClick\nHeaders to add headers (e.g., Authorization).\nFor each header, define a name/key and a corresponding value.The name/key typically represents the type of information, like “Authorization” or “Content-Type.”\nAuthorization Header Often used for authentication, it might include a token or other credentials\nContent-Type Header\nSpecifies the format of the data being sent, such as “application/json” for JSON data. The value is the specific data associated with that name/key.\nClick\n+\nto add more headers.\nClick the delete icon to remove a header.\nIf needed, add request body in JSON. Add Auth info if needed (Auth URL, headers, client ID, secret).\nClick\nRun\nto test the API.\nClick\nSave\n.\nTo insert a new row using POST\nUse\nPOST\nrequest type. Enter the URL.\nAdd JSON in request body.\nPreview the table.\nChange to\nGET\nand preview again to confirm.\nCode source\nThis section shows how to create an Infoboard source using JavaScript.\nSelect'), 0.5)
[ 2025-08-10 23:13:36,703 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-10 23:13:36,747 ] test_main.py:81 root - INFO - [Record(id='9b894708-b0a8-4ca4-8a7f-815112c39b4e', payload={'url': 'https://infoveave-help.pages.dev/insights-v8/guide-to-infoboard-designer/customizie-panel/setup/sources/', 'title': 'sources', 'section': 'insights', 'terminologies': ['Calculated Columns', 'Client', 'Color Palette', 'Common Dimension filters', 'Datasources', 'Dimensions', 'Expression', 'Infoboards', 'Infoboard Setup', 'Infoveave', 'Measures', 'Query', 'Value', 'Variables', 'View', 'View', 'Workflows'], 'char_count': 11349, 'word_count': 1871, 'page_content': 'This section provides detailed guidance and instructions on how to create a Datasource directly from an API. You follow the steps to set up API sources, configure HTTP request methods, enter the request URLs, define the headers and run the API. You therefore learn how to incorporate data from APIs into your widgets.\nHere is a step-by-step guide on how to effectively call an API for your Infoboard widgets.\nSelect\nSources\nand click\n+ Add New Source\n. Click\nUse API\n.\nName the source.\nChoose the request method (GET or POST).\nEnter the API URL.\nSelect content type (\njson\nor\nform-url-encoded\n).\nClick\nHeaders to add headers (e.g., Authorization).\nFor each header, define a name/key and a corresponding value.The name/key typically represents the type of information, like “Authorization” or “Content-Type.”\nAuthorization Header Often used for authentication, it might include a token or other credentials\nContent-Type Header\nSpecifies the format of the data being sent, such as “application/json” for JSON data. The value is the specific data associated with that name/key.\nClick\n+\nto add more headers.\nClick the delete icon to remove a header.\nIf needed, add request body in JSON. Add Auth info if needed (Auth URL, headers, client ID, secret).\nClick\nRun\nto test the API.\nClick\nSave\n.\nTo insert a new row using POST\nUse\nPOST\nrequest type. Enter the URL.\nAdd JSON in request body.\nPreview the table.\nChange to\nGET\nand preview again to confirm.\nCode source\nThis section shows how to create an Infoboard source using JavaScript.\nSelect', 'chunk_index': 4}, vector=None, shard_key=None, order_value=None)]
[ 2025-08-10 23:13:36,748 ] test_main.py:82 root - INFO - Retrieved result for point ID: 9b894708-b0a8-4ca4-8a7f-815112c39b4e
[ 2025-08-10 23:13:36,748 ] test_main.py:73 root - INFO - (Document(metadata={'_id': 'f4e5993d-79b7-4242-b43b-7ae26bafd40f', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='This section provides detailed guidance and instructions on how to create a Datasource directly from an API. You follow the steps to set up API sources, configure HTTP request methods, enter the request URLs, define the headers and run the API. You therefore learn how to incorporate data from APIs into your widgets.\nHere is a step-by-step guide on how to effectively call an API for your Infoboard widgets.\nSelect\nSources\nand click\n+ Add New Source\n. Click\nUse API\n.\nName the source.\nChoose the request method (GET or POST).\nEnter the API URL.\nSelect content type (\njson\nor\nform-url-encoded\n).\nClick\nHeaders to add headers (e.g., Authorization).\nFor each header, define a name/key and a corresponding value.The name/key typically represents the type of information, like “Authorization” or “Content-Type.”\nAuthorization Header Often used for authentication, it might include a token or other credentials\nContent-Type Header\nSpecifies the format of the data being sent, such as “application/json” for JSON data. The value is the specific data associated with that name/key.\nClick\n+\nto add more headers.\nClick the delete icon to remove a header.\nIf needed, add request body in JSON. Add Auth info if needed (Auth URL, headers, client ID, secret).\nClick\nRun\nto test the API.\nClick\nSave\n.\nTo insert a new row using POST\nUse\nPOST\nrequest type. Enter the URL.\nAdd JSON in request body.\nPreview the table.\nChange to\nGET\nand preview again to confirm.\nCode source\nThis section shows how to create an Infoboard source using JavaScript.\nSelect'), 0.33333334)
[ 2025-08-10 23:13:36,811 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-10 23:13:36,812 ] test_main.py:81 root - INFO - [Record(id='f4e5993d-79b7-4242-b43b-7ae26bafd40f', payload={'url': 'https://infoveave-help.pages.dev/insights-v8/guide-to-infoboard-designer/customizie-panel/setup/configure-infoboard/', 'title': 'configure-infoboard', 'section': 'insights', 'terminologies': ['Calculated Columns', 'Client', 'Color Palette', 'Common Dimension filters', 'Datasources', 'Dimensions', 'Expression', 'Infoboards', 'Infoboard Setup', 'Infoveave', 'Measures', 'Query', 'Value', 'Variables', 'View', 'View', 'Workflows'], 'char_count': 11349, 'word_count': 1871, 'page_content': 'This section provides detailed guidance and instructions on how to create a Datasource directly from an API. You follow the steps to set up API sources, configure HTTP request methods, enter the request URLs, define the headers and run the API. You therefore learn how to incorporate data from APIs into your widgets.\nHere is a step-by-step guide on how to effectively call an API for your Infoboard widgets.\nSelect\nSources\nand click\n+ Add New Source\n. Click\nUse API\n.\nName the source.\nChoose the request method (GET or POST).\nEnter the API URL.\nSelect content type (\njson\nor\nform-url-encoded\n).\nClick\nHeaders to add headers (e.g., Authorization).\nFor each header, define a name/key and a corresponding value.The name/key typically represents the type of information, like “Authorization” or “Content-Type.”\nAuthorization Header Often used for authentication, it might include a token or other credentials\nContent-Type Header\nSpecifies the format of the data being sent, such as “application/json” for JSON data. The value is the specific data associated with that name/key.\nClick\n+\nto add more headers.\nClick the delete icon to remove a header.\nIf needed, add request body in JSON. Add Auth info if needed (Auth URL, headers, client ID, secret).\nClick\nRun\nto test the API.\nClick\nSave\n.\nTo insert a new row using POST\nUse\nPOST\nrequest type. Enter the URL.\nAdd JSON in request body.\nPreview the table.\nChange to\nGET\nand preview again to confirm.\nCode source\nThis section shows how to create an Infoboard source using JavaScript.\nSelect', 'chunk_index': 4}, vector=None, shard_key=None, order_value=None)]
[ 2025-08-10 23:13:36,812 ] test_main.py:82 root - INFO - Retrieved result for point ID: f4e5993d-79b7-4242-b43b-7ae26bafd40f
[ 2025-08-10 23:13:36,812 ] test_main.py:73 root - INFO - (Document(metadata={'_id': '351b2240-9c72-4569-9c3a-605aa1a0405a', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='This section provides detailed guidance and instructions on how to create a Datasource directly from an API. You follow the steps to set up API sources, configure HTTP request methods, enter the request URLs, define the headers and run the API. You therefore learn how to incorporate data from APIs into your widgets.\nHere is a step-by-step guide on how to effectively call an API for your Infoboard widgets.\nSelect\nSources\nand click\n+ Add New Source\n. Click\nUse API\n.\nName the source.\nChoose the request method (GET or POST).\nEnter the API URL.\nSelect content type (\njson\nor\nform-url-encoded\n).\nClick\nHeaders to add headers (e.g., Authorization).\nFor each header, define a name/key and a corresponding value.The name/key typically represents the type of information, like “Authorization” or “Content-Type.”\nAuthorization Header Often used for authentication, it might include a token or other credentials\nContent-Type Header\nSpecifies the format of the data being sent, such as “application/json” for JSON data. The value is the specific data associated with that name/key.\nClick\n+\nto add more headers.\nClick the delete icon to remove a header.\nIf needed, add request body in JSON. Add Auth info if needed (Auth URL, headers, client ID, secret).\nClick\nRun\nto test the API.\nClick\nSave\n.\nTo insert a new row using POST\nUse\nPOST\nrequest type. Enter the URL.\nAdd JSON in request body.\nPreview the table.\nChange to\nGET\nand preview again to confirm.\nCode source\nThis section shows how to create an Infoboard source using JavaScript.\nSelect'), 0.25)
[ 2025-08-10 23:13:36,871 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-10 23:13:36,873 ] test_main.py:81 root - INFO - [Record(id='351b2240-9c72-4569-9c3a-605aa1a0405a', payload={'url': 'https://infoveave-help.pages.dev/insights-v8/guide-to-infoboard-designer/customize-panel/setup/', 'title': 'setup', 'section': 'insights', 'terminologies': ['Calculated Columns', 'Client', 'Color Palette', 'Common Dimension filters', 'Datasources', 'Dimensions', 'Expression', 'Infoboards', 'Infoboard Setup', 'Infoveave', 'Measures', 'Query', 'Value', 'Variables', 'View', 'View', 'Workflows'], 'char_count': 11349, 'word_count': 1871, 'page_content': 'This section provides detailed guidance and instructions on how to create a Datasource directly from an API. You follow the steps to set up API sources, configure HTTP request methods, enter the request URLs, define the headers and run the API. You therefore learn how to incorporate data from APIs into your widgets.\nHere is a step-by-step guide on how to effectively call an API for your Infoboard widgets.\nSelect\nSources\nand click\n+ Add New Source\n. Click\nUse API\n.\nName the source.\nChoose the request method (GET or POST).\nEnter the API URL.\nSelect content type (\njson\nor\nform-url-encoded\n).\nClick\nHeaders to add headers (e.g., Authorization).\nFor each header, define a name/key and a corresponding value.The name/key typically represents the type of information, like “Authorization” or “Content-Type.”\nAuthorization Header Often used for authentication, it might include a token or other credentials\nContent-Type Header\nSpecifies the format of the data being sent, such as “application/json” for JSON data. The value is the specific data associated with that name/key.\nClick\n+\nto add more headers.\nClick the delete icon to remove a header.\nIf needed, add request body in JSON. Add Auth info if needed (Auth URL, headers, client ID, secret).\nClick\nRun\nto test the API.\nClick\nSave\n.\nTo insert a new row using POST\nUse\nPOST\nrequest type. Enter the URL.\nAdd JSON in request body.\nPreview the table.\nChange to\nGET\nand preview again to confirm.\nCode source\nThis section shows how to create an Infoboard source using JavaScript.\nSelect', 'chunk_index': 4}, vector=None, shard_key=None, order_value=None)]
[ 2025-08-10 23:13:36,873 ] test_main.py:82 root - INFO - Retrieved result for point ID: 351b2240-9c72-4569-9c3a-605aa1a0405a
[ 2025-08-10 23:13:36,873 ] test_main.py:318 root - INFO - Rewritten Query 3: Add Calculated Column
[ 2025-08-10 23:13:37,591 ] test_main.py:321 root - INFO - Embedding generated for query 3.
[ 2025-08-10 23:13:38,849 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points/query "HTTP/1.1 200 OK"
[ 2025-08-10 23:13:38,903 ] test_main.py:326 root - INFO - Processing query part 3: Add Calculated Column
[ 2025-08-10 23:13:38,924 ] test_main.py:71 root - INFO - Building context with metadata from documents...
[ 2025-08-10 23:13:38,924 ] test_main.py:73 root - INFO - (Document(metadata={'_id': '17c3977a-37bb-411f-867c-39d844d8decd', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='To learn how to add calculated columns in Infoveave, visit the section\nCalculated Columns\n.'), 0.5)
[ 2025-08-10 23:13:38,984 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-10 23:13:38,985 ] test_main.py:81 root - INFO - [Record(id='17c3977a-37bb-411f-867c-39d844d8decd', payload={'url': 'https://infoveave-help.pages.dev/insights-v8/configure-expression/trim/', 'title': 'trim', 'section': 'insights', 'terminologies': ['Calculated Columns', 'Expression', 'Infoveave', 'Value'], 'char_count': 1087, 'word_count': 171, 'page_content': 'To learn how to add calculated columns in Infoveave, visit the section\nCalculated Columns\n.', 'chunk_index': 1}, vector=None, shard_key=None, order_value=None)]
[ 2025-08-10 23:13:38,985 ] test_main.py:82 root - INFO - Retrieved result for point ID: 17c3977a-37bb-411f-867c-39d844d8decd
[ 2025-08-10 23:13:38,985 ] test_main.py:73 root - INFO - (Document(metadata={'_id': '90a41eca-7d26-4774-af4f-59db807255a3', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='To learn how to add calculated columns in Infoveave, visit the section\nCalculated Columns\n.'), 0.33333334)
[ 2025-08-10 23:13:39,050 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-10 23:13:39,050 ] test_main.py:81 root - INFO - [Record(id='90a41eca-7d26-4774-af4f-59db807255a3', payload={'url': 'https://infoveave-help.pages.dev/insights-v8/configure-expression/firstnonblank/', 'title': 'firstnonblank', 'section': 'insights', 'terminologies': ['Calculated Columns', 'Data Visualization', 'Expression', 'Infoveave', 'Value'], 'char_count': 1737, 'word_count': 247, 'page_content': 'To learn how to add calculated columns in Infoveave, visit the section\nCalculated Columns\n.', 'chunk_index': 2}, vector=None, shard_key=None, order_value=None)]
[ 2025-08-10 23:13:39,051 ] test_main.py:82 root - INFO - Retrieved result for point ID: 90a41eca-7d26-4774-af4f-59db807255a3
[ 2025-08-10 23:13:39,051 ] test_main.py:73 root - INFO - (Document(metadata={'_id': '6e08a086-23dc-490a-964e-432dfae3d8aa', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='To learn how to add calculated columns in Infoveave, visit the section\nCalculated Columns\n.'), 0.25)
[ 2025-08-10 23:13:39,115 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-10 23:13:39,117 ] test_main.py:81 root - INFO - [Record(id='6e08a086-23dc-490a-964e-432dfae3d8aa', payload={'url': 'https://infoveave-help.pages.dev/insights-v8/configure-expression/lower/', 'title': 'lower', 'section': 'insights', 'terminologies': ['Calculated Columns', 'Expression', 'Infoveave', 'Value'], 'char_count': 1087, 'word_count': 171, 'page_content': 'To learn how to add calculated columns in Infoveave, visit the section\nCalculated Columns\n.', 'chunk_index': 1}, vector=None, shard_key=None, order_value=None)]
[ 2025-08-10 23:13:39,117 ] test_main.py:82 root - INFO - Retrieved result for point ID: 6e08a086-23dc-490a-964e-432dfae3d8aa
[ 2025-08-10 23:13:39,117 ] test_main.py:187 root - INFO - Loaded rewritten query user prompt.
[ 2025-08-10 23:13:39,981 ] _client.py:1025 httpx - INFO - HTTP Request: POST https://api.groq.com/openai/v1/chat/completions "HTTP/1.1 200 OK"
[ 2025-08-10 23:13:39,983 ] test_main.py:329 root - INFO - Response for query part 3: To learn how to add calculated columns in Infoveave, visit the section  
Calculated Columns 

[https://infoveave-help.pages.dev/insights-v8/configure-expression/trim/](https://infoveave-help.pages.dev/insights-v8/configure-expression/trim/)
[ 2025-08-10 23:13:39,983 ] test_main.py:332 root - INFO - [(Document(metadata={'_id': '17c3977a-37bb-411f-867c-39d844d8decd', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='To learn how to add calculated columns in Infoveave, visit the section\nCalculated Columns\n.'), 0.5), (Document(metadata={'_id': '90a41eca-7d26-4774-af4f-59db807255a3', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='To learn how to add calculated columns in Infoveave, visit the section\nCalculated Columns\n.'), 0.33333334), (Document(metadata={'_id': '6e08a086-23dc-490a-964e-432dfae3d8aa', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='To learn how to add calculated columns in Infoveave, visit the section\nCalculated Columns\n.'), 0.25)]
[ 2025-08-10 23:13:40,011 ] test_main.py:71 root - INFO - Building context with metadata from documents...
[ 2025-08-10 23:13:40,011 ] test_main.py:73 root - INFO - (Document(metadata={'_id': '17c3977a-37bb-411f-867c-39d844d8decd', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='To learn how to add calculated columns in Infoveave, visit the section\nCalculated Columns\n.'), 0.5)
[ 2025-08-10 23:13:40,071 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-10 23:13:40,072 ] test_main.py:81 root - INFO - [Record(id='17c3977a-37bb-411f-867c-39d844d8decd', payload={'url': 'https://infoveave-help.pages.dev/insights-v8/configure-expression/trim/', 'title': 'trim', 'section': 'insights', 'terminologies': ['Calculated Columns', 'Expression', 'Infoveave', 'Value'], 'char_count': 1087, 'word_count': 171, 'page_content': 'To learn how to add calculated columns in Infoveave, visit the section\nCalculated Columns\n.', 'chunk_index': 1}, vector=None, shard_key=None, order_value=None)]
[ 2025-08-10 23:13:40,072 ] test_main.py:82 root - INFO - Retrieved result for point ID: 17c3977a-37bb-411f-867c-39d844d8decd
[ 2025-08-10 23:13:40,072 ] test_main.py:73 root - INFO - (Document(metadata={'_id': '90a41eca-7d26-4774-af4f-59db807255a3', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='To learn how to add calculated columns in Infoveave, visit the section\nCalculated Columns\n.'), 0.33333334)
[ 2025-08-10 23:13:40,150 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-10 23:13:40,151 ] test_main.py:81 root - INFO - [Record(id='90a41eca-7d26-4774-af4f-59db807255a3', payload={'url': 'https://infoveave-help.pages.dev/insights-v8/configure-expression/firstnonblank/', 'title': 'firstnonblank', 'section': 'insights', 'terminologies': ['Calculated Columns', 'Data Visualization', 'Expression', 'Infoveave', 'Value'], 'char_count': 1737, 'word_count': 247, 'page_content': 'To learn how to add calculated columns in Infoveave, visit the section\nCalculated Columns\n.', 'chunk_index': 2}, vector=None, shard_key=None, order_value=None)]
[ 2025-08-10 23:13:40,151 ] test_main.py:82 root - INFO - Retrieved result for point ID: 90a41eca-7d26-4774-af4f-59db807255a3
[ 2025-08-10 23:13:40,152 ] test_main.py:73 root - INFO - (Document(metadata={'_id': '6e08a086-23dc-490a-964e-432dfae3d8aa', '_collection_name': 'infoverve_helper_docs_hybrid'}, page_content='To learn how to add calculated columns in Infoveave, visit the section\nCalculated Columns\n.'), 0.25)
[ 2025-08-10 23:13:40,229 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_helper_docs_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-10 23:13:40,230 ] test_main.py:81 root - INFO - [Record(id='6e08a086-23dc-490a-964e-432dfae3d8aa', payload={'url': 'https://infoveave-help.pages.dev/insights-v8/configure-expression/lower/', 'title': 'lower', 'section': 'insights', 'terminologies': ['Calculated Columns', 'Expression', 'Infoveave', 'Value'], 'char_count': 1087, 'word_count': 171, 'page_content': 'To learn how to add calculated columns in Infoveave, visit the section\nCalculated Columns\n.', 'chunk_index': 1}, vector=None, shard_key=None, order_value=None)]
[ 2025-08-10 23:13:40,230 ] test_main.py:82 root - INFO - Retrieved result for point ID: 6e08a086-23dc-490a-964e-432dfae3d8aa
[ 2025-08-10 23:13:40,230 ] test_main.py:352 root - INFO - Found 3 final documents.
[ 2025-08-10 23:13:40,231 ] test_main.py:353 root - INFO - Context prepared for LLM response.
[ 2025-08-10 23:13:40,254 ] test_main.py:381 root - INFO - Generating final answer using LLM...
[ 2025-08-10 23:13:42,213 ] _client.py:1025 httpx - INFO - HTTP Request: POST https://api.groq.com/openai/v1/chat/completions "HTTP/1.1 200 OK"
[ 2025-08-10 23:13:42,214 ] test_main.py:383 root - INFO - Final LLM Response:

[ 2025-08-10 23:13:42,215 ] test_main.py:384 root - INFO - Let's break down how to create a workflow in Infoveave that uses an API, creates a Datasource, and then performs calculations on the data.

**1. Execute API Activity**

The **Execute API Activity** is your starting point. It allows you to fetch data from any RESTful API. Here's how it works:

*   **Connection:** You'll need to provide the API's URL, the HTTP method (GET, POST, PUT, DELETE), and any necessary headers for authentication or data formatting.
*   **Request Body:** For POST requests, you'll need to define the data you want to send to the API in the request body. This is often in JSON format.
*   **Response Handling:** Infoveave will handle parsing the API's response and making the data accessible within your workflow.

   You can learn more about the Execute API activity here: [https://infoveave-help.pages.dev/automation-v8/activities/execute-api/](https://infoveave-help.pages.dev/automation-v8/activities/execute-api/)

**2. Add a Datasource from the API Response**

Once you've successfully executed the API call, you'll want to create a Datasource from the response data. This will allow you to easily access and manipulate the data within your workflow.

*   **Navigate to Sources:** In the Infoveave interface, go to the "Sources" section.
*   **Add New Source:** Click the "+ Add New Source" button.
*   **Select "Use API":** Choose the "Use API" option to indicate you want to connect to an API.
*   **Name the Source:** Give your Datasource a descriptive name.
*   **Choose Request Method:** Select either "GET" or "POST" depending on the API's requirements.
*   **Enter API URL:**  Input the complete URL of the API endpoint you want to access.
*   **Select Content Type:** Choose the appropriate content type for the API, such as "json" or "form-url-encoded".
*   **Add Headers (if needed):**  If the API requires authentication or other headers, click "Headers" and add them with their corresponding values. Common headers include:
    *   **Authorization:**  Often used for authentication, it might include a token or other credentials.
    *   **Content-Type:** Specifies the format of the data being sent, such as "application/json" for JSON data.
*   **Add Request Body (if needed):** For POST requests, enter the JSON data as the request body.
*   **Run and Test:** Click "Run" to test the API connection and preview the data.
*   **Save:** Once you're satisfied with the connection, click "Save" to create the Datasource.

**3. Add Calculated Columns**

Now that you have your Datasource, you can add calculated columns to perform further analysis and derive new insights from the data.

*   **Navigate to Datasource:** Open the Datasource you created in the "Sources" section.
*   **Click "Add Column":**  Find the option to add a new column to your Datasource.
*   **Choose "Calculated":** Select the "Calculated" option to indicate you want to create a column based on existing data.
*   **Define the Calculation:** Use Infoveave's expression builder to write a formula that calculates the new column's values based on existing columns in your Datasource. You can use mathematical operators, logical functions, and other functions available in Infoveave's expression language.

   You can learn more about adding calculated columns in Infoveave here: [https://infoveave-help.pages.dev/insights-v8/configure-expression/trim/](https://infoveave-help.pages.dev/insights-v8/configure-expression/trim/)



Let me know if you have any more questions or would like to explore specific API examples or calculation scenarios!

[ 2025-08-10 23:13:42,216 ] test_main.py:391 root - INFO - LLM response saved to ./data/results/infoverve_helper_response.md
