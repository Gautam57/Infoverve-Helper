[ 2025-08-11 23:10:43,197 ] test_main.py:240 root - INFO - .........................Starting Infoverve Helper Application.........................
[ 2025-08-11 23:10:43,197 ] test_main.py:256 root - INFO - GROQ_API_KEY loaded.
[ 2025-08-11 23:10:43,212 ] test_main.py:280 root - INFO - Embedding model initialized.
[ 2025-08-11 23:10:43,347 ] _client.py:1025 httpx - INFO - HTTP Request: GET http://ai.infoveave.cloud:6333 "HTTP/1.1 200 OK"
[ 2025-08-11 23:10:43,348 ] test_main.py:284 root - INFO - Connected to Qdrant.
[ 2025-08-11 23:10:43,466 ] _client.py:1025 httpx - INFO - HTTP Request: GET http://ai.infoveave.cloud:6333/collections "HTTP/1.1 200 OK"
[ 2025-08-11 23:10:43,468 ] test_main.py:288 root - INFO - Qdrant collections retrieved.
[ 2025-08-11 23:10:43,468 ] test_main.py:295 root - INFO - Using collection: infoverve_docs_kg_hybrid
[ 2025-08-11 23:10:44,511 ] test_main.py:298 root - INFO - Sparse embeddings initialized.
[ 2025-08-11 23:10:44,599 ] _client.py:1025 httpx - INFO - HTTP Request: GET http://ai.infoveave.cloud:6333/collections/infoverve_docs_kg_hybrid "HTTP/1.1 200 OK"
[ 2025-08-11 23:10:46,858 ] _client.py:1025 httpx - INFO - HTTP Request: GET http://ai.infoveave.cloud:6333/collections/infoverve_docs_kg_hybrid "HTTP/1.1 200 OK"
[ 2025-08-11 23:10:46,860 ] test_main.py:310 root - INFO - QdrantVectorStore initialized.
[ 2025-08-11 23:10:46,894 ] test_main.py:316 root - INFO - LLM initialized.
[ 2025-08-11 23:10:47,776 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_docs_kg_hybrid/points/query "HTTP/1.1 200 OK"
[ 2025-08-11 23:10:48,829 ] test_main.py:338 root - INFO - Original query embedding generated.
[ 2025-08-11 23:10:48,850 ] test_main.py:71 root - INFO - Building context with metadata from documents...
[ 2025-08-11 23:10:48,920 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_docs_kg_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-11 23:10:48,922 ] test_main.py:81 root - INFO - [Record(id='af1d6067-3d6b-46bb-ab0f-f276854e4fe7', payload={'url': 'https://infoveave-help.pages.dev/automation-v8/workflows/define-workflow/workflow-alerts-2/', 'title': 'workflow-alerts-2', 'section': 'automation', 'terminologies': ['Alerts', 'Infoveave', 'Workflows', 'Workflow Alerts'], 'char_count': 3832, 'word_count': 620, 'page_content': 'Workflow Alerts | Infoveave Help\nSkip to content\nWorkflow Alerts', 'chunk_index': 0, 'entities': [{'name': 'Alerts', 'type': 'Concept'}, {'name': 'Infoveave', 'type': 'Concept'}, {'name': 'Workflows', 'type': 'Concept'}, {'name': 'Workflow Alerts', 'type': 'Concept'}, {'name': 'workflow-alerts-2', 'type': 'Widget'}, {'name': 'automation', 'type': 'Section'}], 'triplets': [['workflow-alerts-2', 'belongs_to', 'automation'], ['workflow-alerts-2', 'relates_to', 'Alerts'], ['workflow-alerts-2', 'relates_to', 'Infoveave'], ['workflow-alerts-2', 'relates_to', 'Workflows'], ['workflow-alerts-2', 'relates_to', 'Workflow Alerts']]}, vector=None, shard_key=None, order_value=None)]
[ 2025-08-11 23:10:48,922 ] test_main.py:82 root - INFO - Retrieved result for point ID: af1d6067-3d6b-46bb-ab0f-f276854e4fe7
[ 2025-08-11 23:10:48,984 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_docs_kg_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-11 23:10:49,034 ] test_main.py:81 root - INFO - [Record(id='c5602d79-e027-49ad-8532-ac56f7ea0bad', payload={'url': 'https://infoveave-help.pages.dev/journey/automate-workflows/', 'title': 'automate-workflows', 'section': 'automation', 'terminologies': ['Connections', 'Data Transformation', 'Infoveave', 'Workflows'], 'char_count': 978, 'word_count': 139, 'page_content': 'Automate workflows | Infoveave Help\nSkip to content\nAutomate workflows\nFetch Excel files from remote locations and upload to a database\nImport your file\nTransform your data\nUpload to your storage database\nSend workflow summary', 'chunk_index': 0, 'entities': [{'name': 'Connections', 'type': 'Concept'}, {'name': 'Data Transformation', 'type': 'Concept'}, {'name': 'Infoveave', 'type': 'Concept'}, {'name': 'Workflows', 'type': 'Concept'}, {'name': 'automate-workflows', 'type': 'Widget'}, {'name': 'automation', 'type': 'Section'}], 'triplets': [['automate-workflows', 'belongs_to', 'automation'], ['automate-workflows', 'relates_to', 'Connections'], ['automate-workflows', 'relates_to', 'Data Transformation'], ['automate-workflows', 'relates_to', 'Infoveave'], ['automate-workflows', 'relates_to', 'Workflows']]}, vector=None, shard_key=None, order_value=None)]
[ 2025-08-11 23:10:49,034 ] test_main.py:82 root - INFO - Retrieved result for point ID: c5602d79-e027-49ad-8532-ac56f7ea0bad
[ 2025-08-11 23:10:49,112 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_docs_kg_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-11 23:10:49,154 ] test_main.py:81 root - INFO - [Record(id='9bb3b909-b9f5-4755-b858-5a9f50e52c59', payload={'url': 'https://infoveave-help.pages.dev/automation-v8/workflows/manage-workflow/', 'title': 'manage-workflow', 'section': 'automation', 'terminologies': ['Automation', 'Cron trigger', 'Infoveave', 'Roles', 'Version history', 'View', 'View', 'Workflows'], 'char_count': 5533, 'word_count': 916, 'page_content': 'Managing Workflow | Infoveave Help\nSkip to content\nManaging Workflow Manage Infoveave Workflows with the flexibility and control you need to streamline your data processing and automation activities', 'chunk_index': 0, 'entities': [{'name': 'Automation', 'type': 'Concept'}, {'name': 'Cron trigger', 'type': 'Concept'}, {'name': 'Infoveave', 'type': 'Concept'}, {'name': 'Roles', 'type': 'Concept'}, {'name': 'Version history', 'type': 'Concept'}, {'name': 'View', 'type': 'Concept'}, {'name': 'View', 'type': 'Concept'}, {'name': 'Workflows', 'type': 'Concept'}, {'name': 'manage-workflow', 'type': 'Widget'}, {'name': 'automation', 'type': 'Section'}], 'triplets': [['manage-workflow', 'belongs_to', 'automation'], ['manage-workflow', 'relates_to', 'Automation'], ['manage-workflow', 'relates_to', 'Cron trigger'], ['manage-workflow', 'relates_to', 'Infoveave'], ['manage-workflow', 'relates_to', 'Roles'], ['manage-workflow', 'relates_to', 'Version history'], ['manage-workflow', 'relates_to', 'View'], ['manage-workflow', 'relates_to', 'View'], ['manage-workflow', 'relates_to', 'Workflows']]}, vector=None, shard_key=None, order_value=None)]
[ 2025-08-11 23:10:49,154 ] test_main.py:82 root - INFO - Retrieved result for point ID: 9bb3b909-b9f5-4755-b858-5a9f50e52c59
[ 2025-08-11 23:10:49,208 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_docs_kg_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-11 23:10:49,257 ] test_main.py:81 root - INFO - [Record(id='5954da2e-cbd3-476d-8bb5-82170295fdf6', payload={'url': 'https://infoveave-help.pages.dev/automation-v8/jobs-v8/manage-jobs/', 'title': 'manage-jobs', 'section': 'automation', 'terminologies': ['Automation', 'Cron trigger', 'Infoveave', 'Roles', 'Version history', 'View', 'View', 'Workflows'], 'char_count': 5533, 'word_count': 916, 'page_content': 'Managing Workflow | Infoveave Help\nSkip to content\nManaging Workflow Manage Infoveave Workflows with the flexibility and control you need to streamline your data processing and automation activities', 'chunk_index': 0, 'entities': [{'name': 'Automation', 'type': 'Concept'}, {'name': 'Cron trigger', 'type': 'Concept'}, {'name': 'Infoveave', 'type': 'Concept'}, {'name': 'Roles', 'type': 'Concept'}, {'name': 'Version history', 'type': 'Concept'}, {'name': 'View', 'type': 'Concept'}, {'name': 'View', 'type': 'Concept'}, {'name': 'Workflows', 'type': 'Concept'}, {'name': 'manage-jobs', 'type': 'Widget'}, {'name': 'automation', 'type': 'Section'}], 'triplets': [['manage-jobs', 'belongs_to', 'automation'], ['manage-jobs', 'relates_to', 'Automation'], ['manage-jobs', 'relates_to', 'Cron trigger'], ['manage-jobs', 'relates_to', 'Infoveave'], ['manage-jobs', 'relates_to', 'Roles'], ['manage-jobs', 'relates_to', 'Version history'], ['manage-jobs', 'relates_to', 'View'], ['manage-jobs', 'relates_to', 'View'], ['manage-jobs', 'relates_to', 'Workflows']]}, vector=None, shard_key=None, order_value=None)]
[ 2025-08-11 23:10:49,258 ] test_main.py:82 root - INFO - Retrieved result for point ID: 5954da2e-cbd3-476d-8bb5-82170295fdf6
[ 2025-08-11 23:10:49,336 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_docs_kg_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-11 23:10:49,392 ] test_main.py:81 root - INFO - [Record(id='10302f38-8b90-44a9-be47-42654d212fc4', payload={'url': 'https://infoveave-help.pages.dev/automation-v8/jobs-v8/schedule-job/', 'title': 'schedule-job', 'section': 'automation', 'terminologies': ['Automation', 'Cron trigger', 'Emailhook trigger', 'Infoveave', 'Lists', 'Reports', 'Value', 'View', 'View', 'Webhook trigger', 'Workflows', 'Workflow Start trigger'], 'char_count': 5699, 'word_count': 937, 'page_content': 'Choose the days on which you want to execute the Workflow. By default, Infoveave sets it to every day. You can select specific days of the week, days of the month, or months.\nClick on the\nAdd', 'chunk_index': 5, 'entities': [{'name': 'Automation', 'type': 'Concept'}, {'name': 'Cron trigger', 'type': 'Concept'}, {'name': 'Emailhook trigger', 'type': 'Concept'}, {'name': 'Infoveave', 'type': 'Concept'}, {'name': 'Lists', 'type': 'Concept'}, {'name': 'Reports', 'type': 'Concept'}, {'name': 'Value', 'type': 'Concept'}, {'name': 'View', 'type': 'Concept'}, {'name': 'View', 'type': 'Concept'}, {'name': 'Webhook trigger', 'type': 'Concept'}, {'name': 'Workflows', 'type': 'Concept'}, {'name': 'Workflow Start trigger', 'type': 'Concept'}, {'name': 'schedule-job', 'type': 'Widget'}, {'name': 'automation', 'type': 'Section'}], 'triplets': [['schedule-job', 'belongs_to', 'automation'], ['schedule-job', 'relates_to', 'Automation'], ['schedule-job', 'relates_to', 'Cron trigger'], ['schedule-job', 'relates_to', 'Emailhook trigger'], ['schedule-job', 'relates_to', 'Infoveave'], ['schedule-job', 'relates_to', 'Lists'], ['schedule-job', 'relates_to', 'Reports'], ['schedule-job', 'relates_to', 'Value'], ['schedule-job', 'relates_to', 'View'], ['schedule-job', 'relates_to', 'View'], ['schedule-job', 'relates_to', 'Webhook trigger'], ['schedule-job', 'relates_to', 'Workflows'], ['schedule-job', 'relates_to', 'Workflow Start trigger']]}, vector=None, shard_key=None, order_value=None)]
[ 2025-08-11 23:10:49,393 ] test_main.py:82 root - INFO - Retrieved result for point ID: 10302f38-8b90-44a9-be47-42654d212fc4
[ 2025-08-11 23:10:49,449 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_docs_kg_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-11 23:10:49,491 ] test_main.py:81 root - INFO - [Record(id='f8526840-2aff-4f39-b492-4fe991efc3f5', payload={'url': 'https://infoveave-help.pages.dev/automation-v8/workflows/define-workflow/workflow-start/', 'title': 'workflow-start', 'section': 'automation', 'terminologies': ['Automation', 'Cron trigger', 'Emailhook trigger', 'Infoveave', 'Lists', 'Reports', 'Value', 'View', 'View', 'Webhook trigger', 'Workflows', 'Workflow Start trigger'], 'char_count': 5699, 'word_count': 937, 'page_content': 'Choose the days on which you want to execute the Workflow. By default, Infoveave sets it to every day. You can select specific days of the week, days of the month, or months.\nClick on the\nAdd', 'chunk_index': 5, 'entities': [{'name': 'Automation', 'type': 'Concept'}, {'name': 'Cron trigger', 'type': 'Concept'}, {'name': 'Emailhook trigger', 'type': 'Concept'}, {'name': 'Infoveave', 'type': 'Concept'}, {'name': 'Lists', 'type': 'Concept'}, {'name': 'Reports', 'type': 'Concept'}, {'name': 'Value', 'type': 'Concept'}, {'name': 'View', 'type': 'Concept'}, {'name': 'View', 'type': 'Concept'}, {'name': 'Webhook trigger', 'type': 'Concept'}, {'name': 'Workflows', 'type': 'Concept'}, {'name': 'Workflow Start trigger', 'type': 'Concept'}, {'name': 'workflow-start', 'type': 'Widget'}, {'name': 'automation', 'type': 'Section'}], 'triplets': [['workflow-start', 'belongs_to', 'automation'], ['workflow-start', 'relates_to', 'Automation'], ['workflow-start', 'relates_to', 'Cron trigger'], ['workflow-start', 'relates_to', 'Emailhook trigger'], ['workflow-start', 'relates_to', 'Infoveave'], ['workflow-start', 'relates_to', 'Lists'], ['workflow-start', 'relates_to', 'Reports'], ['workflow-start', 'relates_to', 'Value'], ['workflow-start', 'relates_to', 'View'], ['workflow-start', 'relates_to', 'View'], ['workflow-start', 'relates_to', 'Webhook trigger'], ['workflow-start', 'relates_to', 'Workflows'], ['workflow-start', 'relates_to', 'Workflow Start trigger']]}, vector=None, shard_key=None, order_value=None)]
[ 2025-08-11 23:10:49,491 ] test_main.py:82 root - INFO - Retrieved result for point ID: f8526840-2aff-4f39-b492-4fe991efc3f5
[ 2025-08-11 23:10:49,555 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_docs_kg_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-11 23:10:49,613 ] test_main.py:81 root - INFO - [Record(id='a7431116-9858-403e-9be5-86a8b5febbc7', payload={'url': 'https://infoveave-help.pages.dev/automation-v8/jobs-v8/schedule-job/', 'title': 'schedule-job', 'section': 'automation', 'terminologies': ['Automation', 'Cron trigger', 'Emailhook trigger', 'Infoveave', 'Lists', 'Reports', 'Value', 'View', 'View', 'Webhook trigger', 'Workflows', 'Workflow Start trigger'], 'char_count': 5699, 'word_count': 937, 'page_content': 'Workflow Start | Infoveave Help\nSkip to content\nWorkflow Start', 'chunk_index': 0, 'entities': [{'name': 'Automation', 'type': 'Concept'}, {'name': 'Cron trigger', 'type': 'Concept'}, {'name': 'Emailhook trigger', 'type': 'Concept'}, {'name': 'Infoveave', 'type': 'Concept'}, {'name': 'Lists', 'type': 'Concept'}, {'name': 'Reports', 'type': 'Concept'}, {'name': 'Value', 'type': 'Concept'}, {'name': 'View', 'type': 'Concept'}, {'name': 'View', 'type': 'Concept'}, {'name': 'Webhook trigger', 'type': 'Concept'}, {'name': 'Workflows', 'type': 'Concept'}, {'name': 'Workflow Start trigger', 'type': 'Concept'}, {'name': 'schedule-job', 'type': 'Widget'}, {'name': 'automation', 'type': 'Section'}], 'triplets': [['schedule-job', 'belongs_to', 'automation'], ['schedule-job', 'relates_to', 'Automation'], ['schedule-job', 'relates_to', 'Cron trigger'], ['schedule-job', 'relates_to', 'Emailhook trigger'], ['schedule-job', 'relates_to', 'Infoveave'], ['schedule-job', 'relates_to', 'Lists'], ['schedule-job', 'relates_to', 'Reports'], ['schedule-job', 'relates_to', 'Value'], ['schedule-job', 'relates_to', 'View'], ['schedule-job', 'relates_to', 'View'], ['schedule-job', 'relates_to', 'Webhook trigger'], ['schedule-job', 'relates_to', 'Workflows'], ['schedule-job', 'relates_to', 'Workflow Start trigger']]}, vector=None, shard_key=None, order_value=None)]
[ 2025-08-11 23:10:49,613 ] test_main.py:82 root - INFO - Retrieved result for point ID: a7431116-9858-403e-9be5-86a8b5febbc7
[ 2025-08-11 23:10:49,665 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_docs_kg_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-11 23:10:49,716 ] test_main.py:81 root - INFO - [Record(id='d5e69425-463f-4156-823e-09315f11033b', payload={'url': 'https://infoveave-help.pages.dev/automation-v8/workflows/define-workflow/workflow-start/', 'title': 'workflow-start', 'section': 'automation', 'terminologies': ['Automation', 'Cron trigger', 'Emailhook trigger', 'Infoveave', 'Lists', 'Reports', 'Value', 'View', 'View', 'Webhook trigger', 'Workflows', 'Workflow Start trigger'], 'char_count': 5699, 'word_count': 937, 'page_content': 'Workflow Start | Infoveave Help\nSkip to content\nWorkflow Start', 'chunk_index': 0, 'entities': [{'name': 'Automation', 'type': 'Concept'}, {'name': 'Cron trigger', 'type': 'Concept'}, {'name': 'Emailhook trigger', 'type': 'Concept'}, {'name': 'Infoveave', 'type': 'Concept'}, {'name': 'Lists', 'type': 'Concept'}, {'name': 'Reports', 'type': 'Concept'}, {'name': 'Value', 'type': 'Concept'}, {'name': 'View', 'type': 'Concept'}, {'name': 'View', 'type': 'Concept'}, {'name': 'Webhook trigger', 'type': 'Concept'}, {'name': 'Workflows', 'type': 'Concept'}, {'name': 'Workflow Start trigger', 'type': 'Concept'}, {'name': 'workflow-start', 'type': 'Widget'}, {'name': 'automation', 'type': 'Section'}], 'triplets': [['workflow-start', 'belongs_to', 'automation'], ['workflow-start', 'relates_to', 'Automation'], ['workflow-start', 'relates_to', 'Cron trigger'], ['workflow-start', 'relates_to', 'Emailhook trigger'], ['workflow-start', 'relates_to', 'Infoveave'], ['workflow-start', 'relates_to', 'Lists'], ['workflow-start', 'relates_to', 'Reports'], ['workflow-start', 'relates_to', 'Value'], ['workflow-start', 'relates_to', 'View'], ['workflow-start', 'relates_to', 'View'], ['workflow-start', 'relates_to', 'Webhook trigger'], ['workflow-start', 'relates_to', 'Workflows'], ['workflow-start', 'relates_to', 'Workflow Start trigger']]}, vector=None, shard_key=None, order_value=None)]
[ 2025-08-11 23:10:49,717 ] test_main.py:82 root - INFO - Retrieved result for point ID: d5e69425-463f-4156-823e-09315f11033b
[ 2025-08-11 23:10:49,802 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_docs_kg_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-11 23:10:49,846 ] test_main.py:81 root - INFO - [Record(id='cb2b37ce-ec3a-4f89-8adb-4ede16cb755b', payload={'url': 'https://infoveave-help.pages.dev/videos/', 'title': 'videos', 'section': 'videos', 'terminologies': ['Automation', 'Catalogues', 'Conditional Expressions', 'Custom Calendar', 'Datasources', 'Dimensions', 'Infoboards', 'Infoveave', 'Insights', 'Lists', 'Measures', 'My Organization', 'My Workspace', 'Query', 'Reports', 'SciPyR', 'What-If Analysis', 'What-If Formulae', 'Workflows', 'Workflow Execution Status'], 'char_count': 2430, 'word_count': 338, 'page_content': 'Creating Infoboard Using A Query\nCreate Infoboard Using A Query\nCreating Infoboard Using API\nCreate Infoboard Using API\nCreating Workflow in Infoveave\nCreating Workflows\nWorkflow Execution Status\nWorkflow Execution Status', 'chunk_index': 3, 'entities': [{'name': 'Automation', 'type': 'Concept'}, {'name': 'Catalogues', 'type': 'Concept'}, {'name': 'Conditional Expressions', 'type': 'Concept'}, {'name': 'Custom Calendar', 'type': 'Concept'}, {'name': 'Datasources', 'type': 'Concept'}, {'name': 'Dimensions', 'type': 'Concept'}, {'name': 'Infoboards', 'type': 'Concept'}, {'name': 'Infoveave', 'type': 'Concept'}, {'name': 'Insights', 'type': 'Concept'}, {'name': 'Lists', 'type': 'Concept'}, {'name': 'Measures', 'type': 'Concept'}, {'name': 'My Organization', 'type': 'Concept'}, {'name': 'My Workspace', 'type': 'Concept'}, {'name': 'Query', 'type': 'Concept'}, {'name': 'Reports', 'type': 'Concept'}, {'name': 'SciPyR', 'type': 'Concept'}, {'name': 'What-If Analysis', 'type': 'Concept'}, {'name': 'What-If Formulae', 'type': 'Concept'}, {'name': 'Workflows', 'type': 'Concept'}, {'name': 'Workflow Execution Status', 'type': 'Concept'}, {'name': 'videos', 'type': 'Widget'}, {'name': 'videos', 'type': 'Section'}], 'triplets': [['videos', 'belongs_to', 'videos'], ['videos', 'relates_to', 'Automation'], ['videos', 'relates_to', 'Catalogues'], ['videos', 'relates_to', 'Conditional Expressions'], ['videos', 'relates_to', 'Custom Calendar'], ['videos', 'relates_to', 'Datasources'], ['videos', 'relates_to', 'Dimensions'], ['videos', 'relates_to', 'Infoboards'], ['videos', 'relates_to', 'Infoveave'], ['videos', 'relates_to', 'Insights'], ['videos', 'relates_to', 'Lists'], ['videos', 'relates_to', 'Measures'], ['videos', 'relates_to', 'My Organization'], ['videos', 'relates_to', 'My Workspace'], ['videos', 'relates_to', 'Query'], ['videos', 'relates_to', 'Reports'], ['videos', 'relates_to', 'SciPyR'], ['videos', 'relates_to', 'What-If Analysis'], ['videos', 'relates_to', 'What-If Formulae'], ['videos', 'relates_to', 'Workflows'], ['videos', 'relates_to', 'Workflow Execution Status']]}, vector=None, shard_key=None, order_value=None)]
[ 2025-08-11 23:10:49,846 ] test_main.py:82 root - INFO - Retrieved result for point ID: cb2b37ce-ec3a-4f89-8adb-4ede16cb755b
[ 2025-08-11 23:10:49,921 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_docs_kg_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-11 23:10:49,922 ] test_main.py:81 root - INFO - [Record(id='08fad07f-1f32-42ba-a966-ad5c94fd510e', payload={'url': 'https://infoveave-help.pages.dev/automation-v8/jobs-v8/', 'title': 'jobs-v8', 'section': 'automation', 'terminologies': ['Designer Canvas', 'Infoveave', 'Insights', 'Workflows'], 'char_count': 1497, 'word_count': 224, 'page_content': 'Introducing Workflows | Infoveave Help\nSkip to content\nIntroducing Workflows', 'chunk_index': 0, 'entities': [{'name': 'Designer Canvas', 'type': 'Concept'}, {'name': 'Infoveave', 'type': 'Concept'}, {'name': 'Insights', 'type': 'Concept'}, {'name': 'Workflows', 'type': 'Concept'}, {'name': 'jobs-v8', 'type': 'Widget'}, {'name': 'automation', 'type': 'Section'}], 'triplets': [['jobs-v8', 'belongs_to', 'automation'], ['jobs-v8', 'relates_to', 'Designer Canvas'], ['jobs-v8', 'relates_to', 'Infoveave'], ['jobs-v8', 'relates_to', 'Insights'], ['jobs-v8', 'relates_to', 'Workflows']]}, vector=None, shard_key=None, order_value=None)]
[ 2025-08-11 23:10:49,922 ] test_main.py:82 root - INFO - Retrieved result for point ID: 08fad07f-1f32-42ba-a966-ad5c94fd510e
[ 2025-08-11 23:10:49,922 ] test_main.py:167 root - INFO - Top context prepared for query rewriting.
[ 2025-08-11 23:10:49,923 ] test_main.py:103 root - INFO - Building context with metadata from documents...
[ 2025-08-11 23:10:50,022 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_docs_kg_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-11 23:10:50,024 ] test_main.py:113 root - INFO - [Record(id='af1d6067-3d6b-46bb-ab0f-f276854e4fe7', payload={'url': 'https://infoveave-help.pages.dev/automation-v8/workflows/define-workflow/workflow-alerts-2/', 'title': 'workflow-alerts-2', 'section': 'automation', 'terminologies': ['Alerts', 'Infoveave', 'Workflows', 'Workflow Alerts'], 'char_count': 3832, 'word_count': 620, 'page_content': 'Workflow Alerts | Infoveave Help\nSkip to content\nWorkflow Alerts', 'chunk_index': 0, 'entities': [{'name': 'Alerts', 'type': 'Concept'}, {'name': 'Infoveave', 'type': 'Concept'}, {'name': 'Workflows', 'type': 'Concept'}, {'name': 'Workflow Alerts', 'type': 'Concept'}, {'name': 'workflow-alerts-2', 'type': 'Widget'}, {'name': 'automation', 'type': 'Section'}], 'triplets': [['workflow-alerts-2', 'belongs_to', 'automation'], ['workflow-alerts-2', 'relates_to', 'Alerts'], ['workflow-alerts-2', 'relates_to', 'Infoveave'], ['workflow-alerts-2', 'relates_to', 'Workflows'], ['workflow-alerts-2', 'relates_to', 'Workflow Alerts']]}, vector=None, shard_key=None, order_value=None)]
[ 2025-08-11 23:10:50,024 ] test_main.py:114 root - INFO - Retrieved result for point ID: af1d6067-3d6b-46bb-ab0f-f276854e4fe7
[ 2025-08-11 23:10:50,087 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_docs_kg_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-11 23:10:50,142 ] test_main.py:113 root - INFO - [Record(id='c5602d79-e027-49ad-8532-ac56f7ea0bad', payload={'url': 'https://infoveave-help.pages.dev/journey/automate-workflows/', 'title': 'automate-workflows', 'section': 'automation', 'terminologies': ['Connections', 'Data Transformation', 'Infoveave', 'Workflows'], 'char_count': 978, 'word_count': 139, 'page_content': 'Automate workflows | Infoveave Help\nSkip to content\nAutomate workflows\nFetch Excel files from remote locations and upload to a database\nImport your file\nTransform your data\nUpload to your storage database\nSend workflow summary', 'chunk_index': 0, 'entities': [{'name': 'Connections', 'type': 'Concept'}, {'name': 'Data Transformation', 'type': 'Concept'}, {'name': 'Infoveave', 'type': 'Concept'}, {'name': 'Workflows', 'type': 'Concept'}, {'name': 'automate-workflows', 'type': 'Widget'}, {'name': 'automation', 'type': 'Section'}], 'triplets': [['automate-workflows', 'belongs_to', 'automation'], ['automate-workflows', 'relates_to', 'Connections'], ['automate-workflows', 'relates_to', 'Data Transformation'], ['automate-workflows', 'relates_to', 'Infoveave'], ['automate-workflows', 'relates_to', 'Workflows']]}, vector=None, shard_key=None, order_value=None)]
[ 2025-08-11 23:10:50,142 ] test_main.py:114 root - INFO - Retrieved result for point ID: c5602d79-e027-49ad-8532-ac56f7ea0bad
[ 2025-08-11 23:10:50,204 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_docs_kg_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-11 23:10:50,247 ] test_main.py:113 root - INFO - [Record(id='9bb3b909-b9f5-4755-b858-5a9f50e52c59', payload={'url': 'https://infoveave-help.pages.dev/automation-v8/workflows/manage-workflow/', 'title': 'manage-workflow', 'section': 'automation', 'terminologies': ['Automation', 'Cron trigger', 'Infoveave', 'Roles', 'Version history', 'View', 'View', 'Workflows'], 'char_count': 5533, 'word_count': 916, 'page_content': 'Managing Workflow | Infoveave Help\nSkip to content\nManaging Workflow Manage Infoveave Workflows with the flexibility and control you need to streamline your data processing and automation activities', 'chunk_index': 0, 'entities': [{'name': 'Automation', 'type': 'Concept'}, {'name': 'Cron trigger', 'type': 'Concept'}, {'name': 'Infoveave', 'type': 'Concept'}, {'name': 'Roles', 'type': 'Concept'}, {'name': 'Version history', 'type': 'Concept'}, {'name': 'View', 'type': 'Concept'}, {'name': 'View', 'type': 'Concept'}, {'name': 'Workflows', 'type': 'Concept'}, {'name': 'manage-workflow', 'type': 'Widget'}, {'name': 'automation', 'type': 'Section'}], 'triplets': [['manage-workflow', 'belongs_to', 'automation'], ['manage-workflow', 'relates_to', 'Automation'], ['manage-workflow', 'relates_to', 'Cron trigger'], ['manage-workflow', 'relates_to', 'Infoveave'], ['manage-workflow', 'relates_to', 'Roles'], ['manage-workflow', 'relates_to', 'Version history'], ['manage-workflow', 'relates_to', 'View'], ['manage-workflow', 'relates_to', 'View'], ['manage-workflow', 'relates_to', 'Workflows']]}, vector=None, shard_key=None, order_value=None)]
[ 2025-08-11 23:10:50,248 ] test_main.py:114 root - INFO - Retrieved result for point ID: 9bb3b909-b9f5-4755-b858-5a9f50e52c59
[ 2025-08-11 23:10:50,406 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_docs_kg_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-11 23:10:50,443 ] test_main.py:113 root - INFO - [Record(id='5954da2e-cbd3-476d-8bb5-82170295fdf6', payload={'url': 'https://infoveave-help.pages.dev/automation-v8/jobs-v8/manage-jobs/', 'title': 'manage-jobs', 'section': 'automation', 'terminologies': ['Automation', 'Cron trigger', 'Infoveave', 'Roles', 'Version history', 'View', 'View', 'Workflows'], 'char_count': 5533, 'word_count': 916, 'page_content': 'Managing Workflow | Infoveave Help\nSkip to content\nManaging Workflow Manage Infoveave Workflows with the flexibility and control you need to streamline your data processing and automation activities', 'chunk_index': 0, 'entities': [{'name': 'Automation', 'type': 'Concept'}, {'name': 'Cron trigger', 'type': 'Concept'}, {'name': 'Infoveave', 'type': 'Concept'}, {'name': 'Roles', 'type': 'Concept'}, {'name': 'Version history', 'type': 'Concept'}, {'name': 'View', 'type': 'Concept'}, {'name': 'View', 'type': 'Concept'}, {'name': 'Workflows', 'type': 'Concept'}, {'name': 'manage-jobs', 'type': 'Widget'}, {'name': 'automation', 'type': 'Section'}], 'triplets': [['manage-jobs', 'belongs_to', 'automation'], ['manage-jobs', 'relates_to', 'Automation'], ['manage-jobs', 'relates_to', 'Cron trigger'], ['manage-jobs', 'relates_to', 'Infoveave'], ['manage-jobs', 'relates_to', 'Roles'], ['manage-jobs', 'relates_to', 'Version history'], ['manage-jobs', 'relates_to', 'View'], ['manage-jobs', 'relates_to', 'View'], ['manage-jobs', 'relates_to', 'Workflows']]}, vector=None, shard_key=None, order_value=None)]
[ 2025-08-11 23:10:50,443 ] test_main.py:114 root - INFO - Retrieved result for point ID: 5954da2e-cbd3-476d-8bb5-82170295fdf6
[ 2025-08-11 23:10:50,505 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_docs_kg_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-11 23:10:50,534 ] test_main.py:113 root - INFO - [Record(id='10302f38-8b90-44a9-be47-42654d212fc4', payload={'url': 'https://infoveave-help.pages.dev/automation-v8/jobs-v8/schedule-job/', 'title': 'schedule-job', 'section': 'automation', 'terminologies': ['Automation', 'Cron trigger', 'Emailhook trigger', 'Infoveave', 'Lists', 'Reports', 'Value', 'View', 'View', 'Webhook trigger', 'Workflows', 'Workflow Start trigger'], 'char_count': 5699, 'word_count': 937, 'page_content': 'Choose the days on which you want to execute the Workflow. By default, Infoveave sets it to every day. You can select specific days of the week, days of the month, or months.\nClick on the\nAdd', 'chunk_index': 5, 'entities': [{'name': 'Automation', 'type': 'Concept'}, {'name': 'Cron trigger', 'type': 'Concept'}, {'name': 'Emailhook trigger', 'type': 'Concept'}, {'name': 'Infoveave', 'type': 'Concept'}, {'name': 'Lists', 'type': 'Concept'}, {'name': 'Reports', 'type': 'Concept'}, {'name': 'Value', 'type': 'Concept'}, {'name': 'View', 'type': 'Concept'}, {'name': 'View', 'type': 'Concept'}, {'name': 'Webhook trigger', 'type': 'Concept'}, {'name': 'Workflows', 'type': 'Concept'}, {'name': 'Workflow Start trigger', 'type': 'Concept'}, {'name': 'schedule-job', 'type': 'Widget'}, {'name': 'automation', 'type': 'Section'}], 'triplets': [['schedule-job', 'belongs_to', 'automation'], ['schedule-job', 'relates_to', 'Automation'], ['schedule-job', 'relates_to', 'Cron trigger'], ['schedule-job', 'relates_to', 'Emailhook trigger'], ['schedule-job', 'relates_to', 'Infoveave'], ['schedule-job', 'relates_to', 'Lists'], ['schedule-job', 'relates_to', 'Reports'], ['schedule-job', 'relates_to', 'Value'], ['schedule-job', 'relates_to', 'View'], ['schedule-job', 'relates_to', 'View'], ['schedule-job', 'relates_to', 'Webhook trigger'], ['schedule-job', 'relates_to', 'Workflows'], ['schedule-job', 'relates_to', 'Workflow Start trigger']]}, vector=None, shard_key=None, order_value=None)]
[ 2025-08-11 23:10:50,535 ] test_main.py:114 root - INFO - Retrieved result for point ID: 10302f38-8b90-44a9-be47-42654d212fc4
[ 2025-08-11 23:10:50,596 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_docs_kg_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-11 23:10:50,644 ] test_main.py:113 root - INFO - [Record(id='f8526840-2aff-4f39-b492-4fe991efc3f5', payload={'url': 'https://infoveave-help.pages.dev/automation-v8/workflows/define-workflow/workflow-start/', 'title': 'workflow-start', 'section': 'automation', 'terminologies': ['Automation', 'Cron trigger', 'Emailhook trigger', 'Infoveave', 'Lists', 'Reports', 'Value', 'View', 'View', 'Webhook trigger', 'Workflows', 'Workflow Start trigger'], 'char_count': 5699, 'word_count': 937, 'page_content': 'Choose the days on which you want to execute the Workflow. By default, Infoveave sets it to every day. You can select specific days of the week, days of the month, or months.\nClick on the\nAdd', 'chunk_index': 5, 'entities': [{'name': 'Automation', 'type': 'Concept'}, {'name': 'Cron trigger', 'type': 'Concept'}, {'name': 'Emailhook trigger', 'type': 'Concept'}, {'name': 'Infoveave', 'type': 'Concept'}, {'name': 'Lists', 'type': 'Concept'}, {'name': 'Reports', 'type': 'Concept'}, {'name': 'Value', 'type': 'Concept'}, {'name': 'View', 'type': 'Concept'}, {'name': 'View', 'type': 'Concept'}, {'name': 'Webhook trigger', 'type': 'Concept'}, {'name': 'Workflows', 'type': 'Concept'}, {'name': 'Workflow Start trigger', 'type': 'Concept'}, {'name': 'workflow-start', 'type': 'Widget'}, {'name': 'automation', 'type': 'Section'}], 'triplets': [['workflow-start', 'belongs_to', 'automation'], ['workflow-start', 'relates_to', 'Automation'], ['workflow-start', 'relates_to', 'Cron trigger'], ['workflow-start', 'relates_to', 'Emailhook trigger'], ['workflow-start', 'relates_to', 'Infoveave'], ['workflow-start', 'relates_to', 'Lists'], ['workflow-start', 'relates_to', 'Reports'], ['workflow-start', 'relates_to', 'Value'], ['workflow-start', 'relates_to', 'View'], ['workflow-start', 'relates_to', 'View'], ['workflow-start', 'relates_to', 'Webhook trigger'], ['workflow-start', 'relates_to', 'Workflows'], ['workflow-start', 'relates_to', 'Workflow Start trigger']]}, vector=None, shard_key=None, order_value=None)]
[ 2025-08-11 23:10:50,644 ] test_main.py:114 root - INFO - Retrieved result for point ID: f8526840-2aff-4f39-b492-4fe991efc3f5
[ 2025-08-11 23:10:50,722 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_docs_kg_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-11 23:10:50,762 ] test_main.py:113 root - INFO - [Record(id='a7431116-9858-403e-9be5-86a8b5febbc7', payload={'url': 'https://infoveave-help.pages.dev/automation-v8/jobs-v8/schedule-job/', 'title': 'schedule-job', 'section': 'automation', 'terminologies': ['Automation', 'Cron trigger', 'Emailhook trigger', 'Infoveave', 'Lists', 'Reports', 'Value', 'View', 'View', 'Webhook trigger', 'Workflows', 'Workflow Start trigger'], 'char_count': 5699, 'word_count': 937, 'page_content': 'Workflow Start | Infoveave Help\nSkip to content\nWorkflow Start', 'chunk_index': 0, 'entities': [{'name': 'Automation', 'type': 'Concept'}, {'name': 'Cron trigger', 'type': 'Concept'}, {'name': 'Emailhook trigger', 'type': 'Concept'}, {'name': 'Infoveave', 'type': 'Concept'}, {'name': 'Lists', 'type': 'Concept'}, {'name': 'Reports', 'type': 'Concept'}, {'name': 'Value', 'type': 'Concept'}, {'name': 'View', 'type': 'Concept'}, {'name': 'View', 'type': 'Concept'}, {'name': 'Webhook trigger', 'type': 'Concept'}, {'name': 'Workflows', 'type': 'Concept'}, {'name': 'Workflow Start trigger', 'type': 'Concept'}, {'name': 'schedule-job', 'type': 'Widget'}, {'name': 'automation', 'type': 'Section'}], 'triplets': [['schedule-job', 'belongs_to', 'automation'], ['schedule-job', 'relates_to', 'Automation'], ['schedule-job', 'relates_to', 'Cron trigger'], ['schedule-job', 'relates_to', 'Emailhook trigger'], ['schedule-job', 'relates_to', 'Infoveave'], ['schedule-job', 'relates_to', 'Lists'], ['schedule-job', 'relates_to', 'Reports'], ['schedule-job', 'relates_to', 'Value'], ['schedule-job', 'relates_to', 'View'], ['schedule-job', 'relates_to', 'View'], ['schedule-job', 'relates_to', 'Webhook trigger'], ['schedule-job', 'relates_to', 'Workflows'], ['schedule-job', 'relates_to', 'Workflow Start trigger']]}, vector=None, shard_key=None, order_value=None)]
[ 2025-08-11 23:10:50,763 ] test_main.py:114 root - INFO - Retrieved result for point ID: a7431116-9858-403e-9be5-86a8b5febbc7
[ 2025-08-11 23:10:50,826 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_docs_kg_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-11 23:10:50,875 ] test_main.py:113 root - INFO - [Record(id='d5e69425-463f-4156-823e-09315f11033b', payload={'url': 'https://infoveave-help.pages.dev/automation-v8/workflows/define-workflow/workflow-start/', 'title': 'workflow-start', 'section': 'automation', 'terminologies': ['Automation', 'Cron trigger', 'Emailhook trigger', 'Infoveave', 'Lists', 'Reports', 'Value', 'View', 'View', 'Webhook trigger', 'Workflows', 'Workflow Start trigger'], 'char_count': 5699, 'word_count': 937, 'page_content': 'Workflow Start | Infoveave Help\nSkip to content\nWorkflow Start', 'chunk_index': 0, 'entities': [{'name': 'Automation', 'type': 'Concept'}, {'name': 'Cron trigger', 'type': 'Concept'}, {'name': 'Emailhook trigger', 'type': 'Concept'}, {'name': 'Infoveave', 'type': 'Concept'}, {'name': 'Lists', 'type': 'Concept'}, {'name': 'Reports', 'type': 'Concept'}, {'name': 'Value', 'type': 'Concept'}, {'name': 'View', 'type': 'Concept'}, {'name': 'View', 'type': 'Concept'}, {'name': 'Webhook trigger', 'type': 'Concept'}, {'name': 'Workflows', 'type': 'Concept'}, {'name': 'Workflow Start trigger', 'type': 'Concept'}, {'name': 'workflow-start', 'type': 'Widget'}, {'name': 'automation', 'type': 'Section'}], 'triplets': [['workflow-start', 'belongs_to', 'automation'], ['workflow-start', 'relates_to', 'Automation'], ['workflow-start', 'relates_to', 'Cron trigger'], ['workflow-start', 'relates_to', 'Emailhook trigger'], ['workflow-start', 'relates_to', 'Infoveave'], ['workflow-start', 'relates_to', 'Lists'], ['workflow-start', 'relates_to', 'Reports'], ['workflow-start', 'relates_to', 'Value'], ['workflow-start', 'relates_to', 'View'], ['workflow-start', 'relates_to', 'View'], ['workflow-start', 'relates_to', 'Webhook trigger'], ['workflow-start', 'relates_to', 'Workflows'], ['workflow-start', 'relates_to', 'Workflow Start trigger']]}, vector=None, shard_key=None, order_value=None)]
[ 2025-08-11 23:10:50,876 ] test_main.py:114 root - INFO - Retrieved result for point ID: d5e69425-463f-4156-823e-09315f11033b
[ 2025-08-11 23:10:50,952 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_docs_kg_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-11 23:10:50,996 ] test_main.py:113 root - INFO - [Record(id='cb2b37ce-ec3a-4f89-8adb-4ede16cb755b', payload={'url': 'https://infoveave-help.pages.dev/videos/', 'title': 'videos', 'section': 'videos', 'terminologies': ['Automation', 'Catalogues', 'Conditional Expressions', 'Custom Calendar', 'Datasources', 'Dimensions', 'Infoboards', 'Infoveave', 'Insights', 'Lists', 'Measures', 'My Organization', 'My Workspace', 'Query', 'Reports', 'SciPyR', 'What-If Analysis', 'What-If Formulae', 'Workflows', 'Workflow Execution Status'], 'char_count': 2430, 'word_count': 338, 'page_content': 'Creating Infoboard Using A Query\nCreate Infoboard Using A Query\nCreating Infoboard Using API\nCreate Infoboard Using API\nCreating Workflow in Infoveave\nCreating Workflows\nWorkflow Execution Status\nWorkflow Execution Status', 'chunk_index': 3, 'entities': [{'name': 'Automation', 'type': 'Concept'}, {'name': 'Catalogues', 'type': 'Concept'}, {'name': 'Conditional Expressions', 'type': 'Concept'}, {'name': 'Custom Calendar', 'type': 'Concept'}, {'name': 'Datasources', 'type': 'Concept'}, {'name': 'Dimensions', 'type': 'Concept'}, {'name': 'Infoboards', 'type': 'Concept'}, {'name': 'Infoveave', 'type': 'Concept'}, {'name': 'Insights', 'type': 'Concept'}, {'name': 'Lists', 'type': 'Concept'}, {'name': 'Measures', 'type': 'Concept'}, {'name': 'My Organization', 'type': 'Concept'}, {'name': 'My Workspace', 'type': 'Concept'}, {'name': 'Query', 'type': 'Concept'}, {'name': 'Reports', 'type': 'Concept'}, {'name': 'SciPyR', 'type': 'Concept'}, {'name': 'What-If Analysis', 'type': 'Concept'}, {'name': 'What-If Formulae', 'type': 'Concept'}, {'name': 'Workflows', 'type': 'Concept'}, {'name': 'Workflow Execution Status', 'type': 'Concept'}, {'name': 'videos', 'type': 'Widget'}, {'name': 'videos', 'type': 'Section'}], 'triplets': [['videos', 'belongs_to', 'videos'], ['videos', 'relates_to', 'Automation'], ['videos', 'relates_to', 'Catalogues'], ['videos', 'relates_to', 'Conditional Expressions'], ['videos', 'relates_to', 'Custom Calendar'], ['videos', 'relates_to', 'Datasources'], ['videos', 'relates_to', 'Dimensions'], ['videos', 'relates_to', 'Infoboards'], ['videos', 'relates_to', 'Infoveave'], ['videos', 'relates_to', 'Insights'], ['videos', 'relates_to', 'Lists'], ['videos', 'relates_to', 'Measures'], ['videos', 'relates_to', 'My Organization'], ['videos', 'relates_to', 'My Workspace'], ['videos', 'relates_to', 'Query'], ['videos', 'relates_to', 'Reports'], ['videos', 'relates_to', 'SciPyR'], ['videos', 'relates_to', 'What-If Analysis'], ['videos', 'relates_to', 'What-If Formulae'], ['videos', 'relates_to', 'Workflows'], ['videos', 'relates_to', 'Workflow Execution Status']]}, vector=None, shard_key=None, order_value=None)]
[ 2025-08-11 23:10:50,996 ] test_main.py:114 root - INFO - Retrieved result for point ID: cb2b37ce-ec3a-4f89-8adb-4ede16cb755b
[ 2025-08-11 23:10:51,069 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_docs_kg_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-11 23:10:51,070 ] test_main.py:113 root - INFO - [Record(id='08fad07f-1f32-42ba-a966-ad5c94fd510e', payload={'url': 'https://infoveave-help.pages.dev/automation-v8/jobs-v8/', 'title': 'jobs-v8', 'section': 'automation', 'terminologies': ['Designer Canvas', 'Infoveave', 'Insights', 'Workflows'], 'char_count': 1497, 'word_count': 224, 'page_content': 'Introducing Workflows | Infoveave Help\nSkip to content\nIntroducing Workflows', 'chunk_index': 0, 'entities': [{'name': 'Designer Canvas', 'type': 'Concept'}, {'name': 'Infoveave', 'type': 'Concept'}, {'name': 'Insights', 'type': 'Concept'}, {'name': 'Workflows', 'type': 'Concept'}, {'name': 'jobs-v8', 'type': 'Widget'}, {'name': 'automation', 'type': 'Section'}], 'triplets': [['jobs-v8', 'belongs_to', 'automation'], ['jobs-v8', 'relates_to', 'Designer Canvas'], ['jobs-v8', 'relates_to', 'Infoveave'], ['jobs-v8', 'relates_to', 'Insights'], ['jobs-v8', 'relates_to', 'Workflows']]}, vector=None, shard_key=None, order_value=None)]
[ 2025-08-11 23:10:51,071 ] test_main.py:114 root - INFO - Retrieved result for point ID: 08fad07f-1f32-42ba-a966-ad5c94fd510e
[ 2025-08-11 23:10:51,071 ] test_main.py:127 root - INFO - Querying Neo4j for entities: [('automate-workflows', 'Widget'), ('Infoveave', 'Concept'), ('Automation', 'Concept'), ('Query', 'Concept'), ('videos', 'Section'), ('Connections', 'Concept'), ('jobs-v8', 'Widget'), ('workflow-start', 'Widget'), ('videos', 'Widget'), ('Emailhook trigger', 'Concept'), ('Infoboards', 'Concept'), ('Datasources', 'Concept'), ('manage-jobs', 'Widget'), ('Catalogues', 'Concept'), ('What-If Analysis', 'Concept'), ('Alerts', 'Concept'), ('automation', 'Section'), ('What-If Formulae', 'Concept'), ('schedule-job', 'Widget'), ('My Workspace', 'Concept'), ('View', 'Concept'), ('Reports', 'Concept'), ('Workflow Start trigger', 'Concept'), ('Conditional Expressions', 'Concept'), ('Webhook trigger', 'Concept'), ('manage-workflow', 'Widget'), ('Workflows', 'Concept'), ('SciPyR', 'Concept'), ('Lists', 'Concept'), ('Insights', 'Concept'), ('Version history', 'Concept'), ('Data Transformation', 'Concept'), ('Measures', 'Concept'), ('Value', 'Concept'), ('Designer Canvas', 'Concept'), ('Cron trigger', 'Concept'), ('My Organization', 'Concept'), ('Roles', 'Concept'), ('Dimensions', 'Concept'), ('Workflow Alerts', 'Concept'), ('Custom Calendar', 'Concept'), ('Workflow Execution Status', 'Concept'), ('workflow-alerts-2', 'Widget')] with hops=1 and top_n=20
[ 2025-08-11 23:10:52,177 ] result.py:337 neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.FeatureDeprecationWarning} {category: DEPRECATION} {title: This feature is deprecated and will be removed in future versions.} {description: CALL subquery without a variable scope clause is now deprecated. Use CALL () { ... }} {position: line: 2, column: 13, offset: 13} for query: "\n            CALL {\n                    UNWIND $entities AS ent\n                    MATCH (e:`Concept` {name: ent[0]})-[r]-(m)\n                    WHERE ent[1] = 'Concept'\n                    RETURN e.name AS head, type(r) AS rel, m.name AS tail, COUNT(*) AS freq\n                    UNION\n                    UNWIND $entities AS ent\n                    MATCH (e:`Widget` {name: ent[0]})-[r]-(m)\n                    WHERE ent[1] = 'Widget'\n                    RETURN e.name AS head, type(r) AS rel, m.name AS tail, COUNT(*) AS freq\n                    UNION\n                    UNWIND $entities AS ent\n                    MATCH (e:`Section` {name: ent[0]})-[r]-(m)\n                    WHERE ent[1] = 'Section'\n                    RETURN e.name AS head, type(r) AS rel, m.name AS tail, COUNT(*) AS freq\n                }\n                RETURN head, rel, tail, freq\n                ORDER BY freq DESC\n            LIMIT $limit\n\n            "
[ 2025-08-11 23:10:52,177 ] test_main.py:158 root - INFO - [('videos', 'belongs_to', 'videos'), ('Insights', 'relates_to', 'data-quality'), ('Infoveave', 'relates_to', 'administration'), ('My Workspace', 'relates_to', 'videos'), ('Workflows', 'relates_to', 'videos'), ('Lists', 'relates_to', 'videos'), ('Automation', 'relates_to', 'videos'), ('Infoboards', 'relates_to', 'videos'), ('What-If Analysis', 'relates_to', 'videos'), ('What-If Formulae', 'relates_to', 'videos'), ('Reports', 'relates_to', 'videos'), ('Conditional Expressions', 'relates_to', 'videos'), ('SciPyR', 'relates_to', 'videos'), ('Infoveave', 'relates_to', 'data-quality'), ('Datasources', 'relates_to', 'videos'), ('Infoveave', 'relates_to', 'videos'), ('Query', 'relates_to', 'videos'), ('Connections', 'relates_to', 'administration'), ('Catalogues', 'relates_to', 'videos'), ('View', 'relates_to', 'administration')]
[ 2025-08-11 23:10:52,177 ] test_main.py:159 root - INFO - Retrieved 20 triplets from Neo4j.
[ 2025-08-11 23:10:52,177 ] test_main.py:184 root - INFO - Knowledge graph facts prepared for query rewriting.
[ 2025-08-11 23:10:52,179 ] test_main.py:189 root - INFO - Loaded rewritten query system prompt.
[ 2025-08-11 23:10:52,179 ] test_main.py:202 root - INFO - Loaded rewritten query user prompt.
[ 2025-08-11 23:10:52,718 ] _client.py:1025 httpx - INFO - HTTP Request: POST https://api.groq.com/openai/v1/chat/completions "HTTP/1.1 200 OK"
[ 2025-08-11 23:10:52,723 ] test_main.py:343 root - INFO - Rewritten query: Execute Query|Send Email
[ 2025-08-11 23:10:52,723 ] test_main.py:350 root - INFO - Rewritten query parts: ['Execute Query', 'Send Email']
[ 2025-08-11 23:10:52,723 ] test_main.py:359 root - INFO - Rewritten Query 1: Execute Query
[ 2025-08-11 23:10:53,199 ] test_main.py:362 root - INFO - Embedding generated for query 1.
[ 2025-08-11 23:10:54,250 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_docs_kg_hybrid/points/query "HTTP/1.1 200 OK"
[ 2025-08-11 23:10:54,291 ] test_main.py:367 root - INFO - Processing query part 1: Execute Query
[ 2025-08-11 23:10:54,311 ] test_main.py:71 root - INFO - Building context with metadata from documents...
[ 2025-08-11 23:10:54,368 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_docs_kg_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-11 23:10:54,369 ] test_main.py:81 root - INFO - [Record(id='a4a1b9fd-9e7b-4f8c-8b01-1c2d5783a892', payload={'url': 'https://infoveave-help.pages.dev/automation-v8/activities/execute-query/', 'title': 'execute-query', 'section': 'automation', 'terminologies': ['Infoveave', 'Query', 'Reports', 'Value'], 'char_count': 2330, 'word_count': 363, 'page_content': 'Execute Query | Infoveave Help\nSkip to content\nExecute Query\nDescription\nThe\nExecute Query', 'chunk_index': 0, 'entities': [{'name': 'Infoveave', 'type': 'Concept'}, {'name': 'Query', 'type': 'Concept'}, {'name': 'Reports', 'type': 'Concept'}, {'name': 'Value', 'type': 'Concept'}, {'name': 'execute-query', 'type': 'Widget'}, {'name': 'automation', 'type': 'Section'}], 'triplets': [['execute-query', 'belongs_to', 'automation'], ['execute-query', 'relates_to', 'Infoveave'], ['execute-query', 'relates_to', 'Query'], ['execute-query', 'relates_to', 'Reports'], ['execute-query', 'relates_to', 'Value']]}, vector=None, shard_key=None, order_value=None)]
[ 2025-08-11 23:10:54,369 ] test_main.py:82 root - INFO - Retrieved result for point ID: a4a1b9fd-9e7b-4f8c-8b01-1c2d5783a892
[ 2025-08-11 23:10:54,442 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_docs_kg_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-11 23:10:54,482 ] test_main.py:81 root - INFO - [Record(id='8b218577-677d-44ae-bef7-35b5bd2131bf', payload={'url': 'https://infoveave-help.pages.dev/automation-v8/activities/fetch-from-bigquery/', 'title': 'fetch-from-bigquery', 'section': 'automation', 'terminologies': ['Infoveave', 'Query', 'Value'], 'char_count': 1338, 'word_count': 194, 'page_content': 'This activity connects to your Google Cloud project, runs the specified query, and returns the results in tabular format. It is ideal for pulling real-time analytics, data transformations, or integrating cloud data into your workflow pipelines.\nUse case\n: Fetch customer order data by region for the last quarter directly from BigQuery to feed a dashboard or analytics engine.\nInput\nNot Applicable\nOutput\nOutput Type\nFormat\nDescription\nData\nTable Output of the executed BigQuery SQL query.\nConfiguration Fields\nField Name\nDescription\nConnection\nGoogle BigQuery connection (OAuth or service account). Required for access.\nProject\nGoogle Cloud Project ID containing the BigQuery datasets.\nQuery The SQL query string to be executed. Supports standard SQL syntax.\nSample Input\nNot Applicable\nSample Configuration\nField\nValue\nConnection\nGoogle BigQuery OAuth\nProject\ncustomer-data-analytics\nQuery', 'chunk_index': 1, 'entities': [{'name': 'Infoveave', 'type': 'Concept'}, {'name': 'Query', 'type': 'Concept'}, {'name': 'Value', 'type': 'Concept'}, {'name': 'fetch-from-bigquery', 'type': 'Widget'}, {'name': 'automation', 'type': 'Section'}], 'triplets': [['fetch-from-bigquery', 'belongs_to', 'automation'], ['fetch-from-bigquery', 'relates_to', 'Infoveave'], ['fetch-from-bigquery', 'relates_to', 'Query'], ['fetch-from-bigquery', 'relates_to', 'Value']]}, vector=None, shard_key=None, order_value=None)]
[ 2025-08-11 23:10:54,482 ] test_main.py:82 root - INFO - Retrieved result for point ID: 8b218577-677d-44ae-bef7-35b5bd2131bf
[ 2025-08-11 23:10:54,537 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_docs_kg_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-11 23:10:54,538 ] test_main.py:81 root - INFO - [Record(id='b56a8ada-2ca8-46ed-bc76-c4957e9889b4', payload={'url': 'https://infoveave-help.pages.dev/automation-v8/activities/query-datasource/', 'title': 'query-datasource', 'section': 'automation', 'terminologies': ['Infoveave', 'Query', 'Reports', 'Value', 'Variables', 'Workflows'], 'char_count': 3756, 'word_count': 590, 'page_content': 'activity executes a structured query (e.g., SQL) against a configured data source such as a relational database, data warehouse, or cloud storage engine . You can retrieve the results directly as tabular output or optionally save them to a file using configurable export settings. This activity is especially useful for dynamically pulling data into a workflow, generating reports, or integrating external data systems. When saving results to a file, it also supports advanced formatting using templates, encryption, and partitioning logic. Use this activity to:\nQuery databases and bring live data into workflows\nExport query results as Excel or CSV files\nApply formatting using templates and control sheet/row structure\nSecure output files with encryption and filename customization\nUse case\n: A data analyst can use this activity to run a sales report query on a PostgreSQL database. The output can be formatted using a template Excel file, encrypted using a secret key, and saved with a filename pattern that includes a timestamp.\nInput Type\nDescription\nData\nOptional incoming data used to influence the query or filenames (if dynamic).\nOutput\nOutput Type\nFormat\nDescription\nData\nTable or File Query results, either in-memory (as table) or written to file(s).\nConfiguration Fields\nField Name\nDescription\nDatasource Id Select the connection representing the data source (e.g., MySQL, SQL Server, Snowflake) where the query will run.\nQuery The query string (SQL or supported query language) to be executed on the selected data source. Supports variables if dynamic queries are needed.\nSave As File Enable this option to save the query result to a file instead of returning it as in-memory table data.\nSecret Key\nRequired only when “Save As File” is enabled. This encryption key secures the generated file’s content.', 'chunk_index': 1, 'entities': [{'name': 'Infoveave', 'type': 'Concept'}, {'name': 'Query', 'type': 'Concept'}, {'name': 'Reports', 'type': 'Concept'}, {'name': 'Value', 'type': 'Concept'}, {'name': 'Variables', 'type': 'Concept'}, {'name': 'Workflows', 'type': 'Concept'}, {'name': 'query-datasource', 'type': 'Widget'}, {'name': 'automation', 'type': 'Section'}], 'triplets': [['query-datasource', 'belongs_to', 'automation'], ['query-datasource', 'relates_to', 'Infoveave'], ['query-datasource', 'relates_to', 'Query'], ['query-datasource', 'relates_to', 'Reports'], ['query-datasource', 'relates_to', 'Value'], ['query-datasource', 'relates_to', 'Variables'], ['query-datasource', 'relates_to', 'Workflows']]}, vector=None, shard_key=None, order_value=None)]
[ 2025-08-11 23:10:54,538 ] test_main.py:82 root - INFO - Retrieved result for point ID: b56a8ada-2ca8-46ed-bc76-c4957e9889b4
[ 2025-08-11 23:10:54,600 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_docs_kg_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-11 23:10:54,601 ] test_main.py:81 root - INFO - [Record(id='22a05a68-c217-44dd-beb4-0b1f68e967fd', payload={'url': 'https://infoveave-help.pages.dev/automation-v8/activities/execute-query/', 'title': 'execute-query', 'section': 'automation', 'terminologies': ['Infoveave', 'Query', 'Reports', 'Value'], 'char_count': 2330, 'word_count': 363, 'page_content': "activity allows users to execute SQL queries on files or data stored in a connected data source (e.g., database, storage, or file-based system). This activity supports dynamic queries, and optionally allows saving the results to files with encryption, formatting, and custom output configuration.\nUse this activity to:\nExecute ad hoc or parameterized SQL queries on uploaded or connected data Retrieve transformed or filtered data for further processing\nGenerate reports or structured data files from query results\nUse Case\n: Useful in scenarios where data needs to be filtered, joined, aggregated, or reshaped before it’s used in reporting, validation, or export.\nInput\nType\nDescription\nFiles\nFiles/data available in the connection\nOutput\nType Format\nDescription\nData / File\nTable / File\nQuery result as a table or downloadable file\nConfiguration Fields\nField Name\nRequired\nDescription\nConnection\nYes\nConnection to the data source where the query should be executed.\nQuery Yes\nSQL query to be executed on the connected data source.\nSave As File\nNo\nIf enabled, the query result will be saved as a file.\nSecret Key\nConditional Encryption key used to secure the generated output file (enabled only if Save As File is true).\nFile Pattern\nConditional\nPattern for naming the generated files.\nSheet Name\nConditional Sheet name to use in the generated file (for Excel formats).\nFile\nConditional\nTemplate file to structure the output.\nSplit by Column\nConditional\nColumn name used to split the query result into multiple output files.\nStarting Row Conditional\nRow index in the template file from where data insertion begins.\nStarting Column\nConditional\nColumn index in the template file from where data insertion begins.\nSample Input\nNot applicable\n— data is pulled from the connected data source. Sample Configuration\nField\nValue\nConnection\nAzureBlobConnection\nQuery\nSELECT * FROM SalesData WHERE Region = 'East'\nSave As File\ntrue\nSecret Key\nEncrypt@123\nFile Pattern\nSales_Report_[Region]", 'chunk_index': 1, 'entities': [{'name': 'Infoveave', 'type': 'Concept'}, {'name': 'Query', 'type': 'Concept'}, {'name': 'Reports', 'type': 'Concept'}, {'name': 'Value', 'type': 'Concept'}, {'name': 'execute-query', 'type': 'Widget'}, {'name': 'automation', 'type': 'Section'}], 'triplets': [['execute-query', 'belongs_to', 'automation'], ['execute-query', 'relates_to', 'Infoveave'], ['execute-query', 'relates_to', 'Query'], ['execute-query', 'relates_to', 'Reports'], ['execute-query', 'relates_to', 'Value']]}, vector=None, shard_key=None, order_value=None)]
[ 2025-08-11 23:10:54,601 ] test_main.py:82 root - INFO - Retrieved result for point ID: 22a05a68-c217-44dd-beb4-0b1f68e967fd
[ 2025-08-11 23:10:54,665 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_docs_kg_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-11 23:10:54,666 ] test_main.py:81 root - INFO - [Record(id='4d3b6b3b-adff-4f7b-9502-1e03114d235b', payload={'url': 'https://infoveave-help.pages.dev/automation-v8/activities/split-url/', 'title': 'split-url', 'section': 'automation', 'terminologies': ['Infoveave', 'Query', 'Reports', 'Value'], 'char_count': 3191, 'word_count': 408, 'page_content': ').\nQuery Column Name\nColumn name to store the query string (portion after\n?\n) without parsing key-value pairs.\nFragment Column Name\nColumn name to store the fragment identifier (portion after\n#\n, if any). Note\n: This activity does not split the query string into key-value pairs — use the\nSplit HTTP Query\nactivity if you need that level of detail.\nSample Input\nemployee_id\nname\nurl\nE001\nJohn Doe', 'chunk_index': 2, 'entities': [{'name': 'Infoveave', 'type': 'Concept'}, {'name': 'Query', 'type': 'Concept'}, {'name': 'Reports', 'type': 'Concept'}, {'name': 'Value', 'type': 'Concept'}, {'name': 'split-url', 'type': 'Widget'}, {'name': 'automation', 'type': 'Section'}], 'triplets': [['split-url', 'belongs_to', 'automation'], ['split-url', 'relates_to', 'Infoveave'], ['split-url', 'relates_to', 'Query'], ['split-url', 'relates_to', 'Reports'], ['split-url', 'relates_to', 'Value']]}, vector=None, shard_key=None, order_value=None)]
[ 2025-08-11 23:10:54,666 ] test_main.py:82 root - INFO - Retrieved result for point ID: 4d3b6b3b-adff-4f7b-9502-1e03114d235b
[ 2025-08-11 23:10:54,666 ] test_main.py:228 root - INFO - Loaded rewritten query user prompt.
[ 2025-08-11 23:10:55,908 ] _client.py:1025 httpx - INFO - HTTP Request: POST https://api.groq.com/openai/v1/chat/completions "HTTP/1.1 200 OK"
[ 2025-08-11 23:10:55,910 ] test_main.py:370 root - INFO - Response for query part 1: The **Execute Query** activity allows you to run SQL queries against various data sources, including databases, data warehouses, and cloud storage engines. 

Here's a breakdown:

* **Purpose:** This activity is designed to retrieve data from your connected data sources by executing SQL queries.

* **Use Cases:**
    * Fetching real-time analytics data.
    * Performing data transformations.
    * Integrating cloud data into your workflow pipelines.
    * Generating reports.

* **Key Features:**
    * **Connection:** You need to specify a connection to your data source (e.g., Google BigQuery, MySQL, PostgreSQL).
    * **Query:**  You provide the SQL query string that will be executed on the selected data source.
    * **Output:** The activity returns the query results as a tabular format.

**Learn More:**

You can find detailed information about the Execute Query activity, including configuration options and examples, in the Infoveave Help documentation: [https://infoveave-help.pages.dev/automation-v8/activities/execute-query/](https://infoveave-help.pages.dev/automation-v8/activities/execute-query/)
[ 2025-08-11 23:10:55,911 ] test_main.py:373 root - INFO - [(Document(metadata={'_id': 'a4a1b9fd-9e7b-4f8c-8b01-1c2d5783a892', '_collection_name': 'infoverve_docs_kg_hybrid'}, page_content='Execute Query | Infoveave Help\nSkip to content\nExecute Query\nDescription\nThe\nExecute Query'), 0.5), (Document(metadata={'_id': '8b218577-677d-44ae-bef7-35b5bd2131bf', '_collection_name': 'infoverve_docs_kg_hybrid'}, page_content='This activity connects to your Google Cloud project, runs the specified query, and returns the results in tabular format. It is ideal for pulling real-time analytics, data transformations, or integrating cloud data into your workflow pipelines.\nUse case\n: Fetch customer order data by region for the last quarter directly from BigQuery to feed a dashboard or analytics engine.\nInput\nNot Applicable\nOutput\nOutput Type\nFormat\nDescription\nData\nTable Output of the executed BigQuery SQL query.\nConfiguration Fields\nField Name\nDescription\nConnection\nGoogle BigQuery connection (OAuth or service account). Required for access.\nProject\nGoogle Cloud Project ID containing the BigQuery datasets.\nQuery The SQL query string to be executed. Supports standard SQL syntax.\nSample Input\nNot Applicable\nSample Configuration\nField\nValue\nConnection\nGoogle BigQuery OAuth\nProject\ncustomer-data-analytics\nQuery'), 0.33333334), (Document(metadata={'_id': 'b56a8ada-2ca8-46ed-bc76-c4957e9889b4', '_collection_name': 'infoverve_docs_kg_hybrid'}, page_content='activity executes a structured query (e.g., SQL) against a configured data source such as a relational database, data warehouse, or cloud storage engine . You can retrieve the results directly as tabular output or optionally save them to a file using configurable export settings. This activity is especially useful for dynamically pulling data into a workflow, generating reports, or integrating external data systems. When saving results to a file, it also supports advanced formatting using templates, encryption, and partitioning logic. Use this activity to:\nQuery databases and bring live data into workflows\nExport query results as Excel or CSV files\nApply formatting using templates and control sheet/row structure\nSecure output files with encryption and filename customization\nUse case\n: A data analyst can use this activity to run a sales report query on a PostgreSQL database. The output can be formatted using a template Excel file, encrypted using a secret key, and saved with a filename pattern that includes a timestamp.\nInput Type\nDescription\nData\nOptional incoming data used to influence the query or filenames (if dynamic).\nOutput\nOutput Type\nFormat\nDescription\nData\nTable or File Query results, either in-memory (as table) or written to file(s).\nConfiguration Fields\nField Name\nDescription\nDatasource Id Select the connection representing the data source (e.g., MySQL, SQL Server, Snowflake) where the query will run.\nQuery The query string (SQL or supported query language) to be executed on the selected data source. Supports variables if dynamic queries are needed.\nSave As File Enable this option to save the query result to a file instead of returning it as in-memory table data.\nSecret Key\nRequired only when “Save As File” is enabled. This encryption key secures the generated file’s content.'), 0.25), (Document(metadata={'_id': '22a05a68-c217-44dd-beb4-0b1f68e967fd', '_collection_name': 'infoverve_docs_kg_hybrid'}, page_content="activity allows users to execute SQL queries on files or data stored in a connected data source (e.g., database, storage, or file-based system). This activity supports dynamic queries, and optionally allows saving the results to files with encryption, formatting, and custom output configuration.\nUse this activity to:\nExecute ad hoc or parameterized SQL queries on uploaded or connected data Retrieve transformed or filtered data for further processing\nGenerate reports or structured data files from query results\nUse Case\n: Useful in scenarios where data needs to be filtered, joined, aggregated, or reshaped before it’s used in reporting, validation, or export.\nInput\nType\nDescription\nFiles\nFiles/data available in the connection\nOutput\nType Format\nDescription\nData / File\nTable / File\nQuery result as a table or downloadable file\nConfiguration Fields\nField Name\nRequired\nDescription\nConnection\nYes\nConnection to the data source where the query should be executed.\nQuery Yes\nSQL query to be executed on the connected data source.\nSave As File\nNo\nIf enabled, the query result will be saved as a file.\nSecret Key\nConditional Encryption key used to secure the generated output file (enabled only if Save As File is true).\nFile Pattern\nConditional\nPattern for naming the generated files.\nSheet Name\nConditional Sheet name to use in the generated file (for Excel formats).\nFile\nConditional\nTemplate file to structure the output.\nSplit by Column\nConditional\nColumn name used to split the query result into multiple output files.\nStarting Row Conditional\nRow index in the template file from where data insertion begins.\nStarting Column\nConditional\nColumn index in the template file from where data insertion begins.\nSample Input\nNot applicable\n— data is pulled from the connected data source. Sample Configuration\nField\nValue\nConnection\nAzureBlobConnection\nQuery\nSELECT * FROM SalesData WHERE Region = 'East'\nSave As File\ntrue\nSecret Key\nEncrypt@123\nFile Pattern\nSales_Report_[Region]"), 0.2), (Document(metadata={'_id': '4d3b6b3b-adff-4f7b-9502-1e03114d235b', '_collection_name': 'infoverve_docs_kg_hybrid'}, page_content=').\nQuery Column Name\nColumn name to store the query string (portion after\n?\n) without parsing key-value pairs.\nFragment Column Name\nColumn name to store the fragment identifier (portion after\n#\n, if any). Note\n: This activity does not split the query string into key-value pairs — use the\nSplit HTTP Query\nactivity if you need that level of detail.\nSample Input\nemployee_id\nname\nurl\nE001\nJohn Doe'), 0.16666667)]
[ 2025-08-11 23:10:55,930 ] test_main.py:71 root - INFO - Building context with metadata from documents...
[ 2025-08-11 23:10:55,985 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_docs_kg_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-11 23:10:55,986 ] test_main.py:81 root - INFO - [Record(id='a4a1b9fd-9e7b-4f8c-8b01-1c2d5783a892', payload={'url': 'https://infoveave-help.pages.dev/automation-v8/activities/execute-query/', 'title': 'execute-query', 'section': 'automation', 'terminologies': ['Infoveave', 'Query', 'Reports', 'Value'], 'char_count': 2330, 'word_count': 363, 'page_content': 'Execute Query | Infoveave Help\nSkip to content\nExecute Query\nDescription\nThe\nExecute Query', 'chunk_index': 0, 'entities': [{'name': 'Infoveave', 'type': 'Concept'}, {'name': 'Query', 'type': 'Concept'}, {'name': 'Reports', 'type': 'Concept'}, {'name': 'Value', 'type': 'Concept'}, {'name': 'execute-query', 'type': 'Widget'}, {'name': 'automation', 'type': 'Section'}], 'triplets': [['execute-query', 'belongs_to', 'automation'], ['execute-query', 'relates_to', 'Infoveave'], ['execute-query', 'relates_to', 'Query'], ['execute-query', 'relates_to', 'Reports'], ['execute-query', 'relates_to', 'Value']]}, vector=None, shard_key=None, order_value=None)]
[ 2025-08-11 23:10:55,986 ] test_main.py:82 root - INFO - Retrieved result for point ID: a4a1b9fd-9e7b-4f8c-8b01-1c2d5783a892
[ 2025-08-11 23:10:56,050 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_docs_kg_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-11 23:10:56,050 ] test_main.py:81 root - INFO - [Record(id='8b218577-677d-44ae-bef7-35b5bd2131bf', payload={'url': 'https://infoveave-help.pages.dev/automation-v8/activities/fetch-from-bigquery/', 'title': 'fetch-from-bigquery', 'section': 'automation', 'terminologies': ['Infoveave', 'Query', 'Value'], 'char_count': 1338, 'word_count': 194, 'page_content': 'This activity connects to your Google Cloud project, runs the specified query, and returns the results in tabular format. It is ideal for pulling real-time analytics, data transformations, or integrating cloud data into your workflow pipelines.\nUse case\n: Fetch customer order data by region for the last quarter directly from BigQuery to feed a dashboard or analytics engine.\nInput\nNot Applicable\nOutput\nOutput Type\nFormat\nDescription\nData\nTable Output of the executed BigQuery SQL query.\nConfiguration Fields\nField Name\nDescription\nConnection\nGoogle BigQuery connection (OAuth or service account). Required for access.\nProject\nGoogle Cloud Project ID containing the BigQuery datasets.\nQuery The SQL query string to be executed. Supports standard SQL syntax.\nSample Input\nNot Applicable\nSample Configuration\nField\nValue\nConnection\nGoogle BigQuery OAuth\nProject\ncustomer-data-analytics\nQuery', 'chunk_index': 1, 'entities': [{'name': 'Infoveave', 'type': 'Concept'}, {'name': 'Query', 'type': 'Concept'}, {'name': 'Value', 'type': 'Concept'}, {'name': 'fetch-from-bigquery', 'type': 'Widget'}, {'name': 'automation', 'type': 'Section'}], 'triplets': [['fetch-from-bigquery', 'belongs_to', 'automation'], ['fetch-from-bigquery', 'relates_to', 'Infoveave'], ['fetch-from-bigquery', 'relates_to', 'Query'], ['fetch-from-bigquery', 'relates_to', 'Value']]}, vector=None, shard_key=None, order_value=None)]
[ 2025-08-11 23:10:56,050 ] test_main.py:82 root - INFO - Retrieved result for point ID: 8b218577-677d-44ae-bef7-35b5bd2131bf
[ 2025-08-11 23:10:56,108 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_docs_kg_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-11 23:10:56,109 ] test_main.py:81 root - INFO - [Record(id='b56a8ada-2ca8-46ed-bc76-c4957e9889b4', payload={'url': 'https://infoveave-help.pages.dev/automation-v8/activities/query-datasource/', 'title': 'query-datasource', 'section': 'automation', 'terminologies': ['Infoveave', 'Query', 'Reports', 'Value', 'Variables', 'Workflows'], 'char_count': 3756, 'word_count': 590, 'page_content': 'activity executes a structured query (e.g., SQL) against a configured data source such as a relational database, data warehouse, or cloud storage engine . You can retrieve the results directly as tabular output or optionally save them to a file using configurable export settings. This activity is especially useful for dynamically pulling data into a workflow, generating reports, or integrating external data systems. When saving results to a file, it also supports advanced formatting using templates, encryption, and partitioning logic. Use this activity to:\nQuery databases and bring live data into workflows\nExport query results as Excel or CSV files\nApply formatting using templates and control sheet/row structure\nSecure output files with encryption and filename customization\nUse case\n: A data analyst can use this activity to run a sales report query on a PostgreSQL database. The output can be formatted using a template Excel file, encrypted using a secret key, and saved with a filename pattern that includes a timestamp.\nInput Type\nDescription\nData\nOptional incoming data used to influence the query or filenames (if dynamic).\nOutput\nOutput Type\nFormat\nDescription\nData\nTable or File Query results, either in-memory (as table) or written to file(s).\nConfiguration Fields\nField Name\nDescription\nDatasource Id Select the connection representing the data source (e.g., MySQL, SQL Server, Snowflake) where the query will run.\nQuery The query string (SQL or supported query language) to be executed on the selected data source. Supports variables if dynamic queries are needed.\nSave As File Enable this option to save the query result to a file instead of returning it as in-memory table data.\nSecret Key\nRequired only when “Save As File” is enabled. This encryption key secures the generated file’s content.', 'chunk_index': 1, 'entities': [{'name': 'Infoveave', 'type': 'Concept'}, {'name': 'Query', 'type': 'Concept'}, {'name': 'Reports', 'type': 'Concept'}, {'name': 'Value', 'type': 'Concept'}, {'name': 'Variables', 'type': 'Concept'}, {'name': 'Workflows', 'type': 'Concept'}, {'name': 'query-datasource', 'type': 'Widget'}, {'name': 'automation', 'type': 'Section'}], 'triplets': [['query-datasource', 'belongs_to', 'automation'], ['query-datasource', 'relates_to', 'Infoveave'], ['query-datasource', 'relates_to', 'Query'], ['query-datasource', 'relates_to', 'Reports'], ['query-datasource', 'relates_to', 'Value'], ['query-datasource', 'relates_to', 'Variables'], ['query-datasource', 'relates_to', 'Workflows']]}, vector=None, shard_key=None, order_value=None)]
[ 2025-08-11 23:10:56,109 ] test_main.py:82 root - INFO - Retrieved result for point ID: b56a8ada-2ca8-46ed-bc76-c4957e9889b4
[ 2025-08-11 23:10:56,175 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_docs_kg_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-11 23:10:56,175 ] test_main.py:81 root - INFO - [Record(id='22a05a68-c217-44dd-beb4-0b1f68e967fd', payload={'url': 'https://infoveave-help.pages.dev/automation-v8/activities/execute-query/', 'title': 'execute-query', 'section': 'automation', 'terminologies': ['Infoveave', 'Query', 'Reports', 'Value'], 'char_count': 2330, 'word_count': 363, 'page_content': "activity allows users to execute SQL queries on files or data stored in a connected data source (e.g., database, storage, or file-based system). This activity supports dynamic queries, and optionally allows saving the results to files with encryption, formatting, and custom output configuration.\nUse this activity to:\nExecute ad hoc or parameterized SQL queries on uploaded or connected data Retrieve transformed or filtered data for further processing\nGenerate reports or structured data files from query results\nUse Case\n: Useful in scenarios where data needs to be filtered, joined, aggregated, or reshaped before it’s used in reporting, validation, or export.\nInput\nType\nDescription\nFiles\nFiles/data available in the connection\nOutput\nType Format\nDescription\nData / File\nTable / File\nQuery result as a table or downloadable file\nConfiguration Fields\nField Name\nRequired\nDescription\nConnection\nYes\nConnection to the data source where the query should be executed.\nQuery Yes\nSQL query to be executed on the connected data source.\nSave As File\nNo\nIf enabled, the query result will be saved as a file.\nSecret Key\nConditional Encryption key used to secure the generated output file (enabled only if Save As File is true).\nFile Pattern\nConditional\nPattern for naming the generated files.\nSheet Name\nConditional Sheet name to use in the generated file (for Excel formats).\nFile\nConditional\nTemplate file to structure the output.\nSplit by Column\nConditional\nColumn name used to split the query result into multiple output files.\nStarting Row Conditional\nRow index in the template file from where data insertion begins.\nStarting Column\nConditional\nColumn index in the template file from where data insertion begins.\nSample Input\nNot applicable\n— data is pulled from the connected data source. Sample Configuration\nField\nValue\nConnection\nAzureBlobConnection\nQuery\nSELECT * FROM SalesData WHERE Region = 'East'\nSave As File\ntrue\nSecret Key\nEncrypt@123\nFile Pattern\nSales_Report_[Region]", 'chunk_index': 1, 'entities': [{'name': 'Infoveave', 'type': 'Concept'}, {'name': 'Query', 'type': 'Concept'}, {'name': 'Reports', 'type': 'Concept'}, {'name': 'Value', 'type': 'Concept'}, {'name': 'execute-query', 'type': 'Widget'}, {'name': 'automation', 'type': 'Section'}], 'triplets': [['execute-query', 'belongs_to', 'automation'], ['execute-query', 'relates_to', 'Infoveave'], ['execute-query', 'relates_to', 'Query'], ['execute-query', 'relates_to', 'Reports'], ['execute-query', 'relates_to', 'Value']]}, vector=None, shard_key=None, order_value=None)]
[ 2025-08-11 23:10:56,176 ] test_main.py:82 root - INFO - Retrieved result for point ID: 22a05a68-c217-44dd-beb4-0b1f68e967fd
[ 2025-08-11 23:10:56,242 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_docs_kg_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-11 23:10:56,243 ] test_main.py:81 root - INFO - [Record(id='4d3b6b3b-adff-4f7b-9502-1e03114d235b', payload={'url': 'https://infoveave-help.pages.dev/automation-v8/activities/split-url/', 'title': 'split-url', 'section': 'automation', 'terminologies': ['Infoveave', 'Query', 'Reports', 'Value'], 'char_count': 3191, 'word_count': 408, 'page_content': ').\nQuery Column Name\nColumn name to store the query string (portion after\n?\n) without parsing key-value pairs.\nFragment Column Name\nColumn name to store the fragment identifier (portion after\n#\n, if any). Note\n: This activity does not split the query string into key-value pairs — use the\nSplit HTTP Query\nactivity if you need that level of detail.\nSample Input\nemployee_id\nname\nurl\nE001\nJohn Doe', 'chunk_index': 2, 'entities': [{'name': 'Infoveave', 'type': 'Concept'}, {'name': 'Query', 'type': 'Concept'}, {'name': 'Reports', 'type': 'Concept'}, {'name': 'Value', 'type': 'Concept'}, {'name': 'split-url', 'type': 'Widget'}, {'name': 'automation', 'type': 'Section'}], 'triplets': [['split-url', 'belongs_to', 'automation'], ['split-url', 'relates_to', 'Infoveave'], ['split-url', 'relates_to', 'Query'], ['split-url', 'relates_to', 'Reports'], ['split-url', 'relates_to', 'Value']]}, vector=None, shard_key=None, order_value=None)]
[ 2025-08-11 23:10:56,243 ] test_main.py:82 root - INFO - Retrieved result for point ID: 4d3b6b3b-adff-4f7b-9502-1e03114d235b
[ 2025-08-11 23:10:56,243 ] test_main.py:359 root - INFO - Rewritten Query 2: Send Email
[ 2025-08-11 23:10:56,711 ] test_main.py:362 root - INFO - Embedding generated for query 2.
[ 2025-08-11 23:10:57,918 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_docs_kg_hybrid/points/query "HTTP/1.1 200 OK"
[ 2025-08-11 23:10:57,967 ] test_main.py:367 root - INFO - Processing query part 2: Send Email
[ 2025-08-11 23:10:57,990 ] test_main.py:71 root - INFO - Building context with metadata from documents...
[ 2025-08-11 23:10:58,056 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_docs_kg_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-11 23:10:58,057 ] test_main.py:81 root - INFO - [Record(id='d8d2ef36-2163-43f4-a0ce-5131dfe2a636', payload={'url': 'https://infoveave-help.pages.dev/automation-v8/activities/send-email/', 'title': 'send-email', 'section': 'automation', 'terminologies': ['Infoveave', 'Value'], 'char_count': 3312, 'word_count': 495, 'page_content': 'Send Email | Infoveave Help\nSkip to content\nSend Email\nDescription\nThe\nSend Email', 'chunk_index': 0, 'entities': [{'name': 'Infoveave', 'type': 'Concept'}, {'name': 'Value', 'type': 'Concept'}, {'name': 'send-email', 'type': 'Widget'}, {'name': 'automation', 'type': 'Section'}], 'triplets': [['send-email', 'belongs_to', 'automation'], ['send-email', 'relates_to', 'Infoveave'], ['send-email', 'relates_to', 'Value']]}, vector=None, shard_key=None, order_value=None)]
[ 2025-08-11 23:10:58,057 ] test_main.py:82 root - INFO - Retrieved result for point ID: d8d2ef36-2163-43f4-a0ce-5131dfe2a636
[ 2025-08-11 23:10:58,112 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_docs_kg_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-11 23:10:58,113 ] test_main.py:81 root - INFO - [Record(id='d8a64375-61d4-4b97-8302-f10cb379f782', payload={'url': 'https://infoveave-help.pages.dev/automation-v8/activities/send-email/', 'title': 'send-email', 'section': 'automation', 'terminologies': ['Infoveave', 'Value'], 'char_count': 3312, 'word_count': 495, 'page_content': 'activity allows you to compose and send emails as part of a workflow. You can configure recipient addresses, subject, body content, and attachments . The activity also supports dynamic emailing using fields from input data, and allows the use of pre-designed Infoveave templates for styling and formatting consistency. Use this activity to:\nSend individual or bulk emails based on incoming data\nAttach files generated in the workflow\nFormat emails using templates for consistency\nEmbed processed data directly into the email body\nUse case\n: A workflow generates a monthly sales report and automatically sends personalized emails to each regional manager with their region’s data attached and included in the body.\nInput\nType\nDescription\nData', 'chunk_index': 1, 'entities': [{'name': 'Infoveave', 'type': 'Concept'}, {'name': 'Value', 'type': 'Concept'}, {'name': 'send-email', 'type': 'Widget'}, {'name': 'automation', 'type': 'Section'}], 'triplets': [['send-email', 'belongs_to', 'automation'], ['send-email', 'relates_to', 'Infoveave'], ['send-email', 'relates_to', 'Value']]}, vector=None, shard_key=None, order_value=None)]
[ 2025-08-11 23:10:58,113 ] test_main.py:82 root - INFO - Retrieved result for point ID: d8a64375-61d4-4b97-8302-f10cb379f782
[ 2025-08-11 23:10:58,177 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_docs_kg_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-11 23:10:58,178 ] test_main.py:81 root - INFO - [Record(id='ec87e48b-d2c4-4cf3-a6fd-db34772dacb7', payload={'url': 'https://infoveave-help.pages.dev/automation-v8/activities/send-email/', 'title': 'send-email', 'section': 'automation', 'terminologies': ['Infoveave', 'Value'], 'char_count': 3312, 'word_count': 495, 'page_content': '(Optional) Tabular data used to populate dynamic fields like email addresses, template content, or attachment grouping.\nOutput\nOutput Type\nFormat\nDescription\nEmail Info\nTable Status of sent emails including recipient, success, and any errors encountered.\nConfiguration Fields\nField Name\nDescription\nConnection\nMail server connection to send emails (OAuth or SMTP supported).\nUse Default Credentials If enabled, uses Infoveave’s default email credentials. Disable to use custom authentication.\nUse Email Address From Data\nIf enabled, pulls recipient addresses from a specified column in the input data.\nEmail Column The column in the data containing the recipient’s email address (required if using email from data).\nEmail To Address\nStatic recipient(s) for the “To” field (comma-separated).\nEmail CC Address Email addresses for the “CC” field (comma-separated).\nEmail BCC Address\nEmail addresses for the “BCC” field.\nSubject\nSubject line of the email. Can be static or mapped from input data.\nContent The main body content of the email. Supports plain text or HTML.\nUse Infoveave Template\nWhen enabled, applies an Infoveave-designed template to the email layout.\nRerun Template Ensures template consistency across multiple emails in the same run.\nAttachment Name\nName of the attachment file (e.g.,\nSalesReport_May2025.xlsx\n).\nSplit By Column Splits data into separate attachments based on values in this column (used in bulk personalization).\nSheet Name\nThe name of the worksheet in the template used for formatting the attachment content.\nSend Data In Email Body If enabled, includes input data as a formatted table within the body of the email.\nAttachment File Pattern\nPattern to identify which files to attach from prior activities (e.g.,\n"*.pdf"\n).\nCombine\nSplit By Column with\nEmail Column\nto send a unique email with corresponding data and attachment per recipient.\nSample Input\nNot applicable\n(used only if sending emails dynamically per row or attaching generated data).\nSample Configuration\nField\nValue', 'chunk_index': 2, 'entities': [{'name': 'Infoveave', 'type': 'Concept'}, {'name': 'Value', 'type': 'Concept'}, {'name': 'send-email', 'type': 'Widget'}, {'name': 'automation', 'type': 'Section'}], 'triplets': [['send-email', 'belongs_to', 'automation'], ['send-email', 'relates_to', 'Infoveave'], ['send-email', 'relates_to', 'Value']]}, vector=None, shard_key=None, order_value=None)]
[ 2025-08-11 23:10:58,178 ] test_main.py:82 root - INFO - Retrieved result for point ID: ec87e48b-d2c4-4cf3-a6fd-db34772dacb7
[ 2025-08-11 23:10:58,237 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_docs_kg_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-11 23:10:58,238 ] test_main.py:81 root - INFO - [Record(id='028aadb2-5baf-494f-85a4-f6f5f6b4664f', payload={'url': 'https://infoveave-help.pages.dev/automation-v8/activities/mailgun/', 'title': 'mailgun', 'section': 'automation', 'terminologies': ['Infoveave', 'Tags', 'Value', 'Workflows'], 'char_count': 3213, 'word_count': 485, 'page_content': '2025-07-01T10:05:00Z\njohn@example.com\nWelcome Email\n18KB\nonboarding\nev1235\nopened\n2025-07-01T10:08:00Z jane@example.com\nPromo Offer\n22KB\npromotions\nFor\nMessages\nEntity (JSON):\n{\n"headers"\n: {\n"message-id"\n:\n"\n<abc@mailgun.org>', 'chunk_index': 3, 'entities': [{'name': 'Infoveave', 'type': 'Concept'}, {'name': 'Tags', 'type': 'Concept'}, {'name': 'Value', 'type': 'Concept'}, {'name': 'Workflows', 'type': 'Concept'}, {'name': 'mailgun', 'type': 'Widget'}, {'name': 'automation', 'type': 'Section'}], 'triplets': [['mailgun', 'belongs_to', 'automation'], ['mailgun', 'relates_to', 'Infoveave'], ['mailgun', 'relates_to', 'Tags'], ['mailgun', 'relates_to', 'Value'], ['mailgun', 'relates_to', 'Workflows']]}, vector=None, shard_key=None, order_value=None)]
[ 2025-08-11 23:10:58,238 ] test_main.py:82 root - INFO - Retrieved result for point ID: 028aadb2-5baf-494f-85a4-f6f5f6b4664f
[ 2025-08-11 23:10:58,309 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_docs_kg_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-11 23:10:58,310 ] test_main.py:81 root - INFO - [Record(id='706defb9-58dc-4788-890e-b2b40ff97675', payload={'url': 'https://infoveave-help.pages.dev/automation-v8/activities/start-iteration/', 'title': 'start-iteration', 'section': 'automation', 'terminologies': ['Infoveave', 'Value'], 'char_count': 2180, 'word_count': 314, 'page_content': 'Activity Step\nReplaced Values\nSendEmail_12345\nStep 1\nCustomerName: John Doe\nSendEmail_67890\nStep 2\nCustomerName: Jane Smith', 'chunk_index': 2, 'entities': [{'name': 'Infoveave', 'type': 'Concept'}, {'name': 'Value', 'type': 'Concept'}, {'name': 'start-iteration', 'type': 'Widget'}, {'name': 'automation', 'type': 'Section'}], 'triplets': [['start-iteration', 'belongs_to', 'automation'], ['start-iteration', 'relates_to', 'Infoveave'], ['start-iteration', 'relates_to', 'Value']]}, vector=None, shard_key=None, order_value=None)]
[ 2025-08-11 23:10:58,310 ] test_main.py:82 root - INFO - Retrieved result for point ID: 706defb9-58dc-4788-890e-b2b40ff97675
[ 2025-08-11 23:10:58,310 ] test_main.py:228 root - INFO - Loaded rewritten query user prompt.
[ 2025-08-11 23:11:00,303 ] _client.py:1025 httpx - INFO - HTTP Request: POST https://api.groq.com/openai/v1/chat/completions "HTTP/1.1 200 OK"
[ 2025-08-11 23:11:00,306 ] test_main.py:370 root - INFO - Response for query part 2: The **Send Email** activity in Infoveave allows you to compose and send emails as part of a workflow.  You can configure recipient addresses, subject, body content, and attachments. 

Here's a breakdown of how it works:

* **Dynamic Emailing:** The activity supports dynamic emailing using fields from input data, meaning you can personalize emails based on the information flowing through your workflow.

* **Templates:** You can use pre-designed Infoveave templates to ensure consistent styling and formatting across your emails.

* **Bulk Sending:**  Send individual or bulk emails based on incoming data.

* **Attachments:** Attach files generated in the workflow to your emails.

**Use Cases:**

* Send personalized monthly sales reports to regional managers with their region's data attached.
* Automatically send welcome emails to new customers with their account details.
* Notify users about important updates or changes within your system.

**Configuration Fields:**

* **Connection:**  Select the mail server connection to use for sending emails (OAuth or SMTP).
* **Use Default Credentials:** If enabled, uses Infoveave’s default email credentials. Disable to use custom authentication.
* **Use Email Address From Data:** If enabled, pulls recipient addresses from a specified column in the input data.
* **Email Column:** The column in the data containing the recipient’s email address (required if using email from data).
* **Email To Address:** Static recipient(s) for the “To” field (comma-separated).
* **Email CC Address:** Email addresses for the “CC” field (comma-separated).
* **Email BCC Address:** Email addresses for the “BCC” field.
* **Subject:** The subject line of the email. Can be static or mapped from input data.
* **Content:** The main body content of the email. Supports plain text or HTML.
* **Use Infoveave Template:** When enabled, applies an Infoveave-designed template to the email layout.
* **Rerun Template:** Ensures template consistency across multiple emails in the same run.
* **Attachment Name:** Name of the attachment file.
* **Split By Column:** Splits data into separate attachments based on values in this column (used in bulk personalization).
* **Sheet Name:** The name of the worksheet in the template used for formatting the attachment content.
* **Send Data In Email Body:** If enabled, includes input data as a formatted table within the body of the email.
* **Attachment File Pattern:** Pattern to identify which files to attach from prior activities.
* **Combine:** Use `Split By Column` with `Email Column` to send a unique email with corresponding data and attachment per recipient.



You can find more detailed information about the Send Email activity here: [https://infoveave-help.pages.dev/automation-v8/activities/send-email/](https://infoveave-help.pages.dev/automation-v8/activities/send-email/)
[ 2025-08-11 23:11:00,306 ] test_main.py:373 root - INFO - [(Document(metadata={'_id': 'd8d2ef36-2163-43f4-a0ce-5131dfe2a636', '_collection_name': 'infoverve_docs_kg_hybrid'}, page_content='Send Email | Infoveave Help\nSkip to content\nSend Email\nDescription\nThe\nSend Email'), 0.5), (Document(metadata={'_id': 'd8a64375-61d4-4b97-8302-f10cb379f782', '_collection_name': 'infoverve_docs_kg_hybrid'}, page_content='activity allows you to compose and send emails as part of a workflow. You can configure recipient addresses, subject, body content, and attachments . The activity also supports dynamic emailing using fields from input data, and allows the use of pre-designed Infoveave templates for styling and formatting consistency. Use this activity to:\nSend individual or bulk emails based on incoming data\nAttach files generated in the workflow\nFormat emails using templates for consistency\nEmbed processed data directly into the email body\nUse case\n: A workflow generates a monthly sales report and automatically sends personalized emails to each regional manager with their region’s data attached and included in the body.\nInput\nType\nDescription\nData'), 0.33333334), (Document(metadata={'_id': 'ec87e48b-d2c4-4cf3-a6fd-db34772dacb7', '_collection_name': 'infoverve_docs_kg_hybrid'}, page_content='(Optional) Tabular data used to populate dynamic fields like email addresses, template content, or attachment grouping.\nOutput\nOutput Type\nFormat\nDescription\nEmail Info\nTable Status of sent emails including recipient, success, and any errors encountered.\nConfiguration Fields\nField Name\nDescription\nConnection\nMail server connection to send emails (OAuth or SMTP supported).\nUse Default Credentials If enabled, uses Infoveave’s default email credentials. Disable to use custom authentication.\nUse Email Address From Data\nIf enabled, pulls recipient addresses from a specified column in the input data.\nEmail Column The column in the data containing the recipient’s email address (required if using email from data).\nEmail To Address\nStatic recipient(s) for the “To” field (comma-separated).\nEmail CC Address Email addresses for the “CC” field (comma-separated).\nEmail BCC Address\nEmail addresses for the “BCC” field.\nSubject\nSubject line of the email. Can be static or mapped from input data.\nContent The main body content of the email. Supports plain text or HTML.\nUse Infoveave Template\nWhen enabled, applies an Infoveave-designed template to the email layout.\nRerun Template Ensures template consistency across multiple emails in the same run.\nAttachment Name\nName of the attachment file (e.g.,\nSalesReport_May2025.xlsx\n).\nSplit By Column Splits data into separate attachments based on values in this column (used in bulk personalization).\nSheet Name\nThe name of the worksheet in the template used for formatting the attachment content.\nSend Data In Email Body If enabled, includes input data as a formatted table within the body of the email.\nAttachment File Pattern\nPattern to identify which files to attach from prior activities (e.g.,\n"*.pdf"\n).\nCombine\nSplit By Column with\nEmail Column\nto send a unique email with corresponding data and attachment per recipient.\nSample Input\nNot applicable\n(used only if sending emails dynamically per row or attaching generated data).\nSample Configuration\nField\nValue'), 0.25), (Document(metadata={'_id': '028aadb2-5baf-494f-85a4-f6f5f6b4664f', '_collection_name': 'infoverve_docs_kg_hybrid'}, page_content='2025-07-01T10:05:00Z\njohn@example.com\nWelcome Email\n18KB\nonboarding\nev1235\nopened\n2025-07-01T10:08:00Z jane@example.com\nPromo Offer\n22KB\npromotions\nFor\nMessages\nEntity (JSON):\n{\n"headers"\n: {\n"message-id"\n:\n"\n<abc@mailgun.org>'), 0.2), (Document(metadata={'_id': '706defb9-58dc-4788-890e-b2b40ff97675', '_collection_name': 'infoverve_docs_kg_hybrid'}, page_content='Activity Step\nReplaced Values\nSendEmail_12345\nStep 1\nCustomerName: John Doe\nSendEmail_67890\nStep 2\nCustomerName: Jane Smith'), 0.16666667)]
[ 2025-08-11 23:11:00,329 ] test_main.py:71 root - INFO - Building context with metadata from documents...
[ 2025-08-11 23:11:00,388 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_docs_kg_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-11 23:11:00,389 ] test_main.py:81 root - INFO - [Record(id='d8d2ef36-2163-43f4-a0ce-5131dfe2a636', payload={'url': 'https://infoveave-help.pages.dev/automation-v8/activities/send-email/', 'title': 'send-email', 'section': 'automation', 'terminologies': ['Infoveave', 'Value'], 'char_count': 3312, 'word_count': 495, 'page_content': 'Send Email | Infoveave Help\nSkip to content\nSend Email\nDescription\nThe\nSend Email', 'chunk_index': 0, 'entities': [{'name': 'Infoveave', 'type': 'Concept'}, {'name': 'Value', 'type': 'Concept'}, {'name': 'send-email', 'type': 'Widget'}, {'name': 'automation', 'type': 'Section'}], 'triplets': [['send-email', 'belongs_to', 'automation'], ['send-email', 'relates_to', 'Infoveave'], ['send-email', 'relates_to', 'Value']]}, vector=None, shard_key=None, order_value=None)]
[ 2025-08-11 23:11:00,389 ] test_main.py:82 root - INFO - Retrieved result for point ID: d8d2ef36-2163-43f4-a0ce-5131dfe2a636
[ 2025-08-11 23:11:00,458 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_docs_kg_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-11 23:11:00,460 ] test_main.py:81 root - INFO - [Record(id='d8a64375-61d4-4b97-8302-f10cb379f782', payload={'url': 'https://infoveave-help.pages.dev/automation-v8/activities/send-email/', 'title': 'send-email', 'section': 'automation', 'terminologies': ['Infoveave', 'Value'], 'char_count': 3312, 'word_count': 495, 'page_content': 'activity allows you to compose and send emails as part of a workflow. You can configure recipient addresses, subject, body content, and attachments . The activity also supports dynamic emailing using fields from input data, and allows the use of pre-designed Infoveave templates for styling and formatting consistency. Use this activity to:\nSend individual or bulk emails based on incoming data\nAttach files generated in the workflow\nFormat emails using templates for consistency\nEmbed processed data directly into the email body\nUse case\n: A workflow generates a monthly sales report and automatically sends personalized emails to each regional manager with their region’s data attached and included in the body.\nInput\nType\nDescription\nData', 'chunk_index': 1, 'entities': [{'name': 'Infoveave', 'type': 'Concept'}, {'name': 'Value', 'type': 'Concept'}, {'name': 'send-email', 'type': 'Widget'}, {'name': 'automation', 'type': 'Section'}], 'triplets': [['send-email', 'belongs_to', 'automation'], ['send-email', 'relates_to', 'Infoveave'], ['send-email', 'relates_to', 'Value']]}, vector=None, shard_key=None, order_value=None)]
[ 2025-08-11 23:11:00,460 ] test_main.py:82 root - INFO - Retrieved result for point ID: d8a64375-61d4-4b97-8302-f10cb379f782
[ 2025-08-11 23:11:00,516 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_docs_kg_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-11 23:11:00,517 ] test_main.py:81 root - INFO - [Record(id='ec87e48b-d2c4-4cf3-a6fd-db34772dacb7', payload={'url': 'https://infoveave-help.pages.dev/automation-v8/activities/send-email/', 'title': 'send-email', 'section': 'automation', 'terminologies': ['Infoveave', 'Value'], 'char_count': 3312, 'word_count': 495, 'page_content': '(Optional) Tabular data used to populate dynamic fields like email addresses, template content, or attachment grouping.\nOutput\nOutput Type\nFormat\nDescription\nEmail Info\nTable Status of sent emails including recipient, success, and any errors encountered.\nConfiguration Fields\nField Name\nDescription\nConnection\nMail server connection to send emails (OAuth or SMTP supported).\nUse Default Credentials If enabled, uses Infoveave’s default email credentials. Disable to use custom authentication.\nUse Email Address From Data\nIf enabled, pulls recipient addresses from a specified column in the input data.\nEmail Column The column in the data containing the recipient’s email address (required if using email from data).\nEmail To Address\nStatic recipient(s) for the “To” field (comma-separated).\nEmail CC Address Email addresses for the “CC” field (comma-separated).\nEmail BCC Address\nEmail addresses for the “BCC” field.\nSubject\nSubject line of the email. Can be static or mapped from input data.\nContent The main body content of the email. Supports plain text or HTML.\nUse Infoveave Template\nWhen enabled, applies an Infoveave-designed template to the email layout.\nRerun Template Ensures template consistency across multiple emails in the same run.\nAttachment Name\nName of the attachment file (e.g.,\nSalesReport_May2025.xlsx\n).\nSplit By Column Splits data into separate attachments based on values in this column (used in bulk personalization).\nSheet Name\nThe name of the worksheet in the template used for formatting the attachment content.\nSend Data In Email Body If enabled, includes input data as a formatted table within the body of the email.\nAttachment File Pattern\nPattern to identify which files to attach from prior activities (e.g.,\n"*.pdf"\n).\nCombine\nSplit By Column with\nEmail Column\nto send a unique email with corresponding data and attachment per recipient.\nSample Input\nNot applicable\n(used only if sending emails dynamically per row or attaching generated data).\nSample Configuration\nField\nValue', 'chunk_index': 2, 'entities': [{'name': 'Infoveave', 'type': 'Concept'}, {'name': 'Value', 'type': 'Concept'}, {'name': 'send-email', 'type': 'Widget'}, {'name': 'automation', 'type': 'Section'}], 'triplets': [['send-email', 'belongs_to', 'automation'], ['send-email', 'relates_to', 'Infoveave'], ['send-email', 'relates_to', 'Value']]}, vector=None, shard_key=None, order_value=None)]
[ 2025-08-11 23:11:00,517 ] test_main.py:82 root - INFO - Retrieved result for point ID: ec87e48b-d2c4-4cf3-a6fd-db34772dacb7
[ 2025-08-11 23:11:00,585 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_docs_kg_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-11 23:11:00,586 ] test_main.py:81 root - INFO - [Record(id='028aadb2-5baf-494f-85a4-f6f5f6b4664f', payload={'url': 'https://infoveave-help.pages.dev/automation-v8/activities/mailgun/', 'title': 'mailgun', 'section': 'automation', 'terminologies': ['Infoveave', 'Tags', 'Value', 'Workflows'], 'char_count': 3213, 'word_count': 485, 'page_content': '2025-07-01T10:05:00Z\njohn@example.com\nWelcome Email\n18KB\nonboarding\nev1235\nopened\n2025-07-01T10:08:00Z jane@example.com\nPromo Offer\n22KB\npromotions\nFor\nMessages\nEntity (JSON):\n{\n"headers"\n: {\n"message-id"\n:\n"\n<abc@mailgun.org>', 'chunk_index': 3, 'entities': [{'name': 'Infoveave', 'type': 'Concept'}, {'name': 'Tags', 'type': 'Concept'}, {'name': 'Value', 'type': 'Concept'}, {'name': 'Workflows', 'type': 'Concept'}, {'name': 'mailgun', 'type': 'Widget'}, {'name': 'automation', 'type': 'Section'}], 'triplets': [['mailgun', 'belongs_to', 'automation'], ['mailgun', 'relates_to', 'Infoveave'], ['mailgun', 'relates_to', 'Tags'], ['mailgun', 'relates_to', 'Value'], ['mailgun', 'relates_to', 'Workflows']]}, vector=None, shard_key=None, order_value=None)]
[ 2025-08-11 23:11:00,587 ] test_main.py:82 root - INFO - Retrieved result for point ID: 028aadb2-5baf-494f-85a4-f6f5f6b4664f
[ 2025-08-11 23:11:00,636 ] _client.py:1025 httpx - INFO - HTTP Request: POST http://ai.infoveave.cloud:6333/collections/infoverve_docs_kg_hybrid/points "HTTP/1.1 200 OK"
[ 2025-08-11 23:11:00,637 ] test_main.py:81 root - INFO - [Record(id='706defb9-58dc-4788-890e-b2b40ff97675', payload={'url': 'https://infoveave-help.pages.dev/automation-v8/activities/start-iteration/', 'title': 'start-iteration', 'section': 'automation', 'terminologies': ['Infoveave', 'Value'], 'char_count': 2180, 'word_count': 314, 'page_content': 'Activity Step\nReplaced Values\nSendEmail_12345\nStep 1\nCustomerName: John Doe\nSendEmail_67890\nStep 2\nCustomerName: Jane Smith', 'chunk_index': 2, 'entities': [{'name': 'Infoveave', 'type': 'Concept'}, {'name': 'Value', 'type': 'Concept'}, {'name': 'start-iteration', 'type': 'Widget'}, {'name': 'automation', 'type': 'Section'}], 'triplets': [['start-iteration', 'belongs_to', 'automation'], ['start-iteration', 'relates_to', 'Infoveave'], ['start-iteration', 'relates_to', 'Value']]}, vector=None, shard_key=None, order_value=None)]
[ 2025-08-11 23:11:00,638 ] test_main.py:82 root - INFO - Retrieved result for point ID: 706defb9-58dc-4788-890e-b2b40ff97675
[ 2025-08-11 23:11:00,638 ] test_main.py:393 root - INFO - Found 2 final documents.
[ 2025-08-11 23:11:00,638 ] test_main.py:394 root - INFO - Context prepared for LLM response.
[ 2025-08-11 23:11:00,659 ] test_main.py:422 root - INFO - Generating final answer using LLM...
[ 2025-08-11 23:11:02,665 ] _client.py:1025 httpx - INFO - HTTP Request: POST https://api.groq.com/openai/v1/chat/completions "HTTP/1.1 200 OK"
[ 2025-08-11 23:11:02,672 ] test_main.py:424 root - INFO - Final LLM Response:

[ 2025-08-11 23:11:02,672 ] test_main.py:425 root - INFO - Let's break down how to create a workflow in Infoveave to execute your Oracle DB query and send the results via email every morning.

**1. The `Execute Query` Activity**

The `Execute Query` activity is your gateway to retrieving data from your Oracle database. Here's how to use it:

* **Connection:** First, you'll need to establish a connection to your Oracle database within Infoveave. This involves providing connection details like the database server address, port, username, and password.

* **Query:**  This is where you input your SQL query.  For example, if you want to retrieve customer names and their latest order dates, your query might look like this:

   ```sql
   SELECT customer_name, MAX(order_date) AS latest_order
   FROM customers
   JOIN orders ON customers.customer_id = orders.customer_id
   GROUP BY customer_name;
   ```

* **Output:** The `Execute Query` activity will return the results of your query as a tabular dataset. This data will be available for use in subsequent activities within your workflow.

**2. The `Send Email` Activity**

Now, let's configure the `Send Email` activity to deliver the query results to your customer:

* **Connection:** Choose the email server connection you want to use. Infoveave supports various options like OAuth connections for Gmail or Outlook, or SMTP connections for other email providers.

* **Recipient:** Specify the email address(es) of your customer(s). You can use a static email address or dynamically pull it from your input data.

* **Subject:** Craft a clear and concise subject line for your email.

* **Content:**  This is where you'll format the email body. You can use plain text or HTML.  Here's an example using HTML to present the query results in a table:

   ```html
   <h2>Customer Order Summary</h2>
   <table>
     <thead>
       <tr>
         <th>Customer Name</th>
         <th>Latest Order Date</th>
       </tr>
     </thead>
     <tbody>
       <!--  Infoveave will dynamically insert the query results here -->
     </tbody>
   </table>
   ```

* **Attachments:** If you need to include additional files with your email, you can attach them here.

**Putting it Together: Your Automated Workflow**

1. **Start:** Your workflow begins with a trigger. For daily execution, you'd use a "Schedule" trigger set to run every morning at your desired time.

2. **Execute Query:** The workflow then executes your `Execute Query` activity, retrieving the data from your Oracle database.

3. **Send Email:** Finally, the `Send Email` activity sends the email to your customer, dynamically populating the email body with the query results.

**Example Workflow**

Let's say you want to send a daily email with the top 5 selling products from your database.

1. **Trigger:** Schedule trigger to run daily at 8:00 AM.
2. **Execute Query:**
   * Connection: Oracle database connection.
   * Query: 
     ```sql
     SELECT product_name, SUM(quantity_sold) AS total_sold
     FROM sales
     GROUP BY product_name
     ORDER BY total_sold DESC
     LIMIT 5;
     ```
3. **Send Email:**
   * Recipient: `customer@example.com`
   * Subject: `Daily Top Selling Products`
   * Content: HTML template with a table displaying the product name and total sold.

**Important Notes:**

* **Error Handling:**  Consider adding error handling to your workflow to gracefully handle any issues with the database connection or email sending.
* **Security:**  Always store sensitive database credentials securely and avoid hardcoding them directly into your workflow.



[ 2025-08-11 23:11:02,674 ] test_main.py:432 root - INFO - LLM response saved to ./data/results/infoverve_helper_response.md
